====RUBY=====
class Computer
  def initialize program
    @memory = program.map &:to_i
    @instruction_pointer = 0
  end
 
  def step
    return nil if @instruction_pointer < 0
 
    a, b, c = @memory[@instruction_pointer .. @instruction_pointer + 2]
    @instruction_pointer += 3
 
    if a == -1
      b = readchar
    elsif b == -1
      writechar @memory[a]
    else
      difference = @memory[b] -= @memory[a]
      @instruction_pointer = c if difference <= 0
    end
 
    @instruction_pointer
  end
 
  def run
    current_pointer = @instruction_pointer
    current_pointer = step while current_pointer >= 0
  end
 
  private
 
  def readchar
    gets[0].ord
  end
 
  def writechar code_point
    print code_point.chr
  end
end
 
subleq = Computer.new ARGV
 
subleq.run

====RUBY=====
var memory = ARGV.map{.to_i};
var ip = 0;
 
while (ip.ge(0) && ip.lt(memory.len)) {
    var (a, b, c) = memory[ip, ip+1, ip+2];
    ip += 3;
    if (a < 0) {
        memory[b] = STDIN.getc.ord;
    }
    elsif (b < 0) {
        print memory[a].chr;
    }
    elsif ((memory[b] -= memory[a]) <= 0) {
        ip = c
    }
}

====PYTHON=====
import sys
 
def subleq(a):
    i = 0
    try:
        while i >= 0:
            if a[i] == -1:
                a[a[i + 1]] = ord(sys.stdin.read(1))
            elif a[i + 1] == -1:
                print(chr(a[a[i]]), end="")
            else:
                a[a[i + 1]] -= a[a[i]]
                if a[a[i + 1]] <= 0:
                    i = a[i + 2]
                    continue
            i += 3
    except (ValueError, IndexError, KeyboardInterrupt):
        print("abort")
        print(a)
 
subleq([15, 17, -1, 17, -1, -1, 16, 1, -1, 16, 3, -1, 15, 15,
        0, 0, -1, 72, 101, 108, 108, 111, 44, 32, 119, 111,
        114, 108, 100, 33, 10, 0])

