====RUBY=====
def root(a,b)
  return b if b<2
  a1, c = a-1, 1
  f = -> x {(a1*x+b/(x**a1))/a}  # a lambda with argument x
  d = f[c]
  e = f[d]
  c, d, e = d, e, f[e] until [d,e].include?(c)
  [d,e].min
end
 
puts "First 2,001 digits of the square root of two:"
puts root(2, 2*100**2000)
 

====RUBY=====
func root(a, b) {
    b < 2 && return(b)
    var (a1, c) = (a-1, 1)
    var f = {|x| (a1*x + b//(x**a1)) // a }
    var d = f(c)
    var e = f(d)
    while (c !~ [d, e]) {
        (c, d, e) = (d, e, f(e))
    }
    [d, e].min
}
 
say "First 2,001 digits of the square root of two:"
say root(2, 2 * 100**2000)

====PYTHON=====
def root(a, b):
    if b < 2:
        return b
    a1 = a - 1
    c = 1
    d = (a1 * c + b // (c ** a1)) // a
    e = (a1 * d + b // (d ** a1)) // a
    while c not in (d, e):
        c, d, e = d, e, (a1 * e + b // (e ** a1)) // a
    return min(d, e)
 
 
print("First 2,001 digits of the square root of two:\n{}".format(
    root(2, 2 * 100 ** 2000)
))

