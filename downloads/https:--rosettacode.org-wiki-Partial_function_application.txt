====RUBY=====
fs = proc { |f, s| s.map &f }
f1 = proc { |n| n * 2 }
f2 = proc { |n| n ** 2 }
fsf1 = fs.curry[f1]
fsf2 = fs.curry[f2]
 
[0..3, (2..8).step(2)].each do |e|
  p fsf1[e]
  p fsf2[e]
end

====RUBY=====
func fs(f) {
    func(*args) {
        args.map {f(_)}
    }
}
 
func double(n) { n  * 2 };
func square(n) { n ** 2 };
 
var fs_double = fs(double);
var fs_square = fs(square);
 
var s = (0 .. 3);
say "fs_double(#{s}): #{fs_double(s...)}";
say "fs_square(#{s}): #{fs_square(s...)}";
 
s = [2, 4, 6, 8];
say "fs_double(#{s}): #{fs_double(s...)}";
say "fs_square(#{s}): #{fs_square(s...)}";

====PYTHON=====
from functools import partial
 
def fs(f, s): return [f(value) for value in s]
 
def f1(value): return value * 2
 
def f2(value): return value ** 2
 
fsf1 = partial(fs, f1)
fsf2 = partial(fs, f2)
 
s = [0, 1, 2, 3]
assert fs(f1, s) == fsf1(s) # ==  [0, 2, 4, 6]
assert fs(f2, s) == fsf2(s) # ==  [0, 1, 4, 9]
 
s = [2, 4, 6, 8]
assert fs(f1, s) == fsf1(s) # ==  [4, 8, 12, 16]
assert fs(f2, s) == fsf2(s) # ==  [4, 16, 36, 64]

====PYTHON=====
def partial(f, g):
	def fg(*x): return f(g, *x)
	return fg
 
def fs(f, *x): return [ f(a) for a in x]
def f1(a): return a * 2
def f2(a): return a * a
 
fsf1 = partial(fs, f1)
fsf2 = partial(fs, f2)
 
print fsf1(1, 2, 3, 4)
print fsf2(1, 2, 3, 4)

