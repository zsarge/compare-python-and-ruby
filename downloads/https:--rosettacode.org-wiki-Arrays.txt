====RUBY=====
# create an array with one object in it
a = ['foo']
 
# the Array#new method allows several additional ways to create arrays
 
# push objects into the array
a << 1         # ["foo", 1]
a.push(3,4,5)  # ["foo", 1, 3, 4, 5]
 
# set the value at a specific index in the array
a[0] = 2       # [2, 1, 3, 4, 5]
 
# a couple of ways to set a slice of the array
a[0,3] = 'bar'    # ["bar", 4, 5]
a[1..-1] = 'baz'  # ["bar", "baz"]
a[0] = nil        # [nil, "baz"]
a[0,1] = nil      # ["baz"]
 
# retrieve an element
puts a[0]

====RUBY=====
# create an empty array
var arr = [];
 
# push objects into the array
arr << "a";           #: ['a']
arr.append(1,2,3);    #: ['a', 1, 2, 3]
 
# change an element inside the array
arr[2] = "b";         #: ['a', 1, 'b', 3]
 
# set the value at a specific index in the array (with autovivification)
arr[5] = "end";       #: ['a', 1, 'b', 3, nil, 'end']
 
# resize the array
arr.resize_to(-1);    #: []
 
# slice assignment
arr[0..2] = @|('a'..'c');       #: ['a', 'b', 'c']
 
# indices as arrays
var indices = [0, -1];
arr[indices] = ("foo", "baz");  #: ['foo', 'b', 'baz']
 
# retrieve multiple elements
var *elems = arr[0, -1]
say elems                #=> ['foo', 'baz']
 
# retrieve an element
say arr[-1];             #=> 'baz'

====PYTHON=====
array = []
 
array.append(1)
array.append(3)
 
array[0] = 2
 
print array[0]

====PYTHON=====
myArray = [0] * size

====PYTHON=====
myArray = [[0]* width] * height # DOES NOT WORK AS INTENDED!!!

====PYTHON=====
myArray = [[0 for x in range(width)] for y in range(height)]

====PYTHON=====
myArray = list()
for x in range(height):
   myArray.append([0] * width)

====PYTHON=====
 
# Retrieve an element directly from the array.
item = array[index]
 
# Use the array like a stack.  Note that using the pop() method removes the element.
array.pop()  # Pop last item in a list
array.pop(0) # Pop first item in a list
 
# Using a negative element counts from the end of the list.
item = array[-1] # Retrieve last element in a list.
 

====PYTHON=====
 
try:
    # This will cause an exception, which will then be caught.
    print array[len(array)]
except IndexError as e:
    # Print the exception. 
    print e
 

