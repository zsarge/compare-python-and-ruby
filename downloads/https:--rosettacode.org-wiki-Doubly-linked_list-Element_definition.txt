====RUBY=====
class DListNode < ListNode
  attr_accessor :prev
  # accessors :succ and :value are inherited
 
  def initialize(value, prev=nil, succ=nil)
    @value = value
    @prev = prev
    @prev.succ = self if prev
    @succ = succ
    @succ.prev = self if succ
  end
 
  def self.from_values(*ary)
    ary << (f = ary.pop)
    ary.map! {|i| new i }
    ary.inject(f) {|p, c| p.succ = c; c.prev = p; c }
  end
end
 
list = DListNode.from_values 1,2,3,4

====RUBY=====
var node = Hash.new(
     data => 'say what',
     next => foo_node,
     prev => bar_node,
);
 
node{:next} = quux_node;  # mutable

====PYTHON=====
class Node(object):
     def __init__(self, data = None, prev = None, next = None):
         self.prev = prev
         self.next = next
         self.data = data
     def __str__(self):
         return str(self.data)
     def __repr__(self):
         return repr(self.data)
     def iter_forward(self):
         c = self
         while c != None:
             yield c
             c = c.next
     def iter_backward(self):
         c = self
         while c != None:
             yield c
             c = c.prev

