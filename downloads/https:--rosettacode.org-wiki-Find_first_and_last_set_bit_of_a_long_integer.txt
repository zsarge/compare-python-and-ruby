====RUBY=====
def msb(x)
  x.bit_length - 1
end
 
def lsb(x)
  msb(x & -x)
end
 
6.times do |i|
  x = 42 ** i
  puts "%10d MSB: %2d LSB: %2d" % [x, msb(x), lsb(x)]
end
 
6.times do |i|
  x = 1302 ** i
  puts "%20d MSB: %2d LSB: %2d" % [x, msb(x), lsb(x)]
end

====RUBY=====
func msb(n) {
    var b = 0
    while(n >>= 1) { ++b }
    return b
}
 
func lsb(n) {
    msb(n & -n)
}

====RUBY=====
func table (base,power) {
    var digits = length(base**power)
    printf("%#{digits}s  lsb msb\n", 'number')
    for n in (0..power) {
        var x = base**n
        printf("%#{digits}s  %2s  %3s\n", x, lsb(x), msb(x))
    }
}
 
table(42, 20)
table(1302, 20)

====PYTHON=====
def msb(x):
    return x.bit_length() - 1
 
def lsb(x):
    return msb(x & -x)
 
for i in range(6):
    x = 42 ** i
    print("%10d MSB: %2d LSB: %2d" % (x, msb(x), lsb(x)))
 
for i in range(6):
    x = 1302 ** i
    print("%20d MSB: %2d LSB: %2d" % (x, msb(x), lsb(x)))

