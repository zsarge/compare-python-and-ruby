====RUBY=====
require "big"
 
class Bernoulli
  include Iterator(Tuple(Int32, BigRational))
 
  def initialize
    @a = [] of BigRational
    @m = 0
  end
 
  def next
    @a << BigRational.new(1, @m+1)
    @m.downto(1) { |j| @a[j-1] = j*(@a[j-1] - @a[j]) }
    v = @m.odd? && @m != 1 ? BigRational.new(0, 1) : @a.first
    return {@m, v}
  ensure
    @m += 1
  end
end
 
b = Bernoulli.new
bn = b.first(61).to_a
 
max_width = bn.map { |_, v| v.numerator.to_s.size }.max
bn.reject { |i, v| v.zero? }.each do |i, v|
  puts "B(%2i) = %*i/%i" % [i, max_width, v.numerator, v.denominator]
end
 

====RUBY=====
require "big"
 
def bernoulli(n)
    ar = [] of BigRational
    (0..n).each do |m|
        ar << BigRational.new(1, m+1)
        m.downto(1) { |j| ar[j-1] = j * (ar[j-1] - ar[j]) }
    end
    ar[0] # (which is Bn)
end
 
b_nums = (0..61).map { |i| bernoulli(i) }
width  = b_nums.map{ |b| b.numerator.to_s.size }.max
b_nums.each_with_index { |b,i| puts "B(%2i) = %*i/%i" % [i, width, b.numerator, b.denominator] unless b.zero? }
 

====RUBY=====
require "big"
 
def bernoulli2(limit)
    ar = [] of BigRational
    (0..limit).each do |m|
      ar << BigRational.new(1, m+1)
      m.downto(1) { |j| ar[j-1] = j * (ar[j-1] - ar[j]) }
      yield ar[0] # use Bn value in required block
    end
end
 
b_nums = [] of BigRational
bernoulli2(61){ |b| b_nums << b }
width  = b_nums.map{ |b| b.numerator.to_s.size }.max
b_nums.each_with_index { |b,i| puts "B(%2i) = %*i/%i" % [i, width, b.numerator, b.denominator] unless b.zero? }
 

====RUBY=====
bernoulli = Enumerator.new do |y|
  ar = []
  0.step do |m|
    ar << Rational(1, m+1)
    m.downto(1){|j| ar[j-1] = j*(ar[j-1] - ar[j]) }
    y << ar.first  # yield
  end
end
 
b_nums = bernoulli.take(61)
width  = b_nums.map{|b| b.numerator.to_s.size}.max
b_nums.each_with_index {|b,i| puts "B(%2i) = %*i/%i" % [i, width, b.numerator, b.denominator] unless b.zero? }
 
 

====RUBY=====
say bernoulli(42).as_frac  #=> 1520097643918070802691/1806

====RUBY=====
func bernoulli_number(n) is cached {
 
    n.is_one && return 1/2
    n.is_odd && return   0
 
    1 - sum(^n, {|k|
        binomial(n,k) * __FUNC__(k) / (n - k + 1)
    })
}
 
for n in (0..60) {
    var Bn = bernoulli_number(n) || next
    printf("B(%2d) = %44s / %s\n", n, Bn.nude)
}

====RUBY=====
func ramanujan_bernoulli_number(n) is cached {
 
    return 1/2 if n.is_one
    return 0   if n.is_odd
 
    ((n%6 == 4 ? -1/2 : 1) * (n+3)/3 - sum(1 .. (n - n%6)/6, {|k|
        binomial(n+3, n - 6*k) * __FUNC__(n - 6*k)
    })) / binomial(n+3, n)
}

====RUBY=====
func bernoulli_number_from_zeta(n) {
 
    n.is_zero && return   1
    n.is_one  && return 1/2
    n.is_odd  && return   0
 
    var log2B = (log(4*Num.tau*n)/2 + n*log(n) - n*log(Num.tau) - n)/log(2)
    local Num!PREC = *(int(n + log2B) + (n <= 90 ? 18 : 0))
 
    var K = 2*(n! / Num.tau**n)
    var d = n.divisors.grep {|k| is_prime(k+1) }.prod {|k| k+1 }
    var z = ceil((K*d).root(n-1)).primes.prod {|p| 1 - p.float**(-n) }
 
    (-1)**(n/2 + 1) * int(ceil(d*K / z)) / d
}

====RUBY=====
func bernoulli_print {
    var a = []
    for m in (0..60) {
        a << 1/(m+1)
        for j in (1..m -> flip) {
            (a[j-1] -= a[j]) *= j
        }
        a[0] || next
        printf("B(%2d) = %44s / %s\n", m, a[0].nude)
    }
}
 
bernoulli_print()

====PYTHON=====
from fractions import Fraction as Fr
 
def bernoulli(n):
    A = [0] * (n+1)
    for m in range(n+1):
        A[m] = Fr(1, m+1)
        for j in range(m, 0, -1):
          A[j-1] = j*(A[j-1] - A[j])
    return A[0] # (which is Bn)
 
bn = [(i, bernoulli(i)) for i in range(61)]
bn = [(i, b) for i,b in bn if b]
width = max(len(str(b.numerator)) for i,b in bn)
for i,b in bn:
    print('B(%2i) = %*i/%i' % (i, width, b.numerator, b.denominator))

====PYTHON=====
def bernoulli2():
    A, m = [], 0
    while True:
        A.append(Fr(1, m+1))
        for j in range(m, 0, -1):
          A[j-1] = j*(A[j-1] - A[j])
        yield A[0] # (which is Bm)
        m += 1
 
bn2 = [ix for ix in zip(range(61), bernoulli2())]
bn2 = [(i, b) for i,b in bn2 if b]
width = max(len(str(b.numerator)) for i,b in bn2)
for i,b in bn2:
    print('B(%2i) = %*i/%i' % (i, width, b.numerator, b.denominator))

