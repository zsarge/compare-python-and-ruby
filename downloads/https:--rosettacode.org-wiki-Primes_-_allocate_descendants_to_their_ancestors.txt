====RUBY=====
var maxsum = 99
var primes = maxsum.primes
 
var descendants = (maxsum+1).of { [] }
var ancestors   = (maxsum+1).of { [] }
 
for p in (primes) {
    descendants[p] << p
    for s in (1 .. descendants.end-p) {
        descendants[s + p] << descendants[s].map {|q| p*q }...
    }
}
 
for p in (primes + [4]) {
    descendants[p].pop
}
 
var total = 0
 
for s in (1 .. maxsum) {
 
    descendants[s].sort!
 
    total += (var dsclen = descendants[s].len)
    var idx = descendants[s].first_index {|x| x > maxsum }
 
    for d in (descendants[s].slice(0, idx)) {
        ancestors[d] = (ancestors[s] + [s])
    }
 
    if ((s <= 20) || (s ~~ [46, 74, 99])) {
        printf("%2d: %d Ancestor(s): %-15s %5s Descendant(s): %s\n", s,
            ancestors[s].len, "[#{ancestors[s].join(' ')}]", descendants[s].len,
            dsclen <= 10 ? descendants[s] : "[#{descendants[s].first(10).join(' ')} ...]")
    }
}
 
say "\nTotal descendants: #{total}"

====PYTHON=====
from __future__ import print_function
from itertools import takewhile
 
maxsum = 99
 
def get_primes(max):
    if max < 2:
        return []
    lprimes = [2]
    for x in range(3, max + 1, 2):
        for p in lprimes:
            if x % p == 0:
                break
        else:
            lprimes.append(x)
    return lprimes
 
descendants = [[] for _ in range(maxsum + 1)]
ancestors = [[] for _ in range(maxsum + 1)]
 
primes = get_primes(maxsum)
 
for p in primes:
    descendants[p].append(p)
    for s in range(1, len(descendants) - p):
        descendants[s + p] += [p * pr for pr in descendants[s]]
 
for p in primes + [4]:
    descendants[p].pop()
 
total = 0
for s in range(1, maxsum + 1):
    descendants[s].sort()
    for d in takewhile(lambda x: x <= maxsum, descendants[s]):
        ancestors[d] = ancestors[s] + [s]
    print([s], "Level:", len(ancestors[s]))
    print("Ancestors:", ancestors[s] if len(ancestors[s]) else "None")
    print("Descendants:", len(descendants[s]) if len(descendants[s]) else "None")
    if len(descendants[s]):
        print(descendants[s])
    print()
    total += len(descendants[s])
 
print("Total descendants", total)

