====RUBY=====
def sign(x)
  x <=> 0
end
 
def find_roots(f, range, step=0.001)
  sign = sign(f[range.begin])
  range.step(step) do |x|
    value = f[x]
    if value == 0
      puts "Root found at #{x}"
    elsif sign(value) == -sign
      puts "Root found between #{x-step} and #{x}"
    end
    sign = sign(value)
  end
end
 
f = lambda { |x| x**3 - 3*x**2 + 2*x }
find_roots(f, -1..3)

====RUBY=====
class Numeric
  def sign
    self <=> 0
  end
end
 
def find_roots(range, step = 1e-3)
  range.step( step ).inject( yield(range.begin).sign ) do |sign, x|
    value = yield(x)
    if value == 0
      puts "Root found at #{x}"
    elsif value.sign == -sign
      puts "Root found between #{x-step} and #{x}"
    end
    value.sign
  end
end
 
find_roots(-1..3) { |x| x**3 - 3*x**2 + 2*x }

====RUBY=====
func f(x) {
    x*x*x - 3*x*x + 2*x
}
 
var step = 0.001
var start = -1
var stop = 3
 
for x in range(start+step, stop, step) {
    static sign = false
    given (var value = f(x)) {
        when (0) {
            say "Root found at #{x}"
        }
        case (sign && ((value > 0) != sign)) {
            say "Root found near #{x}"
        }
    }
    sign = value>0
}

====PYTHON=====
f = lambda x: x * x * x - 3 * x * x + 2 * x
 
step = 0.001 # Smaller step values produce more accurate and precise results
start = -1
stop = 3
 
sign = f(start) > 0
 
x = start
while x <= stop:
    value = f(x)
 
    if value == 0:
        # We hit a root
        print "Root found at", x
    elif (value > 0) != sign:
        # We passed a root
        print "Root found near", x
 
    # Update our sign
    sign = value > 0
 
    x += step

