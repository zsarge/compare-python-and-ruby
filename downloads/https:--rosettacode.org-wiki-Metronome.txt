====RUBY=====
 
#!/usr/bin/ruby
 
bpm = Integer(ARGV[0]) rescue 60 # sets BPM by the first command line argument, set to 60 if none provided
msr = Integer(ARGV[1]) rescue 4 # sets number of beats in a measure by the second command line argument, set to 4 if none provided
i = 0
 
loop do
  (msr-1).times do 
    puts "\a"
    sleep(60.0/bpm)
  end
  puts "\aAND #{i += 1}"
  sleep(60.0/bpm)
end
 

====RUBY=====
func metronome (beats_per_minute = 72, beats_per_bar = 4) {
 
    var counter   = 0
    var duration  = 60/beats_per_minute
    var base_time = Time.micro+duration
 
    STDOUT.autoflush(true)
 
    for next_time in (base_time..Inf `by` duration) {
        if (counter++ %% beats_per_bar) {
            print "\nTICK"
        }
        else {
            print " tick"
        }
        Sys.sleep(next_time - Time.micro)
    }
}
 
say metronome(ARGV.map{ Num(_) }...)

====PYTHON=====
 
#lang Python
import time
 
def main(bpm = 72, bpb = 4):
    sleep = 60.0 / bpm
    counter = 0
    while True:
        counter += 1
        if counter % bpb:
            print 'tick'
        else:
            print 'TICK'
        time.sleep(sleep)
 
 
 
main()
 
 

