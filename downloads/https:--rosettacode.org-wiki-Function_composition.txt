====RUBY=====
require "math"
 
def compose(f : Proc(T, _), g : Proc(_, _)) forall T
  return ->(x : T) { f.call(g.call(x)) }
end
 
compose(->Math.sin(Float64), ->Math.asin(Float64)).call(0.5)  #=> 0.5

====RUBY=====
def compose(f,g)
  lambda {|x| f[g[x]]}
end
s = compose(Math.method(:sin), Math.method(:cos))
p s[0.5]  # => 0.769196354841008
 
# verify
p Math.sin(Math.cos(0.5))  # => 0.769196354841008

====RUBY=====
func compose(f, g) {
    func(x) { f(g(x)) }
}
 
var fg = compose(func(x){ sin(x) }, func(x){ cos(x) })
say fg(0.5)      # => 0.76919635484100842185251475805107

====PYTHON=====
compose = lambda f, g: lambda x: f( g(x) )

====PYTHON=====
>>> compose = lambda f, g: lambda x: f( g(x) )
>>> from math import sin, asin
>>> sin_asin = compose(sin, asin)
>>> sin_asin(0.5)
0.5
>>>

====PYTHON=====
from math import (acos, cos, asin, sin)
 
 
# compose (<<<) :: (b -> c) -> (a -> b) -> a -> c
def compose(g, f):
    '''Right to left function composition.'''
    return lambda x: g(f(x))
 
 
# main :: IO ()
def main():
    '''Test'''
 
    print(list(map(
        lambda f: f(0.5),
        zipWith(compose)(
            [sin, cos, lambda x: x ** 3.0]
        )([asin, acos, lambda x: x ** (1 / 3.0)])
    )))
 
 
# GENERIC FUNCTIONS ---------------------------------------
 
 
# zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
def zipWith(f):
    '''A list constructed by zipping with a
       custom function, rather than with the
       default tuple constructor.'''
    return lambda xs: lambda ys: (
        map(f, xs, ys)
    )
 
 
if __name__ == '__main__':
    main()

====PYTHON=====
from functools import reduce
from numbers import Number
import math
 
 
def main():
    '''Test'''
 
    f = composeList([
        lambda x: x / 2,
        succ,
        math.sqrt
    ])
 
    print(
        f(5)
    )
 
 
# GENERIC FUNCTIONS ---------------------------------------
 
 
# composeList :: [(a -> a)] -> (a -> a)
def composeList(fs):
    '''Composition, from right to left,
       of a series of functions.'''
    return lambda x: reduce(
        lambda a, f: f(a),
        fs[::-1],
        x
    )
 
 
# succ :: Enum a => a -> a
def succ(x):
    '''The successor of a value. For numeric types, (1 +).'''
    return 1 + x if isinstance(x, Number) else (
        chr(1 + ord(x))
    )
 
 
if __name__ == '__main__':
    main()

====PYTHON=====
 
# Contents of `pip install compositions'
 
class Compose(object):
    def __init__(self, func):
        self.func = func
 
    def __call__(self, x):
        return self.func(x)
 
    def __mul__(self, neighbour):
        return Compose(lambda x: self.func(neighbour.func(x)))
 
# from composition.composition import Compose
if __name__ == "__main__":
    # Syntax 1
    @Compose
    def f(x):
        return x
 
    # Syntax 2
    g = Compose(lambda x: x)
 
    print((f * g)(2))

