====RUBY=====
weights = {
  'alliance'   =>-624, 'archbishop'=>-915, 'balm'       => 397, 'bonnet'   => 452,
  'brute'      => 870, 'centipede' =>-658, 'cobol'      => 362, 'covariate'=> 590,
  'departure'  => 952, 'deploy'    =>  44, 'diophantine'=> 645, 'efferent' =>  54,
  'elysee'     =>-326, 'eradicate' => 376, 'escritoire' => 856, 'exorcism' =>-983,
  'fiat'       => 170, 'filmy'     =>-874, 'flatworm'   => 503, 'gestapo'  => 915,
  'infra'      =>-847, 'isis'      =>-982, 'lindholm'   => 999, 'markham'  => 475,
  'mincemeat'  =>-880, 'moresby'   => 756, 'mycenae'    => 183, 'plugging' =>-266,
  'smokescreen'=> 423, 'speakeasy' =>-745, 'vein'       => 813,
}
 
words = weights.keys
1.upto(words.length) do |n|
  zerosum = words.combination(n).find do |subset|
    subset.reduce(0) {|sum, word| sum + weights[word]} == 0
  end
 
  if zerosum
    puts "a subset of length #{n} that sums to zero: #{zerosum}"
  else
    puts "no subsets of length #{n} sum to zero"
  end
end

====RUBY=====
var pairs = Hash(
    alliance    => -624, archbishop => -915,
    brute       =>  870, centipede  => -658,
    departure   =>  952, deploy     =>   44,
    elysee      => -326, eradicate  =>  376,
    fiat        =>  170, filmy      => -874,
    infra       => -847, isis       => -982,
    mincemeat   => -880, moresby    =>  756,
    smokescreen =>  423, speakeasy  => -745,
    balm        =>  397, bonnet     =>  452,
    cobol       =>  362, covariate  =>  590,
    diophantine =>  645, efferent   =>   54,
    escritoire  =>  856, exorcism   => -983,
    flatworm    =>  503, gestapo    =>  915,
    lindholm    =>  999, markham    =>  475,
    mycenae     =>  183, plugging   => -266,
    vein        =>  813,
)
 
var weights = pairs.keys.sort.map{|k| pairs{k} }
var inverse = pairs.flip
 
for n in (1 .. weights.end) {
    var found = false
    weights.combinations(n, {|*comb|
        if (comb.sum == 0) {
            say "Length #{n}: "+" ".join(inverse{comb...})
            found = true
            break
        }
    })
    found || say "Length #{n}: (none)"
}

====PYTHON=====
words = { # some values are different from example
	"alliance": -624,	"archbishop": -925,	"balm":	397,
	"bonnet": 452,		"brute": 870,		"centipede": -658,
	"cobol": 362,		"covariate": 590,	"departure": 952,
	"deploy": 44,		"diophantine": 645,	"efferent": 54,
	"elysee": -326,		"eradicate": 376,	"escritoire": 856,
	"exorcism": -983,	"fiat": 170,		"filmy": -874,
	"flatworm": 503,	"gestapo": 915,		"infra": -847,
	"isis": -982,		"lindholm": 999,	"markham": 475,
	"mincemeat": -880,	"moresby": 756,		"mycenae": 183,
	"plugging": -266,	"smokescreen": 423,	"speakeasy": -745,
	"vein": 813
}
 
neg = 0
pos = 0
for (w,v) in words.iteritems():
	if v > 0: pos += v
	else:     neg += v
 
sums = [0] * (pos - neg + 1)
 
for (w,v) in words.iteritems():
	s = sums[:]
	if not s[v - neg]: s[v - neg] = (w,)
 
	for (i, w2) in enumerate(sums):
		if w2 and not s[i + v]:
			s[i + v] = w2 + (w,)
 
	sums = s
	if s[-neg]:
		for x in s[-neg]:
			print(x, words[x])
		break

====PYTHON=====
>>> from itertools import combinations
>>> 
>>> word2weight = {"alliance": -624, "archbishop": -915, "balm": 397, "bonnet": 452,
  "brute": 870, "centipede": -658, "cobol": 362, "covariate": 590,
  "departure": 952, "deploy": 44, "diophantine": 645, "efferent": 54,
  "elysee": -326, "eradicate": 376, "escritoire": 856, "exorcism": -983,
  "fiat": 170, "filmy": -874, "flatworm": 503, "gestapo": 915,
  "infra": -847, "isis": -982, "lindholm": 999, "markham": 475,
  "mincemeat": -880, "moresby": 756, "mycenae": 183, "plugging": -266,
  "smokescreen": 423, "speakeasy": -745, "vein": 813}
>>> answer = None
>>> for r in range(1, len(word2weight)+1):
	if not answer:
		for comb in combinations(word2weight, r):
			if sum(word2weight[w] for w in comb) == 0:
				answer = [(w, word2weight[w]) for w in comb]
				break
 
 
>>> answer
[('archbishop', -915), ('gestapo', 915)]

