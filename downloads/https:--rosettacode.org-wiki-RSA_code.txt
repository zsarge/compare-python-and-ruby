====RUBY=====
 
#!/usr/bin/ruby
 
require 'openssl' # for mod_exp only
require 'prime'
 
def rsa_encode blocks, e, n
  blocks.map{|b| b.to_bn.mod_exp(e, n).to_i}
end
 
def rsa_decode ciphers, d, n
  rsa_encode ciphers, d, n
end
 
# all numbers in blocks have to be < modulus, or information is lost
# for secure encryption only use big modulus and blocksizes
def text_to_blocks text, blocksize=64 # 1 hex = 4 bit => default is 256bit
  text.each_byte.reduce(""){|acc,b| acc << b.to_s(16).rjust(2, "0")} # convert text to hex (preserving leading 0 chars)
      .each_char.each_slice(blocksize).to_a                          # slice hexnumbers in pieces of blocksize
      .map{|a| a.join("").to_i(16)}                                  # convert each slice into internal number
end
 
def blocks_to_text blocks
  blocks.map{|d| d.to_s(16)}.join("")                                # join all blocks into one hex-string
        .each_char.each_slice(2).to_a                                # group into pairs
	.map{|s| s.join("").to_i(16)}                                # number from 2 hexdigits is byte
	.flatten.pack("C*")                                          # pack bytes into ruby-string
	.force_encoding(Encoding::default_external)                  # reset encoding
end
 
def generate_keys p1, p2
  n = p1 * p2
  t = (p1 - 1) * (p2 - 1)
  e = 2.step.each do |i|
    break i if i.gcd(t) == 1
  end
  d = 1.step.each do |i|
    break i if (i * e) % t == 1
  end
  return e, d, n
end
 
p1, p2 = Prime.take(100).last(2)
public_key, private_key, modulus =
  generate_keys p1, p2
 
print "Message: "
message = gets
blocks = text_to_blocks message, 4 # very small primes
print "Numbers: "; p blocks
encoded = rsa_encode(blocks, public_key, modulus)
print "Encrypted as: "; p encoded
decoded = rsa_decode(encoded, private_key, modulus)
print "Decrypted to: "; p decoded
final = blocks_to_text(decoded)
print "Decrypted Message: "; puts final
 

====RUBY=====
const n = 9516311845790656153499716760847001433441357
const e = 65537
const d = 5617843187844953170308463622230283376298685
 
module Message {
    var alphabet = [('A' .. 'Z')..., ' ']
    var rad = alphabet.len
    var code = Hash(^rad -> map {|i| (alphabet[i], i) }...)
    func encode(String t) {
        [code{t.reverse.chars...}] ~Z* t.len.range.map { |i| rad**i } -> sum(0)
    }
    func decode(Number n) {
        ''.join(alphabet[
            gather {
                loop {
                    var (d, m) = n.divmod(rad)
                    take(m)
                    break if (n < rad)
                    n = d
                }
            }...]
        ).reverse
    }
}
 
var secret_message = "ROSETTA CODE"
say "Secret message is #{secret_message}"
 
var numeric_message = Message::encode(secret_message)
say "Secret message in integer form is #{numeric_message}"
 
var numeric_cipher = expmod(numeric_message, e, n)
say "After exponentiation with public exponent we get: #{numeric_cipher}"
 
var text_cipher = Message::decode(numeric_cipher)
say "This turns into the string #{text_cipher}"
 
var numeric_cipher2 = Message::encode(text_cipher)
say "If we re-encode it in integer form we get #{numeric_cipher2}"
 
var numeric_message2 = expmod(numeric_cipher2, d, n)
say "After exponentiation with SECRET exponent we get: #{numeric_message2}"
 
var secret_message2 = Message::decode(numeric_message2)
say "This turns into the string #{secret_message2}"

====PYTHON=====
import binascii
 
n = 9516311845790656153499716760847001433441357    # p*q = modulus
e = 65537
d = 5617843187844953170308463622230283376298685
 
message='Rosetta Code!'
print('message                 ', message)
 
hex_data   = binascii.hexlify(message.encode())
print('hex data                ', hex_data)
 
plain_text = int(hex_data, 16)
print('plain text integer      ', plain_text)
 
if plain_text > n:
  raise Exception('plain text too large for key')
 
encrypted_text = pow(plain_text,     e, n)
print('encrypted text integer  ', encrypted_text)
 
decrypted_text = pow(encrypted_text, d, n)
print('decrypted text integer  ', decrypted_text)
 
print('message                 ', binascii.unhexlify(hex(decrypted_text)[2:]).decode())     # [2:] slicing, to strip the 0x part 
 
 

