====RUBY=====
values = [1, 2, 3]
 
new_values = values.map do |number|
  number * 2
end
 
puts new_values  #=> [2, 4, 6]

====RUBY=====
values = [1, 2, 3]
 
def double(number)
  number * 2
end
 
# the `->double(Int32)` syntax creates a proc from a function/method. argument types must be specified.
# the `&proc` syntax passes a proc as a block.
# combining the two passes a function/method as a block
new_values = values.map &->double(Int32)
 
puts new_values  #=> [2, 4, 6]

====RUBY=====
for i in [1,2,3,4,5] do
   puts i**2
end

====RUBY=====
[1,2,3,4,5].each{ |i| puts i**2 }

====RUBY=====
[1,2,3,4,5].map{ |i| i**2 }

====RUBY=====
func callback(i) { say i**2 }

====RUBY=====
[1,2,3,4].each(callback)

====RUBY=====
[1,2,3,4].each{|i| say i**2 }

====RUBY=====
[1,2,3,4,5].map{|i| i**2 }

====PYTHON=====
def square(n):
    return n * n
 
numbers = [1, 3, 5, 7]
 
squares1 = [square(n) for n in numbers]     # list comprehension
 
squares2a = map(square, numbers)            # functional form
 
squares2b = map(lambda x: x*x, numbers)     # functional form with `lambda`
 
squares3 = [n * n for n in numbers]         # no need for a function,
                                            # anonymous or otherwise
 
isquares1 = (n * n for n in numbers)        # iterator, lazy
 
import itertools
isquares2 = itertools.imap(square, numbers) # iterator, lazy

====PYTHON=====
print " ".join(str(n * n) for n in range(10))

====PYTHON=====
print " ".join(map(str, map(square, range(10))))

====PYTHON=====
0 1 4 9 16 25 36 49 64 81

