====RUBY=====
start = Time.utc
ch = Channel(Int32 | Symbol).new
 
spawn do
  i = 0
  loop do
    sleep 1
    ch.send(i += 1)
  end
end
 
Signal::INT.trap do
  Signal::INT.reset
  ch.send(:kill)
end
 
loop do
  x = ch.receive
  break if x == :kill
  puts x
end
 
elapsed = Time.utc - start
puts "Program has run for %5.3f seconds." % elapsed.total_seconds

====RUBY=====
t1 = Time.now
 
catch :done do
  Signal.trap('INT') do
    Signal.trap('INT', 'DEFAULT') # reset to default
    throw :done
  end
  n = 0
  loop do
    sleep(0.5)
    n += 1
    puts n
  end
end
 
tdelt = Time.now - t1
puts 'Program has run for %5.3f seconds.' % tdelt

====RUBY=====
var start = Time.sec;
 
Sig.INT { |_|
    Sys.say("Ran for #{Time.sec - start} seconds.");
    Sys.exit;
}
 
{ |i|
    Sys.say(i);
    Sys.sleep(0.5);
} * Math.inf;

====PYTHON=====
import time
 
def counter():
    n = 0
    t1 = time.time()
    while True:
        try:
            time.sleep(0.5)
            n += 1
            print n
        except KeyboardInterrupt, e:
            print 'Program has run for %5.3f seconds.' % (time.time() - t1)
            break
 
counter()

====PYTHON=====
import time
 
def intrptWIN():
   procDone = False
   n = 0
 
   while not procDone:
      try:
         time.sleep(0.5)
         n += 1
         print n
      except KeyboardInterrupt, e:
         procDone = True
 
t1 = time.time()
intrptWIN()
tdelt = time.time() - t1
print 'Program has run for %5.3f seconds.' % tdelt

====PYTHON=====
import signal, time, threading
done = False
n = 0
 
def counter():
   global n, timer
   n += 1
   print n
   timer = threading.Timer(0.5, counter)
   timer.start()
 
def sigIntHandler(signum, frame):
   global done
   timer.cancel()
   done = True
 
def intrptUNIX():
   global timer
   signal.signal(signal.SIGINT, sigIntHandler)
 
   timer = threading.Timer(0.5, counter)
   timer.start()
   while not done:
      signal.pause()
 
t1 = time.time()
intrptUNIX()
tdelt = time.time() - t1
print 'Program has run for %5.3f seconds.' % tdelt

====PYTHON=====
import time, signal
 
class WeAreDoneException(Exception):
    pass
 
def sigIntHandler(signum, frame):
    signal.signal(signal.SIGINT, signal.SIG_DFL) # resets to default handler
    raise WeAreDoneException
 
t1 = time.time()
 
try:
    signal.signal(signal.SIGINT, sigIntHandler)
    n = 0
    while True:
        time.sleep(0.5)
        n += 1
        print n
except WeAreDoneException:
    pass
 
tdelt = time.time() - t1
print 'Program has run for %5.3f seconds.' % tdelt

