====RUBY=====
def valid?(sailor, nuts)
  sailor.times do
    return false if (nuts % sailor) != 1
    nuts -= 1 + nuts / sailor
  end
  nuts > 0 and nuts % sailor == 0
end
 
[5,6].each do |sailor|
  n = sailor
  n += 1 until valid?(sailor, n)
  puts "\n#{sailor} sailors => #{n} coconuts"
  (sailor+1).times do
    div, mod = n.divmod(sailor)
    puts "  #{[n, div, mod]}"
    n -= 1 + div
  end
end

====RUBY=====
def coconuts(sailor)
  sailor.step(by:sailor) do |nuts|
    flag = sailor.times do
      break if nuts % (sailor-1) != 0
      nuts += nuts / (sailor-1) + 1
    end
    return nuts if flag
  end
end
 
(2..9).each do |sailor|
  puts "#{sailor}: #{coconuts(sailor)}"
end

====RUBY=====
def ng (sailors)
  def _ng (sailors, iter, start) #a method that given a possible answer applies the constraints of the tale to see if it is correct
    n, g = [start], [start/sailors]
    (1..iter).each{|s|
      g[s],rem = n[s-1].divmod(sailors-1)
      rem > 0 ? (return false) : n[s] = g[s]*sailors + 1
    }
    return [n,g]
  end
  n, start, step = [], sailors*(sailors-1), 1
  (2..sailors).each{|s|
    g=0; until n=_ng(sailors,s,start + g*step*sailors*(sailors-1)) do g+=1 end
    start,step = n[0][0], step*(sailors-1)
  }
  return n
end
 
 

====RUBY=====
(3..10).each{|sailors| puts "Number of sailors = #{sailors}"; p ng(sailors)}

====RUBY=====
 
n = ng(100)
(0..100).each{|g| puts "#{n[0][100-g]}:#{n[1][100-g]}"}

====RUBY=====
func coconuts(sailors, monkeys=1) {
    if ((sailors < 2) || (monkeys < 1) || (sailors <= monkeys)) {
        return 0
    }
    var blue_cocos = sailors-1
    var pow_bc = blue_cocos**sailors
    var x_cocos = pow_bc
    while ((x_cocos-blue_cocos)%sailors || ((x_cocos-blue_cocos)/sailors < 1)) {
        x_cocos += pow_bc
    }
    return monkeys*(x_cocos / pow_bc * sailors**sailors - blue_cocos)
}
 
2.to(9).each { |sailor|
    say "#{sailor}: #{coconuts(sailor)}";
}

====PYTHON=====
def monkey_coconuts(sailors=5):
    "Parameterised the number of sailors using an inner loop including the last mornings case"    
    nuts = sailors
    while True:
        n0, wakes = nuts, []
        for sailor in range(sailors + 1):
            portion, remainder = divmod(n0, sailors)
            wakes.append((n0, portion, remainder))
            if portion <= 0 or remainder != (1 if sailor != sailors else 0):
                nuts += 1
                break
            n0 = n0 - portion - remainder
        else:
            break
    return nuts, wakes
 
if __name__ == "__main__":
    for sailors in [5, 6]:
        nuts, wake_stats = monkey_coconuts(sailors)
        print("\nFor %i sailors the initial nut count is %i" % (sailors, nuts))
        print("On each waking, the nut count, portion taken, and monkeys share are:\n ", 
              ',\n  '.join(repr(ws) for ws in wake_stats))

====PYTHON=====
def wake_and_split(n0, sailors, depth=None):
    if depth is None:
        depth = sailors
    portion, remainder = divmod(n0, sailors)
    if portion <= 0 or remainder != (1 if depth else 0):
        return None
    else:
        return n0 if not depth else wake_and_split(n0 - portion - remainder, sailors, depth - 1)
 
 
def monkey_coconuts(sailors=5):
    "Parameterised the number of sailors using recursion including the last mornings case"    
    nuts = sailors
    while True:
        if wake_and_split(n0=nuts, sailors=sailors) is None:
            nuts += 1
        else:
            break
    return nuts
 
if __name__ == "__main__":
    for sailors in [5, 6]:
        nuts = monkey_coconuts(sailors)
        print("For %i sailors the initial nut count is %i" % (sailors, nuts))
 

====PYTHON=====
# gives one solution of (x,y) for a x + by = c
def dioph(a, b, c):
	aa,bb,x,y = a, b, 0, 1
 
	while True:
		q,a,b = a//b, b, a%b
		x,y = y - q*x, x
		if abs(a) == 1: break
 
	if y*aa % bb != 1: y = -y
	x,y = y*c, (c - aa*y*c)//bb
	#assert(x*aa + y*bb == c)
	return x,y
 
# rems: what monkey got each turn
# min_share: each sailor needs to get at least this many in the final round
def calcnuts(rems, min_share = 0):
	n, r = len(rems) - 1, 0
	c = (n - 1)**n
	for x in rems: r,c = r + x*c, c//(n-1)*n
 
	a, b = (n-1)**n, n**(n+1)
	x, y = dioph(a, -b, r)
	k = (min_share - y + a - 1)//a
	return x + k*b, y + k*a
 
def distribute(nuts, monkey_nuts):
	n = len(monkey_nuts) - 1
	print("\n%d sailors, %d nuts:"%(n, nuts))
	for r in monkey_nuts[:-1]:
		p = (nuts - r)//n
		print("\tNuts %d, hide %d, monkey gets %d" % (nuts, p, r))
		nuts = p*(n - 1)
 
	r = monkey_nuts[-1]
	p = (nuts - r)//n
	print("Finally:\n\tNuts %d, each share %d, monkey gets %d" % (nuts, p, r))
 
for sailors in range(2, 10):
	monkey_loot = [1]*sailors + [0]
	distribute(calcnuts(monkey_loot, 1)[0], monkey_loot)
 
# many sailors, many nuts
#for i in range(1, 5): print(10**i, calcnuts([1]*10**i + [0])[0])

