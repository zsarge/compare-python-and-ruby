====RUBY=====
# This solution cheats and uses only one generator!
 
def powers(m)
  return enum_for(__method__, m) unless block_given?
  0.step{|n| yield n**m}
end
 
def squares_without_cubes
  return enum_for(__method__) unless block_given?
 
  cubes = powers(3)
  c = cubes.next
  powers(2) do |s|
    c = cubes.next while c < s
    yield s unless c == s
  end
end
 
p squares_without_cubes.take(30).drop(20)
# p squares_without_cubes.lazy.drop(20).first(10)   # Ruby 2.0+

====RUBY=====
# This solution uses three generators.
 
def powers(m)
  return enum_for(__method__, m) unless block_given?
  0.step{|n| yield n**m}
end
 
def squares_without_cubes
  return enum_for(__method__) unless block_given?
 
  cubes = powers(3) #no block, so this is the first generator
  c = cubes.next
  squares = powers(2) # second generator
  loop do
    s = squares.next
    c = cubes.next while c < s
    yield s unless c == s
  end
end
 
answer = squares_without_cubes # third generator
20.times { answer.next }
p 10.times.map { answer.next }

====RUBY=====
def filtered(s1, s2)
  return enum_for(__method__, s1, s2) unless block_given?
  v, f = s1.next, s2.next
  loop do
    v > f and f = s2.next and next
    v < f and yield v
    v = s1.next
  end
end
 
squares, cubes = powers(2), powers(3)
f = filtered(squares, cubes)
p f.take(30).last(10)
# p f.lazy.drop(20).first(10)   # Ruby 2.0+

====RUBY=====
func gen_pow(m) {
    var e = 0;
    func { e++ ** m };
}
 
func gen_filter(g1, g2) {
    var v2 = g2.run;
    func {
        loop {
            var v1 = g1.run;
            while (v1 > v2) { v2 = g2.run };
            v1 == v2 || return v1;
        }
    }
}
 
# Create generators.
var squares = gen_pow(2);
var cubes = gen_pow(3);
var squares_without_cubes = gen_filter(squares, cubes);
 
# Drop 20 values.
20.times { squares_without_cubes() };
 
# Print 10 values.
var answer = [];
10.times { answer.append(squares_without_cubes()) };
say answer;

====PYTHON=====
from itertools import islice, count
 
def powers(m):
    for n in count():
        yield n ** m
 
def filtered(s1, s2):
    v, f = next(s1), next(s2)
    while True:
        if v > f:
            f = next(s2)
            continue
        elif v < f:
            yield v
        v = next(s1)
 
squares, cubes = powers(2), powers(3)
f = filtered(squares, cubes)
print(list(islice(f, 20, 30)))

====PYTHON=====
'''Exponentials as generators'''
 
from itertools import count, islice
 
 
# powers :: Gen [Int]
def powers(n):
    '''A non-finite succession of integers,
       starting at zero,
       raised to the nth power.'''
 
    def f(x):
        return pow(x, n)
 
    return map(f, count(0))
 
 
# main :: IO ()
def main():
    '''Taking the difference between two derived generators.'''
    print(
        take(10)(
            drop(20)(
                differenceGen(powers(2))(
                    powers(3)
                )
            )
        )
    )
 
 
# GENERIC -------------------------------------------------
 
 
# differenceGen :: Gen [a] -> Gen [a] -> Gen [a]
def differenceGen(ga):
    '''All values of ga except any
       already seen in gb.'''
    def go(a, b):
        stream = zip(a, b)
        bs = set([])
        while True:
            xy = next(stream, None)
            if None is not xy:
                x, y = xy
                bs.add(y)
                if x not in bs:
                    yield x
            else:
                return
    return lambda gb: go(ga, gb)
 
 
# drop :: Int -> [a] -> [a]
# drop :: Int -> String -> String
def drop(n):
    '''The sublist of xs beginning at
       (zero-based) index n.'''
    def go(xs):
        if isinstance(xs, list):
            return xs[n:]
        else:
            take(n)(xs)
            return xs
    return lambda xs: go(xs)
 
 
# take :: Int -> [a] -> [a]
# take :: Int -> String -> String
def take(n):
    '''The prefix of xs of length n,
       or xs itself if n > length xs.'''
    return lambda xs: (
        xs[0:n]
        if isinstance(xs, list)
        else list(islice(xs, n))
    )
 
 
# MAIN ---
if __name__ == '__main__':
    main()

