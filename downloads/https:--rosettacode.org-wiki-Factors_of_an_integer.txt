====RUBY=====
struct Int
  def factors() (1..self).select { |n| (self % n).zero? } end
end

====RUBY=====
struct Int
  def factors
    f = [] of Int32
    (1..Math.sqrt(self)).each{ |i|
      (f << i; f << self // i if self // i != i) if (self % i).zero?
    }
    f.sort
  end
end

====RUBY=====
 
[45, 53, 64].each {|n| puts "#{n} : #{n.factors}"}

====RUBY=====
class Integer
  def factors() (1..self).select { |n| (self % n).zero? } end
end
p 45.factors

====RUBY=====
class Integer
  def factors
    1.upto(Integer.sqrt(self)).select {|i| (self % i).zero?}.inject([]) do |f, i| 
      f << self/i unless i == self/i
      f << i
    end.sort
  end
end
[45, 53, 64].each {|n| puts "#{n} : #{n.factors}"}

====RUBY=====
 
require 'prime'
 
def factors m
  return [1] if 1==m
  primes, powers = Prime.prime_division(m).transpose
  ranges = powers.map{|n| (0..n).to_a}
  ranges[0].product( *ranges[1..-1] ).
  map{|es| primes.zip(es).map{|p,e| p**e}.reduce :*}.
  sort
end
 
[1, 7, 45, 100].each{|n| p factors n}
 

====RUBY=====
say divisors(97)    #=> [1, 97]
say divisors(2695)  #=> [1, 5, 7, 11, 35, 49, 55, 77, 245, 385, 539, 2695]

====RUBY=====
func divisors(n) {
  gather {
    { |d|
        take(d, n//d) if d.divides(n)
    } << 1..n.isqrt
  }.sort.uniq
}
 
[53, 64, 32766].each {|n|
    say "divisors(#{n}): #{divisors(n)}"
}

====PYTHON=====
>>> def factors(n):
      return [i for i in range(1, n + 1) if not n%i]

====PYTHON=====
>>> def factors(n):
      return [i for i in range(1, n//2 + 1) if not n%i] + [n]
 
>>> factors(45)
[1, 3, 5, 9, 15, 45]

====PYTHON=====
>>> from math import sqrt
>>> def factor(n):
      factors = set()
      for x in range(1, int(sqrt(n)) + 1):
        if n % x == 0:
          factors.add(x)
          factors.add(n//x)
      return sorted(factors)
 
>>> for i in (45, 53, 64): print( "%i: factors: %s" % (i, factor(i)) )
 
45: factors: [1, 3, 5, 9, 15, 45]
53: factors: [1, 53]
64: factors: [1, 2, 4, 8, 16, 32, 64]

====PYTHON=====
from itertools import chain, cycle, accumulate # last of which is Python 3 only
 
def factors(n):
    def prime_powers(n):
        # c goes through 2, 3, 5, then the infinite (6n+1, 6n+5) series
        for c in accumulate(chain([2, 1, 2], cycle([2,4]))):
            if c*c > n: break
            if n%c: continue
            d,p = (), c
            while not n%c:
                n,p,d = n//c, p*c, d + (p,)
            yield(d)
        if n > 1: yield((n,))
 
    r = [1]
    for e in prime_powers(n):
        r += [a*b for a in r for b in e]
    return r

