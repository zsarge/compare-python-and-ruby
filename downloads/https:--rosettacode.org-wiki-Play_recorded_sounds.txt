====RUBY=====
require 'win32/sound'
include Win32
 
sound1 = ENV['WINDIR'] + '\Media\Windows XP Startup.wav' 
sound2 = ENV['WINDIR'] + '\Media\Windows XP Shutdown.wav' 
 
puts "play the sounds sequentially"
[sound1, sound2].each do |s| 
  t1 = Time.now
  Sound.play(s)
  puts "'#{s}' duration: #{(Time.now.to_f - t1.to_f)} seconds"
end
 
puts "attempt to play the sounds simultaneously"
[sound1, sound2].each {|s| Sound.play(s, Sound::ASYNC)}
 
puts <<END
the above only plays the second sound2 because the library only appears 
to be able to play one sound at a time.
END
 
puts "loop a sound for a few seconds"
puts Time.now
Sound.play(sound1, Sound::ASYNC + Sound::LOOP)
sleep 10
Sound.stop
puts Time.now
 
puts "manipulate the volume"
vol_left, vol_right = Sound.wave_volume
Sound.play(sound1, Sound::ASYNC)
sleep 1
puts "right channel quiet"
Sound.set_wave_volume(vol_left, 0)
sleep 1
puts "left channel quiet"
Sound.set_wave_volume(0, vol_right)
sleep 1
puts "restore volume"
Sound.set_wave_volume(vol_left, vol_right)
 
sleep 1
puts "the asynchronous sound is cancelled when the program exits"

====PYTHON=====
import time
from pygame import mixer
 
mixer.init(frequency=16000) #set frequency for wav file
s1 = mixer.Sound('test.wav')
s2 = mixer.Sound('test2.wav')
 
#individual
s1.play(-1)         #loops indefinitely
time.sleep(0.5)
 
#simultaneously
s2.play()          #play once 
time.sleep(2)
s2.play(2)         #optional parameter loops three times 
time.sleep(10)
 
#set volume down
s1.set_volume(0.1)
time.sleep(5)
 
#set volume up
s1.set_volume(1)
time.sleep(5)
 
s1.stop()
s2.stop()
mixer.quit()

====PYTHON=====
import time
from pygame import mixer
from pygame.mixer import music
 
mixer.init()
music.load('test.mp3')
 
music.play()
time.sleep(10)
 
music.stop()
mixer.quit()

