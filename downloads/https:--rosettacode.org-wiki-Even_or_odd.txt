====RUBY=====
print "evens: "
p -5.upto(5).select(&:even?)
print "odds: "
p -5.upto(5).select(&:odd?)

====RUBY=====
n & 1 == 0
quotient, remainder = n.divmod(2); remainder == 0
 
# The next way only works when n.to_f/2 is exact.
# If Float is IEEE double, then -2**53 .. 2**53 must include n.
n.to_f/2 == n/2
 
# You can use the bracket operator to access the i'th bit
# of a Fixnum or Bignum (i = 0 means least significant bit)
n[0].zero?

====RUBY=====
var n = 42;
say n.is_odd;       # false
say n.is_even;      # true

====RUBY=====
func is_odd(n)  { n&1 == 1 };
func is_even(n) { n&1 == 0 };

====RUBY=====
func is_odd(n)  { n%2 == 1 };
func is_even(n) { n%2 == 0 };

====PYTHON=====
>>> def is_odd(i): return bool(i & 1)
 
>>> def is_even(i): return not is_odd(i)
 
>>> [(j, is_odd(j)) for j in range(10)]
[(0, False), (1, True), (2, False), (3, True), (4, False), (5, True), (6, False), (7, True), (8, False), (9, True)]
>>> [(j, is_even(j)) for j in range(10)]
[(0, True), (1, False), (2, True), (3, False), (4, True), (5, False), (6, True), (7, False), (8, True), (9, False)]
>>> 

====PYTHON=====
>> def is_even(i):
        return (i % 2) == 0
 
>>> is_even(1)
False
>>> is_even(2)
True
>>>

