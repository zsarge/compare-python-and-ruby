====RUBY=====
def divisor_sum(n)
    total = 1
    power = 2
    # Deal with powers of 2 first
    while (n & 1) == 0
        total = total + power
 
        power = power << 1
        n = n >> 1
    end
    # Odd prime factors up to the square root
    p = 3
    while p * p <= n
        sum = 1
 
        power = p
        while n % p == 0
            sum = sum + power
 
            power = power * p
            n = (n / p).floor
        end
        total = total * sum
 
        p = p + 2
    end
    # If n > 1 then it's prime
    if n > 1 then
        total = total * (n + 1)
    end
    return total
end
 
LIMIT = 100
print "Sum of divisors for the first ", LIMIT, " positive integers:\n"
for n in 1 .. LIMIT
    print "%4d" % [divisor_sum(n)]
    if n % 10 == 0 then
        print "\n"
    end
end

====RUBY=====
1..100 -> map { .sigma }.say

====PYTHON=====
def factorize(n):
    assert(isinstance(n, int))
    if n < 0: 
        n = -n 
    if n < 2: 
        return 
    k = 0 
    while 0 == n%2: 
        k += 1 
        n //= 2 
    if 0 < k: 
        yield (2,k) 
    p = 3 
    while p*p <= n: 
        k = 0 
        while 0 == n%p: 
            k += 1 
            n //= p 
        if 0 < k: 
            yield (p,k)
        p += 2 
    if 1 < n: 
        yield (n,1) 
 
def sum_of_divisors(n): 
    assert(n != 0) 
    ans = 1 
    for (p,k) in factorize(n): 
        ans *= (pow(p,k+1) - 1)//(p-1) 
    return ans 
 
if __name__ == "__main__":
    print([sum_of_divisors(n) for n in range(1,101)])

====PYTHON=====
def sum_of_divisors(n):
    assert(isinstance(n, int) and 0 < n)
    ans, i, j = 0, 1, 1
    while i*i <= n:
        if 0 == n%i:
            ans += i
            j = n//i
            if j != i:
                ans += j
        i += 1
    return ans
 
if __name__ == "__main__":
    print([sum_of_divisors(n) for n in range(1,101)])

====PYTHON=====
'''Sums and products of divisors'''
 
from math import floor, sqrt
from functools import reduce
from operator import add, mul
 
 
# divisors :: Int -> [Int]
def divisors(n):
    '''List of all divisors of n including n itself.
    '''
    root = floor(sqrt(n))
    lows = [x for x in range(1, 1 + root) if 0 == n % x]
    return lows + [n // x for x in reversed(lows)][
        (1 if n == (root * root) else 0):
    ]
 
 
# ------------------------- TEST -------------------------
# main :: IO ()
def main():
    '''Sums and products of divisors for each integer in range [1..50]
    '''
    print('Products of divisors:')
    for n in range(1, 1 + 50):
        print(n, '->', reduce(mul, divisors(n), 1))
 
    print('Sums of divisors:')
    for n in range(1, 1 + 100):
        print(n, '->', reduce(add, divisors(n), 0))
 
 
# MAIN ---
if __name__ == '__main__':
    main()

