====RUBY=====
require 'prime'
 
def μ(n)
  return 1 if self == 1
  pd = n.prime_division
  return 0 unless pd.map(&:last).all?(1)
  pd.size.even? ? 1 : -1
end
 
def M(n)
  (1..n).sum{|n| μ(n)}
end
 
(["  "] + (1..199).map{|n|"%2s" % M(n)}).each_slice(20){|line| puts line.join(" ") }
 
ar = (1..1000).map{|n| M(n)}
puts "\nThe Mertens function is zero #{ar.count(0)} times in the range (1..1000);"
puts "it crosses zero #{ar.each_cons(2).count{|m1, m2| m1 != 0 && m2 == 0}} times."
 

====RUBY=====
say mertens(123456789)   #=> 1170
say mertens(1234567890)  #=> 9163

====RUBY=====
func mertens(n) is cached {
 
    var lookup_size    = (2 * n.iroot(3)**2)
    var mertens_lookup = [0]
 
    for k in (1..lookup_size) {
        mertens_lookup[k] = (mertens_lookup[k-1] + k.moebius)
    }
 
    static cache = Hash()
 
    func (n) {
 
        if (n <= lookup_size) {
            return mertens_lookup[n]
        }
 
        if (cache.has(n)) {
            return cache{n}
        }
 
        var M = 1
        var s = n.isqrt
 
        for k in (2 .. floor(n/(s+1))) {
            M -= __FUNC__(floor(n/k))
        }
 
        for k in (1..s) {
            M -= (mertens_lookup[k] * (floor(n/k) - floor(n/(k+1))))
        }
 
        cache{n} = M
    }(n)
}

====RUBY=====
with (200) {|n|
    say "Mertens function in the range 1..#{n}:"
    (1..n).map { mertens(_) }.slices(20).each {|line|
        say line.map{ "%2s" % _ }.join(' ')
    }
}
 
with (1000) {|n|
    say "\nIn the range 1..#{n}, there are:"
    say (1..n->count_by { mertens(_)==0 }, " zeros")
    say (1..n->count_by { mertens(_)==0 && mertens(_-1)!=0 }, " zero crossings")
}

====PYTHON=====
def mertens(count):
    """Generate Mertens numbers"""
    m = [None, 1]
    for n in range(2, count+1):
        m.append(1)
        for k in range(2, n+1):
            m[n] -= m[n//k]
    return m
 
 
ms = mertens(1000)
 
print("The first 99 Mertens numbers are:")
print("  ", end=' ')
col = 1
for n in ms[1:100]:
    print("{:2d}".format(n), end=' ')
    col += 1
    if col == 10:
        print()
        col = 0
 
zeroes = sum(x==0 for x in ms)
crosses = sum(a!=0 and b==0 for a,b in zip(ms, ms[1:]))
print("M(N) equals zero {} times.".format(zeroes))
print("M(N) crosses zero {} times.".format(crosses))

