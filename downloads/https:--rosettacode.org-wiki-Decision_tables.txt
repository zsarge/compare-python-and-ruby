====RUBY=====
class DecisionTable
  def initialize(conditions, actions)
    @conditions = conditions
    @actions = []
    @rules = []
    actions.each {|action, ruleset| @actions << action; @rules << ruleset} 
  end
 
  def run
    puts "Conditions:"
    index = ask_conditions
    puts "Actions:"
    results = @rules.each_with_index.inject([]) do |sum, (ruleset, idx)| 
      sum << @actions[idx] if ruleset[index] == 1
      sum
    end
    results << "PC LOAD LETTER" if results.empty?
    results.each {|res| puts "  #{res}"}
    puts ""
  end
 
  private
  def ask_conditions
    answers = @conditions.inject("") {|sum, c| sum + get_response(c)}
    answers.to_i(2)
  end
 
  def get_response(prompt)
    loop do
      print "  #{prompt}? "
      case STDIN.gets.strip.downcase
      when /^y/ then return "0"
      when /^n/ then return "1"
      end
    end
  end
end
 
dt = DecisionTable.new(
      [
        "Printer does not print",              #  Y Y Y Y N N N N
        "A red light is flashing",             #  Y Y N N Y Y N N
        "Printer is unrecognised",             #  Y N Y N Y N Y N
      ], 
      [
        ["Check the power cable",                [0,0,1,0,0,0,0,0]],
        ["Check the printer-computer cable",     [1,0,1,0,0,0,0,0]],
        ["Ensure printer software is installed", [1,0,1,0,1,0,1,0]],
        ["Check/replace ink",                    [1,1,0,0,1,1,0,0]],
        ["Check for paper jam",                  [0,1,0,1,0,0,0,0]],
      ]
     )
loop {dt.run}

====RUBY=====
func decide (q, s) {
 
    var bits = q.map { |p|
        read("#{p.value}? ", String) ~~ /^y/i ? 1 : 0
    }
 
    var n = with (0) { |t|
        bits.each { |b|
            t <<= 1
            t |= b
        }
        1 << t
    }
 
    s.grep { .key & n }.map{ .value }.each { |ans|
        say "   #{ans}"
    }
}
 
loop {
    decide(
      [
        Pair("Y Y Y Y N N N N", "Printer does not print"),
        Pair("Y Y N N Y Y N N", "A red light is flashing"),
        Pair("Y N Y N Y N Y N", "Printer is unrecognised"),
      ],
      [
        Pair(0b0_0_1_0_0_0_0_0, "Check the power cable"),
        Pair(0b1_0_1_0_0_0_0_0, "Check the printer-computer cable"),
        Pair(0b1_0_1_0_1_0_1_0, "Ensure printer software is installed"),
        Pair(0b1_1_0_0_1_1_0_0, "Check/replace ink"),
        Pair(0b0_1_0_1_0_0_0_0, "Check for paper jam"),
      ]
    )
    say ''
}

====PYTHON=====
 
'''
Create a Decision table then use it
'''
 
def dt_creator():
    print("\n\nCREATING THE DECISION TABLE\n")
    conditions = input("Input conditions, in order, separated by commas: ")
    conditions = [c.strip() for c in conditions.split(',')]
    print( ("\nThat was %s conditions:\n  " % len(conditions))
           + '\n  '.join("%i: %s" % x for x in enumerate(conditions, 1)) )
    print("\nInput an action, a semicolon, then a list of tuples of rules that trigger it. End with a blank line")
    action2rules, action = [], ' '
    while action:
        action = input("%i: " % (len(action2rules) + 1)).strip()
        if action:
            name, _, rules = [x.strip() for x in action.partition(';')]
            rules = eval(rules)
            assert all(len(rule) == len(conditions) for rule in rules), \
                   "The number of conditions in a rule to trigger this action is wrong" 
            action2rules.append((name, rules))
    actions = [x[0] for x in action2rules]
    # Map condition to actions
    rule2actions = dict((y,[]) for y in set(sum((x[1] for x in action2rules), [])))
    for action, rules in action2rules:
        for r in rules:
            rule2actions[r].append( action )
    return conditions, rule2actions
 
def dt_user(dt, default=['Pray!']):
    conditions, rule2actions = dt
    print("\n\nUSING THE DECISION TABLE\n")
    rule = tuple(int('y' == input("%s? (Answer y if statement is true or n): " % c)) for c in conditions)
    print("Try this:\n  " + '\n  '.join(rule2actions.get(rule, default)))
 
if __name__ == '__main__':
    dt = dt_creator()
    dt_user(dt)
    dt_user(dt)
    dt_user(dt)

