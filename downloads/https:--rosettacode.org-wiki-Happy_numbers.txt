====RUBY=====
def happy?(n)
  past = [] of Int32 | Int64
  until n == 1
    sum = 0; while n > 0; sum += (n % 10) ** 2; n //= 10 end
    return false if past.includes? (n = sum)
    past << n
  end
  true
end
 
i = count = 0
until count == 8; (puts i; count += 1) if happy?(i += 1) end
puts
(99999999999900..99999999999999).each { |i| puts i if happy?(i) }

====RUBY=====
require 'set' # Set: Fast array lookup / Simple existence hash
 
@seen_numbers = Set.new
@happy_numbers = Set.new
 
def happy?(n)
  return true if n == 1 # Base case
  return @happy_numbers.include?(n) if @seen_numbers.include?(n) # Use performance cache, and stop unhappy cycles
 
  @seen_numbers << n
  digit_squared_sum = n.to_s.each_char.inject(0) { |sum, c| sum + c.to_i**2 } # In Rails: n.to_s.each_char.sum { c.to_i**2 }
 
  if happy?(digit_squared_sum)
    @happy_numbers << n
    true # Return true
  else
    false # Return false
  end
end

====RUBY=====
def print_happy
  happy_numbers = []
 
  1.step do |i|
    break if happy_numbers.length >= 8
    happy_numbers << i if happy?(i)
  end
 
  p happy_numbers
end
 
print_happy

====RUBY=====
[1, 7, 10, 13, 19, 23, 28, 31]

====RUBY=====
@memo = [0,1]
def happy(n)
  sum = n.to_s.chars.map{|c| c.to_i**2}.inject(:+)
  return @memo[sum] if @memo[sum]==0 or @memo[sum]==1
  @memo[sum] = 0                        # for the cycle check
  @memo[sum] = happy(sum)               # return 1:Happy number, 0:other
end
 
i = count = 0
while count < 8
  i += 1
  puts i or count+=1 if happy(i)==1
end
 
puts
for i in 99999999999900..99999999999999
  puts i if happy(i)==1
end

====RUBY=====
def happy?(n)
  past = []			
  until n == 1
    n = n.digits.sum { |d| d * d }
    return false if past.include? n
    past << n
  end
  true
end
 
i = count = 0
until count == 8; puts i or count += 1 if happy?(i += 1) end
puts
(99999999999900..99999999999999).each { |i| puts i if happy?(i) }

====RUBY=====
func happy(n) is cached {
    static seen = Hash()
 
    return true  if n.is_one
    return false if seen.exists(n)
 
    seen{n} = 1
    happy(n.digits.sum { _*_ })
}
 
say happy.first(8)

====PYTHON=====
>>> def happy(n):
    past = set()			
    while n != 1:
        n = sum(int(i)**2 for i in str(n))
        if n in past:
            return False
        past.add(n)
    return True
 
>>> [x for x in xrange(500) if happy(x)][:8]
[1, 7, 10, 13, 19, 23, 28, 31]

====PYTHON=====
'''Happy numbers'''
 
from itertools import islice
 
 
# main :: IO ()
def main():
    '''Test'''
    print(
        take(8)(
            happyNumbers()
        )
    )
 
 
# happyNumbers :: Gen [Int]
def happyNumbers():
    '''Generator :: non-finite stream of happy numbers.'''
    x = 1
    while True:
        x = until(isHappy)(succ)(x)
        yield x
        x = succ(x)
 
 
# isHappy :: Int -> Bool
def isHappy(n):
    '''Happy number sequence starting at n reaches 1 ?'''
    seen = set()
 
    # p :: Int -> Bool
    def p(x):
        if 1 == x or x in seen:
            return True
        else:
            seen.add(x)
            return False
 
    # f :: Int -> Int
    def f(x):
        return sum(int(d)**2 for d in str(x))
 
    return 1 == until(p)(f)(n)
 
 
# GENERIC -------------------------------------------------
 
# succ :: Int -> Int
def succ(x):
    '''The successor of an integer.'''
    return 1 + x
 
 
# take :: Int -> [a] -> [a]
# take :: Int -> String -> String
def take(n):
    '''The prefix of xs of length n,
       or xs itself if n > length xs.'''
    return lambda xs: (
        xs[0:n]
        if isinstance(xs, list)
        else list(islice(xs, n))
    )
 
 
# until :: (a -> Bool) -> (a -> a) -> a -> a
def until(p):
    '''The result of repeatedly applying f until p holds.
       The initial seed value is x.'''
    def go(f, x):
        v = x
        while not p(v):
            v = f(v)
        return v
    return lambda f: lambda x: go(f, x)
 
 
if __name__ == '__main__':
    main()

