====RUBY=====
require "channel"
require "fiber"
require "random"
 
done = Channel(Nil).new
 
"Enjoy Rosetta Code".split.map do |x|
  spawn do
    sleep Random.new.rand(0..500).milliseconds
    puts x
    done.send nil
  end
end
 
3.times do
  done.receive
end

====RUBY=====
%w{Enjoy Rosetta Code}.map do |x|
    Thread.new do
        sleep rand
        puts x
    end
end.each do |t| 
  t.join
end

====RUBY=====
var a = <Enjoy Rosetta Code>
 
a.map{|str|
    {   Sys.sleep(1.rand)
        say str
    }.fork
}.map{|thr| thr.wait }

====PYTHON=====
let words = ["Enjoy", "Rosetta", "Code"]
 
for word in words:
    (word) |> async (w) =>
        sleep(random())
        print(w)

====PYTHON=====
import asyncio
 
 
async def print_(string: str) -> None:
    print(string)
 
 
async def main():
    strings = ['Enjoy', 'Rosetta', 'Code']
    coroutines = map(print_, strings)
    await asyncio.gather(*coroutines)
 
 
if __name__ == '__main__':
    asyncio.run(main())

====PYTHON=====
Python 3.2 (r32:88445, Feb 20 2011, 21:30:00) [MSC v.1500 64 bit (AMD64)] on win 32
Type "help", "copyright", "credits" or "license" for more information.
>>> from concurrent import futures
>>> with futures.ProcessPoolExecutor() as executor:
...   _ = list(executor.map(print, 'Enjoy Rosetta Code'.split()))
...
Enjoy
Rosetta
Code
>>>

====PYTHON=====
import threading
import random
 
def echo(text):
    print(text)
 
threading.Timer(random.random(), echo, ("Enjoy",)).start()
threading.Timer(random.random(), echo, ("Rosetta",)).start()
threading.Timer(random.random(), echo, ("Code",)).start()

====PYTHON=====
import threading
import random
 
def echo(text):
    print(text)
 
for text in ["Enjoy", "Rosetta", "Code"]:
    threading.Timer(random.random(), echo, (text,)).start()

====PYTHON=====
import random, sys, time
import threading
 
lock = threading.Lock()
 
def echo(s):
    time.sleep(1e-2*random.random())
    # use `.write()` with lock due to `print` prints empty lines occasionally
    with lock:
        sys.stdout.write(s)
        sys.stdout.write('\n')
 
for line in 'Enjoy Rosetta Code'.split():
    threading.Thread(target=echo, args=(line,)).start()

====PYTHON=====
from __future__ import print_function
from multiprocessing import Pool
 
def main():
    p = Pool()
    p.map(print, 'Enjoy Rosetta Code'.split())
 
if __name__=="__main__":
    main()

====PYTHON=====
import random
from twisted.internet    import reactor, task, defer
from twisted.python.util import println
 
delay = lambda: 1e-4*random.random()
d = defer.DeferredList([task.deferLater(reactor, delay(), println, line)
                        for line in 'Enjoy Rosetta Code'.split()])
d.addBoth(lambda _: reactor.stop())
reactor.run()

====PYTHON=====
from __future__ import print_function
import random
import gevent
 
delay = lambda: 1e-4*random.random()
gevent.joinall([gevent.spawn_later(delay(), print, line)
               for line in 'Enjoy Rosetta Code'.split()])

