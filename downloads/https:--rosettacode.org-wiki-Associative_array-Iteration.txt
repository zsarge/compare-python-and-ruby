====RUBY=====
 
dict = { 'def' => 1, 'abc' => 2 }
 
for( keyvalue in dict ) io.writeln( keyvalue );
for( key in dict.keys(); value in dict.values() ) io.writeln( key, value )
dict.iterate { [key, value]
    io.writeln( key, value )
}
 

====RUBY=====
my_dict = { "hello" => 13,
	   "world" => 31,
	   "!"     => 71 }
 
# iterating over key-value pairs:
my_dict.each {|key, value| puts "key = #{key}, value = #{value}"}
# or
my_dict.each_pair {|key, value| puts "key = #{key}, value = #{value}"}
 
# iterating over keys:
my_dict.each_key {|key| puts "key = #{key}"}
 
# iterating over values:
my_dict.each_value {|value| puts "value =#{value}"}

====RUBY=====
for key, value in my_dict
  puts "key = #{key}, value = #{value}"
end
 
for key in my_dict.keys
  puts "key = #{key}"
end
 
for value in my_dict.values
  puts "value = #{value}"
end

====RUBY=====
var hash = Hash.new(
    key1 => 'value1',
    key2 => 'value2',
)
 
# Iterate over key-value pairs
hash.each { |key, value|
    say "#{key}: #{value}";
}
 
# Iterate only over keys
hash.keys.each { |key|
    say key;
}
 
# Iterate only over values
hash.values.each { |value|
    say value;
}

====PYTHON=====
myDict = { "hello": 13,
	   "world": 31,
	   "!"    : 71 }
 
# iterating over key-value pairs:
for key, value in myDict.items():
    print ("key = %s, value = %s" % (key, value))
 
# iterating over keys:
for key in myDict:
    print ("key = %s" % key)
# (is a shortcut for:)
for key in myDict.keys():
    print ("key = %s" % key)
 
# iterating over values:
for value in myDict.values():
    print ("value = %s" % value)

