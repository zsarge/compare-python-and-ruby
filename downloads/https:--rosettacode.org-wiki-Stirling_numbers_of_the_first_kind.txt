====RUBY=====
$cache = {}
def sterling1(n, k)
    if n == 0 and k == 0 then
        return 1
    end
    if n > 0 and k == 0 then
        return 0
    end
    if k > n then
        return 0
    end
    key = [n, k]
    if $cache[key] then
        return $cache[key]
    end
    value = sterling1(n - 1, k - 1) + (n - 1) * sterling1(n - 1, k)
    $cache[key] = value
    return value
end
 
MAX = 12
def main
    print "Unsigned Stirling numbers of the first kind:\n"
    print "n/k"
    for n in 0 .. MAX
        print "%10d" % [n]
    end
    print "\n"
 
    for n in 0 .. MAX
        print "%-3d" % [n]
        for k in 0 .. n
            print "%10d" % [sterling1(n, k)]
        end
        print "\n"
    end
 
    print "The maximum value of S1(100, k) =\n"
    previous = 0
    for k in 1 .. 100
        current = sterling1(100, k)
        if previous < current then
            previous = current
        else
            print previous, "\n"
            print "(%d digits, k = %d)\n" % [previous.to_s.length, k - 1]
            break
        end
    end
end
 
main()

====RUBY=====
func S1(n, k) {     # unsigned Stirling numbers of the first kind
    stirling(n, k).abs
}
 
const r = (0..12)
 
var triangle = r.map {|n| 0..n -> map {|k| S1(n, k) } }
var widths   = r.map {|n| r.map {|k| (triangle[k][n] \\ 0).len }.max }
 
say ('n\k ', r.map {|n| "%*s" % (widths[n], n) }.join(' '))
 
r.each {|n|
    var str = ('%-3s ' % n)
    str += triangle[n].map_kv {|k,v| "%*s" % (widths[k], v) }.join(' ')
    say str
}
 
with (100) {|n|
    say "\nMaximum value from the S1(#{n}, *) row:"
    say { S1(n, _) }.map(^n).max
}

====RUBY=====
func S1((0), (0)) { 1 }
func S1(_, (0))   { 0 }
func S1((0), _)   { 0 }
func S1(n, k) is cached { S1(n-1, k-1) + (n-1)*S1(n-1, k) }

====PYTHON=====
 
computed = {}
 
def sterling1(n, k):
	key = str(n) + "," + str(k)
 
	if key in computed.keys():
		return computed[key]
	if n == k == 0:
		return 1
	if n > 0 and k == 0:
		return 0
	if k > n:
		return 0
	result = sterling1(n - 1, k - 1) + (n - 1) * sterling1(n - 1, k)
	computed[key] = result
	return result
 
print("Unsigned Stirling numbers of the first kind:")
MAX = 12
print("n/k".ljust(10), end="")
for n in range(MAX + 1):
	print(str(n).rjust(10), end="")
print()
for n in range(MAX + 1):
	print(str(n).ljust(10), end="")
	for k in range(n + 1):
		print(str(sterling1(n, k)).rjust(10), end="")
	print()
print("The maximum value of S1(100, k) = ")
previous = 0
for k in range(1, 100 + 1):
	current = sterling1(100, k)
	if current > previous:
		previous = current
	else:
		print("{0}\n({1} digits, k = {2})\n".format(previous, len(str(previous)), k - 1))
		break
 

