====RUBY=====
class Rset
  Set = Struct.new(:lo, :hi, :inc_lo, :inc_hi) do
    def include?(x)
      (inc_lo ? lo<=x : lo<x) and (inc_hi ? x<=hi : x<hi)
    end
    def length
      hi - lo
    end
    def to_s
      "#{inc_lo ? '[' : '('}#{lo},#{hi}#{inc_hi ? ']' : ')'}"
    end
  end
 
  def initialize(lo=nil, hi=nil, inc_lo=false, inc_hi=false)
    if lo.nil? and hi.nil?
      @sets = []            # empty set
    else
      raise TypeError      unless lo.is_a?(Numeric) and hi.is_a?(Numeric)
      raise ArgumentError  unless valid?(lo, hi, inc_lo, inc_hi)
      @sets = [Set[lo, hi, !!inc_lo, !!inc_hi]]         # !! -> Boolean values
    end
  end
 
  def self.[](lo, hi, inc_hi=true)
    self.new(lo, hi, true, inc_hi)
  end
 
  def self.parse(str)
    raise ArgumentError  unless str =~ /(\[|\()(.+),(.+)(\]|\))/
    b0, lo, hi, b1 = $~.captures        # $~ : Regexp.last_match
    lo = Rational(lo)
    lo = lo.numerator  if lo.denominator == 1
    hi = Rational(hi)
    hi = hi.numerator  if hi.denominator == 1
    self.new(lo, hi, b0=='[', b1==']')
  end
 
  def initialize_copy(obj)
    super
    @sets = @sets.map(&:dup)
  end
 
  def include?(x)
    @sets.any?{|set| set.include?(x)}
  end
 
  def empty?
    @sets.empty?
  end
 
  def union(other)
    sets = (@sets+other.sets).map(&:dup).sort_by{|set| [set.lo, set.hi]}
    work = []
    pre = sets.shift
    sets.each do |post|
      if valid?(pre.hi, post.lo, !pre.inc_hi, !post.inc_lo)
        work << pre
        pre = post
      else
        pre.inc_lo |= post.inc_lo  if pre.lo == post.lo
        if pre.hi < post.hi
          pre.hi = post.hi
          pre.inc_hi = post.inc_hi
        elsif pre.hi == post.hi
          pre.inc_hi |= post.inc_hi
        end
      end
    end
    work << pre  if pre
    new_Rset(work)
  end
  alias | union
 
  def intersection(other)
    sets = @sets.map(&:dup)
    work = []
    other.sets.each do |oset|
      sets.each do |set|
        if set.hi < oset.lo or oset.hi < set.lo
          # ignore
        elsif oset.lo < set.lo and set.hi < oset.hi
          work << set
        else
          lo = [set.lo, oset.lo].max
          if set.lo == oset.lo
            inc_lo = set.inc_lo && oset.inc_lo
          else
            inc_lo = (set.lo < oset.lo) ? oset.inc_lo : set.inc_lo
          end
          hi = [set.hi, oset.hi].min
          if set.hi == oset.hi
            inc_hi = set.inc_hi && oset.inc_hi
          else
            inc_hi = (set.hi < oset.hi) ? set.inc_hi : oset.inc_hi
          end
          work << Set[lo, hi, inc_lo, inc_hi]  if valid?(lo, hi, inc_lo, inc_hi)
        end
      end
    end
    new_Rset(work)
  end
  alias & intersection
 
  def difference(other)
    sets = @sets.map(&:dup)
    other.sets.each do |oset|
      work = []
      sets.each do |set|
        if set.hi < oset.lo or oset.hi < set.lo
          work << set
        elsif oset.lo < set.lo and set.hi < oset.hi
          # delete
        else
          if set.lo < oset.lo
            inc_hi = (set.hi==oset.lo and !set.inc_hi) ? false : !oset.inc_lo
            work << Set[set.lo, oset.lo, set.inc_lo, inc_hi]
          elsif valid?(set.lo, oset.lo, set.inc_lo, !oset.inc_lo)
            work << Set[set.lo, set.lo, true, true]
          end
          if oset.hi < set.hi
            inc_lo = (oset.hi==set.lo and !set.inc_lo) ? false : !oset.inc_hi
            work << Set[oset.hi, set.hi, inc_lo, set.inc_hi]
          elsif valid?(oset.hi, set.hi, !oset.inc_hi, set.inc_hi)
            work << Set[set.hi, set.hi, true, true]
          end
        end
      end
      sets = work
    end
    new_Rset(sets)
  end
  alias - difference
 
  # symmetric difference
  def ^(other)
    (self - other) | (other - self)
  end
 
  def ==(other)
    self.class == other.class and @sets == other.sets
  end
 
  def length
    @sets.inject(0){|len, set| len + set.length}
  end
 
  def to_s
    "#{self.class}#{@sets.join}"
  end
  alias inspect to_s
 
  protected
 
  attr_accessor :sets
 
  private
 
  def new_Rset(sets)
    rset = self.class.new          # empty set
    rset.sets = sets
    rset
  end
 
  def valid?(lo, hi, inc_lo, inc_hi)
    lo < hi or (lo==hi and inc_lo and inc_hi)
  end
end
 
def Rset(lo, hi, inc_hi=false)
  Rset.new(lo, hi, false, inc_hi)
end

====RUBY=====
p a = Rset[1,2,false]
[1,2,3].each{|x|puts "#{x} => #{a.include?(x)}"}
puts
a = Rset[0,2,false]             #=> Rset[0,2)
b = Rset(1,3)                   #=> Rset(1,3)
c = Rset[0,1,false]             #=> Rset[0,1)
d = Rset(2,3,true)              #=> Rset(2,3]
puts "#{a} | #{b} -> #{a | b}"
puts "#{c} | #{d} -> #{c | d}"
puts
puts "#{a} & #{b} -> #{a & b}"
puts "#{c} & #{d} -> #{c & d}"
puts "(#{c} & #{d}).empty? -> #{(c&d).empty?}"
puts
puts "#{a} - #{b} -> #{a - b}"
puts "#{a} - #{a} -> #{a - a}"
e = Rset(0,3,true)
f = Rset[1,2]
puts "#{e} - #{f} -> #{e - f}"
 
puts "\nTest :"
test_set = [["(0, 1]", "|", "[0, 2)"],
            ["[0, 2)", "&", "(1, 2]"],
            ["[0, 3)", "-", "(0, 1)"],
            ["[0, 3)", "-", "[0, 1]"] ] 
test_set.each do |sa,ope,sb|
  str = "#{sa} #{ope} #{sb}"
  e = eval("Rset.parse(sa) #{ope} Rset.parse(sb)")
  puts "%s -> %s" % [str, e]
  (0..2).each{|i| puts "  #{i} : #{e.include?(i)}"}
end
 
puts
test_set = ["x = Rset[0,2] | Rset(3,7) | Rset[8,10]",
            "y = Rset(7,9) | Rset(5,6) | Rset[1,4]",
            "x | y", "x & y", "x - y", "y - x", "x ^ y",
            "y ^ x == (x | y) - (x & y)"]
x = y = nil
test_set.each {|str| puts "#{str} -> #{eval(str)}"}
 
puts
inf = 1.0 / 0.0             # infinity
puts "a = #{a = Rset(-inf,inf)}"
puts "b = #{b = Rset.parse('[1/3,11/7)')}"
puts "a - b -> #{a - b}"

====RUBY=====
str, e = "e = Rset.new", nil
puts "#{str} -> #{eval(str)}\t\t# create empty set"
str = "e.empty?"
puts "#{str} -> #{eval(str)}"
puts
 
include Math
lohi = Enumerator.new do |y|
  t = 1 / sqrt(6)
  0.step do |n|
    y << [sqrt(12*n+1) * t, sqrt(12*n+5) * t]
    y << [sqrt(12*n+7) * t, sqrt(12*n+11) * t]
  end
end
 
a = Rset.new
loop do
  lo, hi = lohi.next
  break  if 10 <= lo
  a |= Rset(lo, hi)
end
a &= Rset(0,10)
 
b = (0...10).inject(Rset.new){|res,i| res |= Rset(i+1/6r,i+5/6r)}
 
puts "a        : #{a}"
puts "a.length : #{a.length}"
puts "b        : #{b}"
puts "b.length : #{b.length}"
puts "a - b    : #{a - b}"
puts "(a-b).length : #{(a-b).length}"

====PYTHON=====
class Setr():
    def __init__(self, lo, hi, includelo=True, includehi=False):
        self.eqn = "(%i<%sX<%s%i)" % (lo,
                                      '=' if includelo else '',
                                      '=' if includehi else '',
                                      hi)
 
    def __contains__(self, X):
        return eval(self.eqn, locals())
 
    # union
    def __or__(self, b):
        ans = Setr(0,0)
        ans.eqn = "(%sor%s)" % (self.eqn, b.eqn)
        return ans
 
    # intersection
    def __and__(self, b):
        ans = Setr(0,0)
        ans.eqn = "(%sand%s)" % (self.eqn, b.eqn)
        return ans
 
    # difference
    def __sub__(self, b):
        ans = Setr(0,0)
        ans.eqn = "(%sand not%s)" % (self.eqn, b.eqn)
        return ans
 
    def __repr__(self):
        return "Setr%s" % self.eqn
 
 
sets = [
    Setr(0,1, 0,1) | Setr(0,2, 1,0),
    Setr(0,2, 1,0) & Setr(1,2, 0,1),
    Setr(0,3, 1,0) - Setr(0,1, 0,0),
    Setr(0,3, 1,0) - Setr(0,1, 1,1),
]
settexts = '(0, 1] ∪ [0, 2);[0, 2) ∩ (1, 2];[0, 3) − (0, 1);[0, 3) − [0, 1]'.split(';')
 
for s,t in zip(sets, settexts):
    print("Set %s %s. %s" % (t,
                             ', '.join("%scludes %i"
                                     % ('in' if v in s else 'ex', v)
                                     for v in range(3)),
                             s.eqn))

