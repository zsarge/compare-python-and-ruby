====RUBY=====
def generate_statistics(n)
  sum = sum2 = 0.0
  hist = Array.new(10, 0)
  n.times do
    r = rand
    sum += r
    sum2 += r**2
    hist[(10*r).to_i] += 1
  end
  mean = sum / n
  stddev = Math::sqrt((sum2 / n) - mean**2)
 
  puts "size: #{n}"
  puts "mean:   #{mean}"
  puts "stddev: #{stddev}"
  hist.each_with_index {|x,i| puts "%.1f:%s" % [0.1*i, "=" * (70*x/hist.max)]}
  puts
end
 
[100, 1000, 10000].each {|n| generate_statistics n}

====RUBY=====
func generate_statistics(n) {
    var(sum=0, sum2=0);
    var hist = 10.of(0);
 
    n.times {
        var r = 1.rand;
        sum += r;
        sum2 += r**2;
        hist[10*r] += 1;
    }
 
    var mean = sum/n;
    var stddev = Math.sqrt(sum2/n - mean**2);
 
    say "size: #{n}";
    say "mean:   #{mean}";
    say "stddev: #{stddev}";
 
    var max = hist.max;
    hist.range.each {|i|
        printf("%.1f:%s\n", 0.1*i, "=" * 70*hist[i]/max);
    }
    print "\n";
}
 
[100, 1000, 10000].each {|n| generate_statistics(n) }

====PYTHON=====
def sd1(numbers):
    if numbers:
        mean = sum(numbers) / len(numbers)
        sd = (sum((n - mean)**2 for n in numbers) / len(numbers))**0.5
        return sd, mean
    else:
        return 0, 0
 
def sd2(numbers):
    if numbers:
        sx = sxx = n = 0
        for x in numbers:
            sx += x
            sxx += x*x
            n += 1
        sd = (n * sxx - sx*sx)**0.5 / n
        return sd, sx / n
    else:
        return 0, 0
 
def histogram(numbers):
    h = [0] * 10
    maxwidth = 50 # characters
    for n in numbers:
        h[int(n*10)] += 1
    mx = max(h)
    print()
    for n, i in enumerate(h):
        print('%3.1f: %s' % (n / 10, '+' * int(i / mx * maxwidth)))
    print()
 
if __name__ == '__main__':
    import random
    for i in range(1, 6):
        n = [random.random() for j in range(10**i)]
        print("\n##\n## %i numbers\n##" % 10**i)
        print('  Naive  method: sd: %8.6f, mean: %8.6f' % sd1(n))
        print('  Second method: sd: %8.6f, mean: %8.6f' % sd2(n))
        histogram(n)

