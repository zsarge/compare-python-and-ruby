====RUBY=====
 
def factorion?(n, base)
  n.digits(base).sum{|digit| (1..digit).inject(1, :*)} == n 
end
 
(9..12).each do |base|
  puts "Base #{base} factorions: #{(1..1_500_000).select{|n| factorion?(n, base)}.join(" ")} "
end
 

====RUBY=====
func max_power(b = 10) {
    var m = 1
    var f = (b-1)!
    while (m*f >= b**(m-1)) {
        m += 1
    }
    return m-1
}
 
func factorions(b = 10) {
 
    var result = []
    var digits = @^b
    var fact = digits.map { _! }
 
    for k in (1 .. max_power(b)) {
        digits.combinations_with_repetition(k, {|*comb|
            var n = comb.sum_by { fact[_] }
            if (n.digits(b).sort == comb) {
                result << n
            }
        })
    }
 
    return result
}
 
for b in (2..12) {
    var r = factorions(b)
    say "Base #{'%2d' % b} factorions: #{r}"
}

====PYTHON=====
fact = [1] # cache factorials from 0 to 11
for n in range(1, 12):
    fact.append(fact[n-1] * n)
 
for b in range(9, 12+1):
    print(f"The factorions for base {b} are:")
    for i in range(1500000):
        fact_sum = 0
        j = i
        while j > 0:
            d = j % b
            fact_sum += fact[d]
            j = j//b
        if fact_sum == i:
            print(i, end=" ")
    print()
 

