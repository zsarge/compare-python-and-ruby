====RUBY=====
 
class Numeric
  def to_i?
    self == self.to_i rescue false
   end
end
 
# Demo
ar = [25.000000, 24.999999, 25.000100, -2.1e120, -5e-2,  # Floats
      Float::NAN, Float::INFINITY,                       # more Floats
      2r, 2.5r,                                          # Rationals 
      2+0i, 2+0.0i, 5-5i]                                # Complexes
 
ar.each{|num| puts "#{num} integer? #{num.to_i?}" }
 

====RUBY=====
func is_int (n, tolerance=0) {
    !!(abs(n.real.round + n.imag - n) <= tolerance)
}
 
%w(25.000000 24.999999 25.000100 -2.1e120 -5e-2 Inf NaN 5.0+0.0i 5-5i).each {|s|
    var n = Number(s)
    printf("%-10s  %-8s  %-5s\n", s,
        is_int(n),
        is_int(n, tolerance: 0.00001))
}

====PYTHON=====
>>> def isint(f): 
    return complex(f).imag == 0 and complex(f).real.is_integer()
 
>>> [isint(f) for f in (1.0, 2, (3.0+0.0j), 4.1, (3+4j), (5.6+0j))]
[True, True, True, False, False, False]
 
>>> # Test cases
...
>>> isint(25.000000)
True
>>> isint(24.999999)
False
>>> isint(25.000100)
False
>>> isint(-2.1e120)
True
>>> isint(-5e-2)
False
>>> isint(float('nan'))
False
>>> isint(float('inf'))
False
>>> isint(5.0+0.0j)
True
>>> isint(5-5j)
False
 

====PYTHON=====
>>> a = 1.0000000000000001
>>> a
1.0
>>> 1.0 == 1.0000000000000001
True

