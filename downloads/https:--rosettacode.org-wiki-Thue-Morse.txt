====RUBY=====
steps = 6
 
tmp = ""
s1 = "0"
s2 = "1"
 
steps.times {
  tmp = s1
  s1 += s2
  s2 += tmp
}
 
puts s1

====RUBY=====
puts s = "0"
6.times{puts s << s.tr("01","10")}

====RUBY=====
func recmap(repeat, seed, transform, callback) {
    func (repeat, seed) {
        callback(seed)
        repeat > 0 && __FUNC__(repeat-1, transform(seed))
    }(repeat, seed)
}
 
recmap(6, "0", {|s| s + s.tr('01', '10') }, { .say })

====PYTHON=====
 
m='0'
print(m)
for i in range(0,6):
     m0=m
     m=m.replace('0','a')
     m=m.replace('1','0')
     m=m.replace('a','1')
     m=m0+m
     print(m)
 

====PYTHON=====
 
>>> def thue_morse_digits(digits):
...     return  [bin(n).count('1') % 2 for n in range(digits)]
... 
>>> thue_morse_digits(20)
[0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1]
 
>>> 
 

====PYTHON=====
 
>>> def thue_morse_subs(chars):
...     ans = '0'
...     while len(ans) < chars:
...         ans = ans.replace('0', '0_').replace('1', '10').replace('_', '1')
...     return ans[:chars]
... 
>>> thue_morse_subs(20)
'01101001100101101001'
>>> 
 

====PYTHON=====
 
>>> def thue_morse(n):
...     (v, i) = ('0', '1')
...     for _ in range(0,n):
...         (v, i) = (v + i, i + v)
...     return v
... 
>>> thue_morse(6)
'0110100110010110100101100110100110010110011010010110100110010110'
>>> 
 

