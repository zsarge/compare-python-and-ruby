====RUBY=====
class Circle
  def initialize(x, y, r)
    @x, @y, @r = [x, y, r].map(&:to_f)
  end
  attr_reader :x, :y, :r
 
  def self.apollonius(c1, c2, c3, s1=1, s2=1, s3=1)
    x1, y1, r1 = c1.x, c1.y, c1.r
    x2, y2, r2 = c2.x, c2.y, c2.r
    x3, y3, r3 = c3.x, c3.y, c3.r
 
    v11 = 2*x2 - 2*x1
    v12 = 2*y2 - 2*y1
    v13 = x1**2 - x2**2 + y1**2 - y2**2 - r1**2 + r2**2
    v14 = 2*s2*r2 - 2*s1*r1
 
    v21 = 2*x3 - 2*x2
    v22 = 2*y3 - 2*y2
    v23 = x2**2 - x3**2 + y2**2 - y3**2 - r2**2 + r3**2
    v24 = 2*s3*r3 - 2*s2*r2
 
    w12 = v12/v11
    w13 = v13/v11
    w14 = v14/v11
 
    w22 = v22/v21 - w12
    w23 = v23/v21 - w13
    w24 = v24/v21 - w14
 
    p = -w23/w22
    q = w24/w22
    m = -w12*p - w13
    n = w14 - w12*q
 
    a = n**2 + q**2 - 1
    b = 2*m*n - 2*n*x1 + 2*p*q - 2*q*y1 + 2*s1*r1
    c = x1**2 + m**2 - 2*m*x1 + p**2 + y1**2 - 2*p*y1 - r1**2
 
    d = b**2 - 4*a*c
    rs = (-b - Math.sqrt(d)) / (2*a)
    xs = m + n*rs
    ys = p + q*rs
 
    self.new(xs, ys, rs)
  end
 
  def to_s
    "Circle: x=#{@x}, y=#{@y}, r=#{@r}"
  end
end
 
puts c1 = Circle.new(0, 0, 1)
puts c2 = Circle.new(2, 4, 2)
puts c3 = Circle.new(4, 0, 1)
 
puts Circle.apollonius(c1, c2, c3)
puts Circle.apollonius(c1, c2, c3, -1, -1, -1)

====RUBY=====
class Circle(x,y,r) {
    method to_s { "Circle(#{x}, #{y}, #{r})" }
}
 
func solve_apollonius(c, s) {
 
    var(c1, c2, c3) = c...;
    var(s1, s2, s3) = s...;
 
    var 𝑣11 = (2*c2.x - 2*c1.x);
    var 𝑣12 = (2*c2.y - 2*c1.y);
    var 𝑣13 = (c1.x**2 - c2.x**2 + c1.y**2 - c2.y**2 - c1.r**2 + c2.r**2);
    var 𝑣14 = (2*s2*c2.r - 2*s1*c1.r);
 
    var 𝑣21 = (2*c3.x - 2*c2.x);
    var 𝑣22 = (2*c3.y - 2*c2.y);
    var 𝑣23 = (c2.x**2 - c3.x**2 + c2.y**2 - c3.y**2 - c2.r**2 + c3.r**2);
    var 𝑣24 = (2*s3*c3.r - 2*s2*c2.r);
 
    var 𝑤12 = (𝑣12 / 𝑣11);
    var 𝑤13 = (𝑣13 / 𝑣11);
    var 𝑤14 = (𝑣14 / 𝑣11);
 
    var 𝑤22 = (𝑣22/𝑣21 - 𝑤12);
    var 𝑤23 = (𝑣23/𝑣21 - 𝑤13);
    var 𝑤24 = (𝑣24/𝑣21 - 𝑤14);
 
    var 𝑃 = (-𝑤23 / 𝑤22);
    var 𝑄 = (𝑤24 / 𝑤22);
    var 𝑀 = (-𝑤12*𝑃 - 𝑤13);
    var 𝑁 = (𝑤14 - 𝑤12*𝑄);
 
    var 𝑎 = (𝑁**2 + 𝑄**2 - 1);
    var 𝑏 = (2*𝑀*𝑁 - 2*𝑁*c1.x + 2*𝑃*𝑄 - 2*𝑄*c1.y + 2*s1*c1.r);
    var 𝑐 = (c1.x**2 + 𝑀**2 - 2*𝑀*c1.x + 𝑃**2 + c1.y**2 - 2*𝑃*c1.y - c1.r**2);
 
    var 𝐷 = (𝑏**2 - 4*𝑎*𝑐);
    var rs = ((-𝑏 - 𝐷.sqrt) / 2*𝑎);
 
    var xs = (𝑀 + 𝑁*rs);
    var ys = (𝑃 + 𝑄*rs);
 
    Circle(xs, ys, rs);
}
 
var c = [Circle(0, 0, 1), Circle(4, 0, 1), Circle(2, 4, 2)];
say solve_apollonius(c, %n<1 1 1>);
say solve_apollonius(c, %n<-1 -1 -1>);

====PYTHON=====
 
from collections import namedtuple
import math
 
Circle = namedtuple('Circle', 'x, y, r')
 
def solveApollonius(c1, c2, c3, s1, s2, s3):
    '''
    >>> solveApollonius((0, 0, 1), (4, 0, 1), (2, 4, 2), 1,1,1)
    Circle(x=2.0, y=2.1, r=3.9)
    >>> solveApollonius((0, 0, 1), (4, 0, 1), (2, 4, 2), -1,-1,-1)
    Circle(x=2.0, y=0.8333333333333333, r=1.1666666666666667) 
    '''
    x1, y1, r1 = c1
    x2, y2, r2 = c2
    x3, y3, r3 = c3
 
    v11 = 2*x2 - 2*x1
    v12 = 2*y2 - 2*y1
    v13 = x1*x1 - x2*x2 + y1*y1 - y2*y2 - r1*r1 + r2*r2
    v14 = 2*s2*r2 - 2*s1*r1
 
    v21 = 2*x3 - 2*x2
    v22 = 2*y3 - 2*y2
    v23 = x2*x2 - x3*x3 + y2*y2 - y3*y3 - r2*r2 + r3*r3
    v24 = 2*s3*r3 - 2*s2*r2
 
    w12 = v12/v11
    w13 = v13/v11
    w14 = v14/v11
 
    w22 = v22/v21-w12
    w23 = v23/v21-w13
    w24 = v24/v21-w14
 
    P = -w23/w22
    Q = w24/w22
    M = -w12*P-w13
    N = w14 - w12*Q
 
    a = N*N + Q*Q - 1
    b = 2*M*N - 2*N*x1 + 2*P*Q - 2*Q*y1 + 2*s1*r1
    c = x1*x1 + M*M - 2*M*x1 + P*P + y1*y1 - 2*P*y1 - r1*r1
 
    # Find a root of a quadratic equation. This requires the circle centers not to be e.g. colinear
    D = b*b-4*a*c
    rs = (-b-math.sqrt(D))/(2*a)
 
    xs = M+N*rs
    ys = P+Q*rs
 
    return Circle(xs, ys, rs)
 
if __name__ == '__main__':
    c1, c2, c3 = Circle(0, 0, 1), Circle(4, 0, 1), Circle(2, 4, 2)
    print(solveApollonius(c1, c2, c3, 1, 1, 1))    #Expects "Circle[x=2.00,y=2.10,r=3.90]" (green circle in image)
    print(solveApollonius(c1, c2, c3, -1, -1, -1)) #Expects "Circle[x=2.00,y=0.83,r=1.17]" (red circle in image)

