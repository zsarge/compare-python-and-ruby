====RUBY=====
def semiprime(n)
  nf = 0
  (2..n).each do |i|
    while n % i == 0
      return false if nf == 2
      nf += 1
      n  /= i
    end
  end
  nf == 2
end
 
(1675..1681).each { |n| puts "#{n} -> #{semiprime(n)}" }

====RUBY=====
def semiprime(n)
  `factor #{n}`.split(' ').size == 3
end
n = 0xffffffffffffffff_u64 # 2**64 - 1 = 18446744073709551615
(n-50..n).each { |n| puts "#{n} -> #{semiprime(n)}" }

====RUBY=====
require 'prime'
# 75.prime_division # Returns the factorization.75 divides by 3 once and by 5 twice => [[3, 1], [5, 2]]
 
class Integer
  def semi_prime?
    prime_division.sum(&:last) == 2
  end
end
 
p 1679.semi_prime? # true
p ( 1..100 ).select( &:semi_prime? )
# [4, 6, 9, 10, 14, 15, 21, 22, 25, 26, 33, 34, 35, 38, 39, 46, 49, 51, 55, 57, 58, 62, 65, 69, 74, 77, 82, 85, 86, 87, 91, 93, 94, 95]
 

====RUBY=====
def semiprime(n)
  `factor #{n}`.split(' ').size == 3
end
n = 2**72 - 1   #4722366482869645213695
(n-50..n).each { |n| puts "#{n} -> #{semiprime(n)}" }

====RUBY=====
say is_semiprime(2**128 + 1)   #=> true
say is_semiprime(2**256 - 1)   #=> false

====RUBY=====
func is_semiprime(n, B=1e4) {
 
    with (n.trial_factor(B)) { |f|
        return false if (f.len > 2)
        return f.all { .is_prime } if (f.len == 2)
    }
 
    n.factor.len == 2
}
 
say [2,4,99,100,1679,32768,1234567,9876543,900660121].grep(is_semiprime)

====PYTHON=====
from prime_decomposition import decompose
 
def semiprime(n):
    d = decompose(n)
    try:
        return next(d) * next(d) == n
    except StopIteration:
        return False

====PYTHON=====
>>> semiprime(1679)
True
>>> [n for n in range(1,101) if semiprime(n)]
[4, 6, 9, 10, 14, 15, 21, 22, 25, 26, 33, 34, 35, 38, 39, 46, 49, 51, 55, 57, 58, 62, 65, 69, 74, 77, 82, 85, 86, 87, 91, 93, 94, 95]
>>> 

