====RUBY=====
def p(l, n)
    test = 0
    logv = Math.log(2.0) / Math.log(10.0)
    factor = 1
    loopv = l
    while loopv > 10 do
        factor = factor * 10
        loopv = loopv / 10
    end
    while n > 0 do
        test = test + 1
        val = (factor * (10.0 ** ((test * logv).modulo(1.0)))).floor
        if val == l then
            n = n - 1
        end
    end
    return test
end
 
def runTest(l, n)
    print "P(%d, %d) = %d\n" % [l, n, p(l, n)]
end
 
runTest(12, 1)
runTest(12, 2)
runTest(123, 45)
runTest(123, 12345)
runTest(123, 678910)

====RUBY=====
func farey_approximations(r, callback) {
 
    var (a1 = r.int, b1 = 1)
    var (a2 = a1+1,  b2 = 1)
 
    loop {
        var a3 = a1+a2
        var b3 = b1+b2
 
        if (a3 < r*b3) {
            (a1, b1) = (a3, b3)
        }
        else {
            (a2, b2) = (a3, b3)
        }
 
        callback(a3 / b3)
    }
}
 
func p(L, nth) {
 
    define ln2  = log(2)
    define ln5  = log(5)
    define ln10 = log(10)
 
    var t = L.len-1
 
    func isok(n) {
        floor(exp(ln2*(n - floor((n*ln2)/ln10) + t) + ln5*(t - floor((n*ln2)/ln10)))) == L
    }
 
    var deltas = gather {
        farey_approximations(ln2/ln10, {|r|
            take(r.de) if (r.de.len == L.len)
            break      if (r.de.len >  L.len)
        })
    }.sort.uniq
 
    var c = 0
    var k = (1..Inf -> first(isok))
 
    loop {
        return k if (++c == nth)
        k += (deltas.first {|d| isok(k+d) } \\ die "error: #{k}")
    }
}
 
var tests = [
    [12, 1],
    [12, 2],
    [123, 45],
    [123, 12345],
    [123, 678910],
 
    # extra
    [1234, 10000],
    [12345, 10000],
]
 
for a,b in (tests) {
    say "p(#{a}, #{b}) = #{p(a,b)}"
}

====PYTHON=====
from math import log, modf, floor
 
def p(l, n, pwr=2):
    l = int(abs(l))
    digitcount = floor(log(l, 10))
    log10pwr = log(pwr, 10)
    raised, found = -1, 0
    while found < n:
        raised += 1
        firstdigits = floor(10**(modf(log10pwr * raised)[0] + digitcount))
        if firstdigits == l:
            found += 1
    return raised
 
 
if __name__ == '__main__':
    for l, n in [(12, 1), (12, 2), (123, 45), (123, 12345), (123, 678910)]:
        print(f"p({l}, {n}) =", p(l, n))

