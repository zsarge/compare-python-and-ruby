====RUBY=====
 
def palindrome(s)
  s == s.reverse
end
 

====RUBY=====
 
def palindrome_imperative(s) : Bool
  mid = s.size // 2
  last = s.size - 1
  (0...mid).each do |i|
    if s[i] != s[last - i]
      return false
    end
  end
 
  true
end
 

====RUBY=====
def palindrome_2(s)
  mid = s.size // 2
  mid.times { |j| return false if s[j] != s[-1 - j] }
  true
end

====RUBY=====
 
require "benchmark"
Benchmark.ips do |x|
  x.report("declarative") { palindrome("hannah") }
  x.report("imperative1") { palindrome_imperative("hannah")}
  x.report("imperative2") { palindrome_2("hannah")}
end
 

====RUBY=====
def palindrome?(s)
  s == s.reverse
end

====RUBY=====
def r_palindrome?(s)
  if s.length <= 1
    true
  elsif s[0] != s[-1]
    false
  else
    r_palindrome?(s[1..-2])
  end
end

====RUBY=====
str = "A man, a plan, a caret, [...2110 chars deleted...] a canal--Panama.".downcase.delete('^a-z')
puts palindrome?(str)    # => true
puts r_palindrome?(str)  # => true
 
require 'benchmark'
Benchmark.bm do |b|
  b.report('iterative') {10000.times {palindrome?(str)}}
  b.report('recursive') {10000.times {r_palindrome?(str)}}
end

====RUBY=====
say "noon".is_palindrome;    # true

====RUBY=====
func palindrome(s) {
    s == s.reverse
}

====RUBY=====
func palindrome(s) {
    if (s.len <= 1) {
        true
    }
    elsif (s.first != s.last) {
        false
    }
    else {
        __FUNC__(s.ft(1, -2))
    }
}

====PYTHON=====
def is_palindrome(s):
  return s == s[::-1]

====PYTHON=====
def is_palindrome(s):
  low = 0
  high = len(s) - 1
  while low < high:
    if not s[low].isalpha():
      low += 1
    elif not s[high].isalpha():
      high -= 1
    else:
      if s[low].lower() != s[high].lower():
        return False
      else:
        low += 1
        high -= 1
        return True

====PYTHON=====
def is_palindrome_r(s):
  if len(s) <= 1:
    return True
  elif s[0] != s[-1]:
    return False
  else:
    return is_palindrome_r(s[1:-1])

====PYTHON=====
def is_palindrome_r2(s):
  return not s or s[0] == s[-1] and is_palindrome_r2(s[1:-1])

====PYTHON=====
def test(f, good, bad):
  assert all(f(x) for x in good)
  assert not any(f(x) for x in bad)
  print '%s passed all %d tests' % (f.__name__, len(good)+len(bad))
 
pals = ('', 'a', 'aa', 'aba', 'abba')
notpals = ('aA', 'abA', 'abxBa', 'abxxBa')
for ispal in is_palindrome, is_palindrome_r, is_palindrome_r2:
  test(ispal, pals, notpals)

====PYTHON=====
def p_loop():
  import re, string
  re1=""       # Beginning of Regex
  re2=""       # End of Regex
  pal=raw_input("Please Enter a word or phrase: ")
  pd = pal.replace(' ','')
  for c in string.punctuation:
     pd = pd.replace(c,"")
  if pal == "" :
    return -1
  c=len(pd)   # Count of chars.
  loops = (c+1)/2 
  for x in range(loops):
    re1 = re1 + "(\w)"
    if (c%2 == 1 and x == 0):
       continue 
    p = loops - x
    re2 = re2 + "\\" + str(p)
  regex= re1+re2+"$"   # regex is like "(\w)(\w)(\w)\2\1$"
  #print(regex)  # To test regex before re.search
  m = re.search(r'^'+regex,pd,re.IGNORECASE)
  if (m):
     print("\n   "+'"'+pal+'"')
     print("   is a Palindrome\n")
     return 1
  else:
     print("Nope!")
     return 0

====PYTHON=====
'''Palindrome detection'''
 
 
# isPalindrome :: String -> Bool
def isPalindrome(s):
    '''True if the string is unchanged under reversal.
       (The left half is a reflection of the right half)
    '''
    d, m = divmod(len(s), 2)
    return s[0:d] == s[d + m:][::-1]
 
 
# ------------------------- TEST -------------------------
# main :: IO ()
def main():
    '''Test'''
 
    print('\n'.join(
        f'{repr(s)} -> {isPalindrome(cleaned(s))}' for s in [
            "",
            "a",
            "ab",
            "aba",
            "abba",
            "In girum imus nocte et consumimur igni"
        ]
    ))
 
 
# cleaned :: String -> String
def cleaned(s):
    '''A lower-case copy of s, with spaces pruned.'''
    return [c.lower() for c in s if ' ' != c]
 
 
# MAIN ---
if __name__ == '__main__':
    main()
 

