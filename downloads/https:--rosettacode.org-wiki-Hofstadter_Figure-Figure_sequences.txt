====RUBY=====
$r = [nil, 1]
$s = [nil, 2]
 
def buildSeq(n)
  current = [ $r[-1], $s[-1] ].max
  while $r.length <= n || $s.length <= n
    idx = [ $r.length, $s.length ].min - 1
    current += 1
    if current == $r[idx] + $s[idx]
      $r << current
    else
      $s << current
    end
  end
end
 
def ffr(n)
  buildSeq(n)
  $r[n]
end
 
def ffs(n)
  buildSeq(n)
  $s[n]
end
 
require 'set'
require 'test/unit'
 
class TestHofstadterFigureFigure < Test::Unit::TestCase
  def test_first_ten_R_values
    r10 = 1.upto(10).map {|n| ffr(n)}
    assert_equal(r10, [1, 3, 7, 12, 18, 26, 35, 45, 56, 69])
  end
 
  def test_40_R_and_960_S_are_1_to_1000
    rs_values = Set.new
    rs_values.merge( 1.upto(40).collect  {|n| ffr(n)} )
    rs_values.merge( 1.upto(960).collect {|n| ffs(n)} )
    assert_equal(rs_values, Set.new( 1..1000 ))
  end
end

====RUBY=====
R = Enumerator.new do |y|
  y << n = 1
  S.each{|s_val| y << n += s_val}
end
 
S = Enumerator.new do |y|
  y << 2
  y << 4
  u = 5
  R.each do |r_val|
    next if u > r_val
    (u...r_val).each{|r| y << r}
    u = r_val+1
  end
end
 
p R.take(10)
p S.take(10)
p (R.take(40)+ S.take(960)).sort == (1..1000).to_a
 

====RUBY=====
var r = [nil, 1]
var s = [nil, 2]
 
func ffsr(n) {
  while(r.end < n) {
    r << s[r.end]+r[-1]
    s << [(s[-1]+1 .. r[-1]-1)..., r[-1]+1].grep{ s[-1] < _ }...
  }
  return n
}
 
func ffr(n) { r[ffsr(n)] }
func ffs(n) { s[ffsr(n)] }
 
printf("  i: R(i) S(i)\n")
printf("==============\n")
{ |i|
    printf("%3d:  %3d  %3d\n", i, ffr(i), ffs(i))
} << 1..10
printf("\nR(40)=%3d S(960)=%3d R(41)=%3d\n", ffr(40), ffs(960), ffr(41))
 
var seen = Hash()
 
{|i| seen{ffr(i)} := 0 ++ } << 1..40
{|i| seen{ffs(i)} := 0 ++ } << 1..960
 
if (seen.count {|k,v| (k.to_i >= 1) && (k.to_i <= 1000) && (v == 1) } == 1000) {
    say "All occured exactly once."
}
else {
    var missed = { !seen.has_key(_) }.grep(1..1000)
    var dupped = seen.grep { |_, v| v > 1 }.keys.sort
    say "These were missed: #{missed}"
    say "These were duplicated: #{dupped}"
}

====PYTHON=====
def ffr(n):
    if n < 1 or type(n) != int: raise ValueError("n must be an int >= 1")
    try:
        return ffr.r[n]
    except IndexError:
        r, s = ffr.r, ffs.s
        ffr_n_1 = ffr(n-1)
        lastr = r[-1]
        # extend s up to, and one past, last r 
        s += list(range(s[-1] + 1, lastr))
        if s[-1] < lastr: s += [lastr + 1]
        # access s[n-1] temporarily extending s if necessary
        len_s = len(s)
        ffs_n_1 = s[n-1] if len_s > n else (n - len_s) + s[-1]
        ans = ffr_n_1 + ffs_n_1
        r.append(ans)
        return ans
ffr.r = [None, 1]
 
def ffs(n):
    if n < 1 or type(n) != int: raise ValueError("n must be an int >= 1")
    try:
        return ffs.s[n]
    except IndexError:
        r, s = ffr.r, ffs.s
        for i in range(len(r), n+2):
            ffr(i)
            if len(s) > n:
                return s[n]
        raise Exception("Whoops!")
ffs.s = [None, 2]
 
if __name__ == '__main__':
    first10 = [ffr(i) for i in range(1,11)]
    assert first10 == [1, 3, 7, 12, 18, 26, 35, 45, 56, 69], "ffr() value error(s)"
    print("ffr(n) for n = [1..10] is", first10)
    #
    bin = [None] + [0]*1000
    for i in range(40, 0, -1):
        bin[ffr(i)] += 1
    for i in range(960, 0, -1):
        bin[ffs(i)] += 1
    if all(b == 1 for b in bin[1:1000]):
        print("All Integers 1..1000 found OK")
    else:
        print("All Integers 1..1000 NOT found only once: ERROR")

====PYTHON=====
cR = [1]
cS = [2]
 
def extend_RS():
	x = cR[len(cR) - 1] + cS[len(cR) - 1]
	cR.append(x)
	cS += range(cS[-1] + 1, x)
	cS.append(x + 1)
 
def ff_R(n):
	assert(n > 0)
	while n > len(cR): extend_RS()
	return cR[n - 1]
 
def ff_S(n):
	assert(n > 0)
	while n > len(cS): extend_RS()
	return cS[n - 1]
 
# tests
print([ ff_R(i) for i in range(1, 11) ])
 
s = {}
for i in range(1, 1001): s[i] = 0
for i in range(1, 41):  del s[ff_R(i)]
for i in range(1, 961): del s[ff_S(i)]
 
# the fact that we got here without a key error
print("Ok")

====PYTHON=====
from itertools import islice
 
def R():
	n = 1
	yield n
	for s in S():
		n += s
		yield n;
 
def S():
	yield 2
	yield 4
	u = 5
	for r in R():
		if r <= u: continue;
		for x in range(u, r): yield x
		u = r + 1
 
def lst(s, n): return list(islice(s(), n))
 
print "R:", lst(R, 10)
print "S:", lst(S, 10)
print sorted(lst(R, 40) + lst(S, 960)) == list(range(1,1001))
 
# perf test case
# print sum(lst(R, 10000000))

