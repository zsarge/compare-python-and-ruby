====RUBY=====
# Build environments
envs = (1..12).map do |n|
  Object.new.instance_eval {@n = n; @cnt = 0; self}
end
 
# Until all values are 1:
until envs.all? {|e| e.instance_eval{@n} == 1}
  envs.each do |e|
    e.instance_eval do          # Use environment _e_
      printf "%4s", @n
      if @n > 1
        @cnt += 1               # Increment step count
        @n = if @n.odd?         # Calculate next hailstone value
               @n * 3 + 1
             else
               @n / 2
             end
      end
    end
  end
  puts
end
puts '=' * 48
envs.each do |e|                # For each environment _e_
  e.instance_eval do
    printf "%4s", @cnt          # print the step count
  end
end
puts

====RUBY=====
# Build environments
envs = (1..12).map do |n|
  e = class Object
        # This is a new lexical scope with no local variables.
        # Create a new binding here.
        binding
      end
  eval(<<-EOS, e).call(n)
    n, cnt = nil, 0
    proc {|arg| n = arg}
  EOS
  e
end
 
# Until all values are 1:
until envs.all? {|e| eval('n == 1', e)}
  envs.each do |e|
    eval(<<-EOS, e)           # Use environment _e_
      printf "%4s", n
      if n > 1
        cnt += 1              # Increment step count
        n = if n.odd?         # Calculate next hailstone value
              n * 3 + 1
            else
              n / 2
            end
      end
    EOS
  end
  puts
end
puts '=' * 48
envs.each do |e|                # For each environment _e_
  eval('printf "%4s", cnt', e)  # print the step count
end
puts

====RUBY=====
func calculator({.is_one}   ) { 1 }
func calculator(n {.is_even}) { n / 2 }
func calculator(n           ) { 3*n + 1 }
 
func succ(this {_{:value}.is_one}, _) {
    return this
}
 
func succ(this, get_next) {
    this{:value} = get_next(this{:value})
    this{:count}++
    return this
}
 
var enviornments = (1..12 -> map {|i| Hash(value => i, count => 0) });
 
while (!enviornments.map{ _{:value} }.all { .is_one }) {
    say enviornments.map {|h| "%4s" % h{:value} }.join;
    enviornments.range.each { |i|
        enviornments[i] = succ(enviornments[i], calculator);
    }
}
 
say 'Counts';
say enviornments.map{ |h| "%4s" % h{:count} }.join;

====PYTHON=====
environments = [{'cnt':0, 'seq':i+1} for i in range(12)]
 
code = '''
print('% 4d' % seq, end='')
if seq != 1:
    cnt += 1
    seq = 3 * seq + 1 if seq & 1 else seq // 2
'''
 
while any(env['seq'] > 1 for env in environments):
    for env in environments:
        exec(code, globals(), env)
    print()
 
print('Counts')
for env in environments:
    print('% 4d' % env['cnt'], end='')
print()

