====RUBY=====
#   games = ARGV converted to Integer
#   No arguments? Pick any of first 32000 games.
begin
  games = ARGV.map {|s| Integer(s)}
rescue => err
  $stderr.puts err.inspect
  $stderr.puts "Usage: #{__FILE__} number..."
  abort
end
games.empty? and games = [rand(32000)]
 
# Create original deck of 52 cards, not yet shuffled.
orig_deck = %w{A 2 3 4 5 6 7 8 9 T J Q K}.product(%w{C D H S}).map(&:join)
 
games.each do |seed|
  deck = orig_deck.dup
 
  # Shuffle deck with random index from linear congruential
  # generator like Microsoft.
  state = seed
  52.downto(2) do |len|
    state = ((214013 * state) + 2531011) & 0x7fff_ffff
    index = (state >> 16) % len
    last = len - 1
    deck[index], deck[last] = deck[last], deck[index]
  end
 
  deck.reverse!  # Shuffle did reverse deck. Do reverse again.
 
  # Deal cards.
  puts "Game ##{seed}"
  deck.each_slice(8) {|row| puts " " + row.join(" ")}
  puts
end

====PYTHON=====
 
 
def randomGenerator(seed=1):
    max_int32 = (1 << 31) - 1
    seed = seed & max_int32
 
    while True:
        seed = (seed * 214013 + 2531011) & max_int32
        yield seed >> 16
 
def deal(seed):
    nc = 52
    cards = list(range(nc - 1, -1, -1))
    rnd = randomGenerator(seed)
    for i, r in zip(range(nc), rnd):
        j = (nc - 1) - r % (nc - i)
        cards[i], cards[j] = cards[j], cards[i]
    return cards
 
def show(cards):
    l = ["A23456789TJQK"[int(c/4)] + "CDHS"[c%4] for c in cards]
    for i in range(0, len(cards), 8):
        print(" ".join(l[i : i+8]))
 
if __name__ == '__main__':
    from sys import argv
    seed = int(argv[1]) if len(argv) == 2 else 11982
    print("Hand {}".format(seed))
    deck = deal(seed)
    show(deck)

