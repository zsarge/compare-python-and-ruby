====RUBY=====
def count_divisors(n : Int64) : Int64
  return 1_i64 if n < 2
  count = 2_i64
 
  i = 2
  while i <= n // 2
    count += 1 if n % i == 0
    i += 1
  end
 
  count
end
 
max_div = 0_i64
count = 0_i64
 
print "The first 20 anti-primes are: "
 
n = 1_i64
while count < 20
  d = count_divisors n
 
  if d > max_div
    print "#{n} "
    max_div = d
    count += 1
  end
 
  n += 1
end
 
puts ""
 

====RUBY=====
require 'prime'
 
def num_divisors(n)
  n.prime_division.inject(1){|prod, (_p,n)| prod *= (n + 1) } 
end
 
anti_primes = Enumerator.new do |y| # y is the yielder
  max = 0
  y << 1                            # yield 1
  2.step(nil,2) do |candidate|      # nil is taken as Infinity
     num = num_divisors(candidate)
     if  num > max
       y << candidate               # yield the candidate
       max = num
     end
  end
end
 
puts anti_primes.take(20).join(" ")
 

====RUBY=====
say with (0) {|max|
    1..Inf -> lazy.grep { (.sigma0 > max) && (max = .sigma0) }.first(20)
}

====PYTHON=====
from itertools import chain, count, cycle, islice, accumulate
 
def factors(n):
    def prime_powers(n):
        for c in accumulate(chain([2, 1, 2], cycle([2,4]))):
            if c*c > n: break
            if n%c: continue
            d,p = (), c
            while not n%c:
                n,p,d = n//c, p*c, d+(p,)
            yield d
        if n > 1: yield n,
 
    r = [1]
    for e in prime_powers(n):
        r += [a*b for a in r for b in e]
    return r
 
def antiprimes():
    mx = 0
    yield 1
    for c in count(2,2):
        if c >= 58: break
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln
    for c in count(60,30):
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln  
 
if __name__ == '__main__':
    print(*islice(antiprimes(), 40)))

