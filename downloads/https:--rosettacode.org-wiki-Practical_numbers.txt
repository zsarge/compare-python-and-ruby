====PYTHON=====
from itertools import chain, cycle, accumulate, combinations
from typing import List, Tuple
 
# %% Factors
 
def factors5(n: int) -> List[int]:
    """Factors of n, (but not n)."""
    def prime_powers(n):
        # c goes through 2, 3, 5, then the infinite (6n+1, 6n+5) series
        for c in accumulate(chain([2, 1, 2], cycle([2,4]))):
            if c*c > n: break
            if n%c: continue
            d,p = (), c
            while not n%c:
                n,p,d = n//c, p*c, d + (p,)
            yield(d)
        if n > 1: yield((n,))
 
    r = [1]
    for e in prime_powers(n):
        r += [a*b for a in r for b in e]
    return r[:-1]
 
# %% Powerset
 
def powerset(s: List[int]) -> List[Tuple[int, ...]]:
    """powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3) ."""
    return chain.from_iterable(combinations(s, r) for r in range(1, len(s)+1))
 
# %% Practical number
 
def is_practical(x: int) -> bool:
    """
    Is x a practical number.
 
    I.e. Can some selection of the proper divisors of x, (other than x), sum
    to i for all i in the range 1..x-1 inclusive.
    """
    if x == 1:
        return True
    if x %2:
        return False  # No Odd number more than 1
    f = factors5(x)
    ps = powerset(f)
    found = {y for y in {sum(i) for i in ps}
             if 1 <= y < x}
    return len(found) == x - 1
 
 
if __name__ == '__main__':
    n = 333
    p = [x for x in range(1, n + 1) if is_practical(x)]
    print(f"There are {len(p)} Practical numbers from 1 to {n}:")
    print(' ', str(p[:10])[1:-1], '...', str(p[-10:])[1:-1])
    x = 666
    print(f"\nSTRETCH GOAL: {x} is {'not ' if not is_practical(x) else ''}Practical.")

====PYTHON=====
def is_practical5(x: int) -> bool:
    """Practical number test with factor reverse sort and short-circuiting."""
 
    if x == 1:
        return True
    if x % 2:
        return False  # No Odd number more than 1
    mult_4_or_6 = (x % 4 == 0) or (x % 6 == 0)
    if x > 2 and not mult_4_or_6:
        return False  # If > 2 then must be a divisor of 4 or 6
 
    f = sorted(factors5(x), reverse=True)
    if sum(f) < x - 1:
        return False # Never get x-1
    ps = powerset(f)
 
    found = set()
    for nps in ps:
        if len(found) < x - 1:
            y = sum(nps)
            if 1 <= y < x:
                found.add(y)
        else:
            break   # Short-circuiting the loop.
 
    return len(found) == x - 1
 
 
if __name__ == '__main__':
    n = 333
    print("\n" + is_practical5.__doc__)
    p = [x for x in range(1, n + 1) if is_practical5(x)]
    print(f"There are {len(p)} Practical numbers from 1 to {n}:")
    print(' ', str(p[:10])[1:-1], '...', str(p[-10:])[1:-1])
    x = 666
    print(f"\nSTRETCH GOAL: {x} is {'not ' if not is_practical(x) else ''}Practical.")
    x = 5184
    print(f"\nEXTRA GOAL: {x} is {'not ' if not is_practical(x) else ''}Practical.")

====PYTHON=====
'''Practical numbers'''
 
from itertools import accumulate, chain, groupby, product
from math import floor, sqrt
from operator import mul
from functools import reduce
from typing import Callable, List
 
 
def isPractical(n: int) -> bool:
    '''True if n is a Practical number
       (a member of OEIS A005153)
    '''
    ds = properDivisors(n)
    return all(map(
        sumOfAnySubset(ds),
        range(1, n)
    ))
 
 
def sumOfAnySubset(xs: List[int]) -> Callable[[int], bool]:
    '''True if any subset of xs sums to n.
    '''
    def go(n):
        if n in xs:
            return True
        else:
            total = sum(xs)
            if n == total:
                return True
            elif n < total:
                h, *t = reversed(xs)
                d = n - h
                return d in t or (
                    d > 0 and sumOfAnySubset(t)(d)
                ) or sumOfAnySubset(t)(n)
            else:
                return False
    return go
 
 
# ------------------------- TEST -------------------------
def main() -> None:
    '''Practical numbers in the range [1..333],
       and the OEIS A005153 membership of 666.
    '''
 
    xs = [x for x in range(1, 334) if isPractical(x)]
    print(
        f'{len(xs)} OEIS A005153 numbers in [1..333]\n\n' + (
            spacedTable(
                chunksOf(10)([
                    str(x) for x in xs
                ])
            )
        )
    )
    print("\n")
    for n in [666]:
        print(
            f'{n} is practical :: {isPractical(n)}'
        )
 
 
# ----------------------- GENERIC ------------------------
 
def chunksOf(n: int) -> Callable[[List[str]], List[List[str]]]:
    '''A series of lists of length n, subdividing the
       contents of xs. Where the length of xs is not evenly
       divible, the final list will be shorter than n.
    '''
    def go(xs):
        return [
            xs[i:n + i] for i in range(0, len(xs), n)
        ] if 0 < n else None
    return go
 
 
def primeFactors(n: int) -> List[int]:
    '''A list of the prime factors of n.
    '''
    def f(qr):
        r = qr[1]
        return step(r), 1 + r
 
    def step(x):
        return 1 + (x << 2) - ((x >> 1) << 1)
 
    def go(x):
        root = floor(sqrt(x))
 
        def p(qr):
            q = qr[0]
            return root < q or 0 == (x % q)
 
        q = until(p)(f)(
            (2 if 0 == x % 2 else 3, 1)
        )[0]
        return [x] if q > root else [q] + go(x // q)
 
    return go(n)
 
 
def properDivisors(n: int) -> List[int]:
    '''The ordered divisors of n, excluding n itself.
    '''
    def go(a, x):
        return [a * b for a, b in product(
            a,
            accumulate(chain([1], x), mul)
        )]
    return sorted(
        reduce(go, [
            list(g) for _, g in groupby(primeFactors(n))
        ], [1])
    )[:-1] if 1 < n else []
 
 
def listTranspose(xss: List[List[str]]) -> List[List[str]]:
    '''Transposed matrix'''
    def go(xss):
        if xss:
            h, *t = xss
            return (
                [[h[0]] + [xs[0] for xs in t if xs]] + (
                    go([h[1:]] + [xs[1:] for xs in t])
                )
            ) if h and isinstance(h, list) else go(t)
        else:
            return []
    return go(xss)
 
 
def until(p: Callable[[int], bool]) -> Callable[[int], bool]:
    '''The result of repeatedly applying f until p holds.
       The initial seed value is x.
    '''
    def go(f):
        def g(x):
            v = x
            while not p(v):
                v = f(v)
            return v
        return g
    return go
 
 
# ---------------------- FORMATTING ----------------------
 
def spacedTable(rows: List[List[str]]) -> str:
    '''Tabulation with right-aligned cells'''
    columnWidths = [
        len(str(row[-1])) for row in listTranspose(rows)
    ]
 
    def aligned(s, w):
        return s.rjust(w, ' ')
 
    return '\n'.join(
        ' '.join(
            map(aligned, row, columnWidths)
        ) for row in rows
    )
 
 
# MAIN ---
if __name__ == '__main__':
    main()

