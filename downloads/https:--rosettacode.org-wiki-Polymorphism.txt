====RUBY=====
class Point
  attr_accessor :x,:y
  def initialize(x=0, y=0)
    self.x = x
    self.y = y
  end
  def to_s
    "Point at #{x},#{y}"
  end
end
 
# When defining Circle class as the sub-class of the Point class:
class Circle < Point
  attr_accessor :r
  def initialize(x=0, y=0, r=0)
    self.x = x
    self.y = y
    self.r = r
  end
  def to_s
    "Circle at #{x},#{y} with radius #{r}"
  end
end

====RUBY=====
# create a point
puts Point.new          # => Point at 0,0
p = Point.new(1, 2)
puts p                  # => Point at 1,2
puts p.x                # => 1
p.y += 1
puts p                  # => Point at 1,3
 
# create a circle
c = Circle.new(4,5,6)
# copy it
d = c.dup
d.r = 7.5
puts c                  # => Circle at 4,5 with radius 6
puts d                  # => Circle at 4,5 with radius 7.5

====RUBY=====
class Point(x=0, y=0) {
 
}
 
class Circle(x=0, y=0, r=0) {
 
}
 
func pp(Point obj) {
    say "Point at #{obj.x},#{obj.y}";
}
 
func pp(Circle obj) {
    say "Circle at #{obj.x},#{obj.y} with radius #{obj.r}";
}

====RUBY=====
pp(Point.new);              # => Point at 0,0
var p = Point(1, 2);        # create a point
pp(p);                      # => Point at 1,2
say p.x;                    # => 1
p.y += 1;                   # add one to y
pp(p);                      # => Point at 1,3
 
var c = Circle(4,5,6);      # create a circle
var d = c.clone;            # make a clone of it
d.r = 7.5;                  # and change the radius to 7.5
pp(c);                      # => Circle at 4,5 with radius 6
pp(d);                      # => Circle at 4,5 with radius 7.5

====PYTHON=====
class Point(object):
    def __init__(self, x=0.0, y=0.0):
        self.x = x
        self.y = y
    def __repr__(self):
        return '<Point 0x%x x: %f y: %f>' % (id(self), self.x, self.y)
 
class Circle(object):
    def __init__(self, center=None, radius=1.0):
        self.center = center or Point()
        self.radius = radius
    def __repr__(self):
        return '<Circle 0x%x x: %f y: %f radius: %f>' % (
            id(self), self.center.x, self.center.y, self.radius)

====PYTHON=====
class Point(object):
    def __init__(self, x=0.0, y=0.0):
        self.x = x
        self.y = y
    def __repr__(self):
        return '<Point 0x%x x: %f y: %f>' % (id(self), self.x, self.y)
 
class Circle(Point):
    def __init__(self, x=0.0, y=0.0, radius=1.0):
        Point.__init__(self, x, y)
        self.radius = radius
    def __repr__(self):
        return '<Circle 0x%x x: %f y: %f radius: %f>' % (
            id(self), self.x, self.y, self.radius)

====PYTHON=====
>>> from collections import namedtuple
>>> class Point(namedtuple('Point', 'x y')):
	def __new__( _cls, x=0, y=0 ):
		return super().__new__(_cls, x, y)
 
 
>>> class Circle(namedtuple('Circle', 'x y r')):
	def __new__( _cls, x=0, y=0, r=0 ):
		return super().__new__(_cls, x, y, r)
 
 
>>> Point(), Point(x=1), Point(y=2), Point(3, 4)
(Point(x=0, y=0), Point(x=1, y=0), Point(x=0, y=2), Point(x=3, y=4))
>>> Circle(), Circle(r=2), Circle(1, 2, 3)
(Circle(x=0, y=0, r=0), Circle(x=0, y=0, r=2), Circle(x=1, y=2, r=3))
>>> p = Point(1.25, 3.87)
>>> p
Point(x=1.25, y=3.87)
>>> p.x = 10.81
Traceback (most recent call last):
  File "<pyshell#27>", line 1, in <module>
    p.x = 10.81
AttributeError: can't set attribute
>>> 

====PYTHON=====
>>> Point = namedtuple('Point', 'x y')
>>> Circle = namedtuple('Circle', 'x y r')
>>> Point(3, 4)
Point(x=3, y=4)
>>> Circle(x=1, y=2, r=3)
Circle(x=1, y=2, r=3)
>>> 

