====RUBY=====
n = 10_000                  #number of times to play
 
stay = switch = 0           #sum of each strategy's wins
 
n.times do                  #play the game n times
 
  #the doors reveal 2 goats and a car
  doors = [ :goat, :goat, :car ].shuffle
 
  #random guess
  guess = rand(3)
 
  #random door shown, but it is neither the guess nor the car
  begin shown = rand(3) end while shown == guess || doors[shown] == :car
 
  if doors[guess] == :car
    #staying with the initial guess wins if the initial guess is the car
    stay += 1
  else
    #switching guesses wins if the unshown door is the car
    switch += 1
  end
 
end
 
puts "Staying wins %.2f%% of the time."   % (100.0 * stay   / n)
puts "Switching wins %.2f%% of the time." % (100.0 * switch / n)

====RUBY=====
var n = 1000                                  # number of times to play
var switchWins = (var stayWins = 0)           # sum of each strategy's wins
 
n.times {                                     # play the game n times
   var prize = pick(^3)
   var chosen = pick(^3)
 
   var show;
   do {
        show = pick(^3)
   } while (show ~~ [chosen, prize])
 
   given(chosen) {
     when (prize)                 { stayWins   += 1 }
     when ([3 - show - prize])    { switchWins += 1 }
     default                      { die "~ error ~" }
   }
}
 
say ("Staying wins %.2f%% of the time."   % (100.0 * stayWins   / n))
say ("Switching wins %.2f%% of the time." % (100.0 * switchWins / n))

====PYTHON=====
'''
I could understand the explanation of the Monty Hall problem
but needed some more evidence
 
References:
  http://www.bbc.co.uk/dna/h2g2/A1054306
  http://en.wikipedia.org/wiki/Monty_Hall_problem especially:
  http://en.wikipedia.org/wiki/Monty_Hall_problem#Increasing_the_number_of_doors
'''
from random import randrange
 
doors, iterations = 3,100000  # could try 100,1000
 
def monty_hall(choice, switch=False, doorCount=doors):
  # Set up doors
  door = [False]*doorCount
  # One door with prize
  door[randrange(doorCount)] = True
 
  chosen = door[choice]
 
  unpicked = door
  del unpicked[choice]
 
  # Out of those unpicked, the alternative is either:
  #   the prize door, or
  #   an empty door if the initial choice is actually the prize.
  alternative = True in unpicked
 
  if switch:
    return alternative
  else:
    return chosen
 
print "\nMonty Hall problem simulation:"
print doors, "doors,", iterations, "iterations.\n"
 
print "Not switching allows you to win",
print sum(monty_hall(randrange(3), switch=False)
          for x in range(iterations)),
print "out of", iterations, "times."
print "Switching allows you to win",
print sum(monty_hall(randrange(3), switch=True)
          for x in range(iterations)),
print "out of", iterations, "times.\n"

====PYTHON=====
import random
 #1 represents a car
 #0 represent a goat
 
stay = 0  #amount won if stay in the same position
switch = 0 # amount won if you switch 
 
for i in range(1000):
    lst = [1,0,0]           # one car and two goats
    random.shuffle(lst)     # shuffles the list randomly
 
    ran = random.randrange(3) # gets a random number for the random guess
 
    user = lst[ran] #storing the random guess 
 
    del(lst[ran]) # deleting the random guess
 
    huh = 0
    for i in lst: # getting a value 0 and deleting it
        if i ==0:
            del(lst[huh]) # deletes a goat when it finds it
            break
        huh+=1
 
    if user ==1: # if the original choice is 1 then stay adds 1
        stay+=1
 
    if lst[0] == 1: # if the switched value is 1 then switch adds 1
        switch+=1
 
print("Stay =",stay)
print("Switch = ",switch)
#Done by Sam Witton 09/04/2014

