====RUBY=====
require "big"
require "benchmark"
 
# the simplest PG primality test using the P3 prime generator
# reduces the number space for primes to 2/6 (33.33%) of all integers
 
def primep3?(n)                           # P3 Prime Generator primality test
  # P3 = 6*k + {5, 7}                     # P3 primes candidates (pc) sequence
  n = n.to_big_i
  return n | 1 == 3 if n < 5              # n: 0,1,4|false, 2,3|true 
  return false if n.gcd(6) != 1           # 1/3 (2/6) of integers are P3 pc
  p = typeof(n).new(5)                    # first P3 sequence value
  until p > isqrt(n)
    return false if n % p == 0 || n % (p + 2) == 0  # if n is composite
    p += 6      # first prime candidate for next kth residues group
  end
  true
end
 
# PG primality test using the P5 prime generator
# reduces the number space for primes to 8/30 (26.67%) of all integers
 
def primep5?(n)                          # P5 Prime Generator primality test
  # P5 = 30*k + {7,11,13,17,19,23,29,31} # P5 primes candidates sequence
  n = n.to_big_i
  return [2, 3, 5].includes?(n) if n < 7 # for small and negative values
  return false if n.gcd(30) != 1         # 4/15 (8/30) of integers are P5 pc
  p = typeof(n).new(7)                   # first P5 sequence value
  until p > isqrt(n)
    return false if                      # if n is composite
      n % (p)    == 0 || n % (p+4)  == 0 || n % (p+6)  == 0 || n % (p+10) == 0 ||
      n % (p+12) == 0 || n % (p+16) == 0 || n % (p+22) == 0 || n % (p+24) == 0
      p += 30  # first prime candidate for next kth residues group
  end
  true
end
 
# PG primality test using the P7 prime generator
# reduces the number space for primes to 48/210 (22.86%) of all integers
 
def primep7?(n)
  # P7 = 210*k + {11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,
  #      89,97,101,103,107,109,113,121,127,131,137,139,143,149,151,157,163,
  #      167,169,173,179,181,187,191,193,197,199,209,211}
  n = n.to_big_i
  return [2, 3, 5, 7].includes?(n) if n < 11  
  return false if n.gcd(210) != 1         # 8/35 (48/210) of integers are P7 pc
  p = typeof(n).new(11)                   # first P7 sequence value
  until p > isqrt(n)
    return false if
      n % (p)     == 0 || n % (p+2)   == 0 || n % (p+6)   == 0 || n % (p+8)   == 0 ||
      n % (p+12)  == 0 || n % (p+18)  == 0 || n % (p+20)  == 0 || n % (p+26)  == 0 ||
      n % (p+30)  == 0 || n % (p+32)  == 0 || n % (p+36)  == 0 || n % (p+42)  == 0 ||
      n % (p+48)  == 0 || n % (p+50)  == 0 || n % (p+56)  == 0 || n % (p+60)  == 0 ||
      n % (p+62)  == 0 || n % (p+68)  == 0 || n % (p+72)  == 0 || n % (p+78)  == 0 ||
      n % (p+86)  == 0 || n % (p+90)  == 0 || n % (p+92)  == 0 || n % (p+96)  == 0 ||
      n % (p+98)  == 0 || n % (p+102) == 0 || n % (p+110) == 0 || n % (p+116) == 0 ||
      n % (p+120) == 0 || n % (p+126) == 0 || n % (p+128) == 0 || n % (p+132) == 0 ||
      n % (p+138) == 0 || n % (p+140) == 0 || n % (p+146) == 0 || n % (p+152) == 0 ||
      n % (p+156) == 0 || n % (p+158) == 0 || n % (p+162) == 0 || n % (p+168) == 0 ||
      n % (p+170) == 0 || n % (p+176) == 0 || n % (p+180) == 0 || n % (p+182) == 0 ||
      n % (p+186) == 0 || n % (p+188) == 0 || n % (p+198) == 0 || n % (p+200) == 0
    p += 210    # first prime candidate for next  kth residues group 
  end
  true
end
 
# Newton's method for integer squareroot
def isqrt(n)
  raise ArgumentError.new "Input must be non-negative integer" if n < 0
  return n if n < 2
  bits = n.bit_length
  one = typeof(n).new(1)  # value 1 of type self
  x = one << ((bits - 1) >> 1) | n >> ((bits >> 1) + 1)
  while (t = n // x) < x; x = (x + t) >> 1 end
  x   # output is same integer class as input
end
 
# Benchmarks to test for various size primes
 
p = 541
Benchmark.ips do |b|
    print "\np = #{p}"
    b.report("primep3?") { primep3?(p) }
    b.report("primep5?") { primep5?(p) }
    b.report("primep7?") { primep7?(p) }
    puts
end
 
p = 1000003      
Benchmark.ips do |b|
    print "\np = #{p}"
    b.report("primep3?") { primep3?(p) }
    b.report("primep5?") { primep5?(p) }
    b.report("primep7?") { primep7?(p) }
    puts
end
 
p = 2147483647i32     # largest I32 prime
Benchmark.ips do |b|
    print "\np = #{p}"
    b.report("primep3?") { primep3?(p) }
    b.report("primep5?") { primep5?(p) }
    b.report("primep7?") { primep7?(p) }
    puts
end
 
p = 4294967291u32     # largest U32 prime
Benchmark.ips do |b|
    print "\np = #{p}"
    b.report("primep3?") { primep3?(p) }
    b.report("primep5?") { primep5?(p) }
    b.report("primep7?") { primep7?(p) }
    puts
end
 
p = 4294967311      # first prime > 2**32
Benchmark.ips do |b|
    print "\np = #{p}"
    b.report("primep3?") { primep3?(p) }
    b.report("primep5?") { primep5?(p) }
    b.report("primep7?") { primep7?(p) }
    puts
end

====RUBY=====
def prime(a)
  if a == 2
    true
  elsif a <= 1 || a % 2 == 0
    false
  else
    divisors = (3..Math.sqrt(a)).step(2)
    divisors.none? { |d| a % d == 0 }
  end
end
p (1..50).select{|i| prime(i)}

====RUBY=====
require "prime"
def prime?(value, generator = Prime::Generator23.new)
  return false if value < 2
  for num in generator
    q,r = value.divmod num
    return true if q < num
    return false if r == 0
  end
end
p (1..50).select{|i| prime?(i)}

====RUBY=====
def primes(limit)
  (enclose = lambda { |primes|
    primes.last.succ.upto(limit) do |trial_pri|
      if primes.none? { |pri| (trial_pri % pri).zero? }
        return enclose.call(primes << trial_pri)
      end
    end
    primes
  }).call([2])
end
p primes(50)

====RUBY=====
def isprime(n)
  '1'*n !~ /^1?$|^(11+?)\1+$/
end

====RUBY=====
require "benchmark/ips"
 
# the simplest PG primality test using the P3 prime generator
# reduces the number space for primes to 2/6 (33.33%) of all integers
 
def primep3?(n)                           # P3 Prime Generator primality test
  # P3 = 6*k + {5, 7}                     # P3 primes candidates (pc) sequence
  return n | 1 == 3 if n < 5              # n: 0,1,4|false, 2,3|true 
  return false if n.gcd(6) != 1           # 1/3 (2/6) of integers are P3 pc
  p, sqrtn = 5, Integer.sqrt(n)           # first P3 sequence value
  until p > sqrtn
    return false if n % p == 0 || n % (p + 2) == 0  # if n is composite
    p += 6      # first prime candidate for next kth residues group
  end
  true
end
 
# PG primality test using the P5 prime generator
# reduces the number space for primes to 8/30 (26.67%) of all integers
 
def primep5?(n)                           # P5 Prime Generator primality test
   # P5 = 30*k + {7,11,13,17,19,23,29,31} # P5 primes candidates sequence
   return [2, 3, 5].include?(n) if n < 7  # for small and negative values
   return false if n.gcd(30) != 1         # 4/15 (8/30) of integers are P5 pc
   p, sqrtn = 7, Integer.sqrt(n)          # first P5 sequence value
   until p > sqrtn
     return false if                      # if n is composite
       n % (p)    == 0 || n % (p+4)  == 0 || n % (p+6)  == 0 || n % (p+10) == 0 ||
       n % (p+12) == 0 || n % (p+16) == 0 || n % (p+22) == 0 || n % (p+24) == 0
       p += 30  # first prime candidate for next kth residues group
   end
   true
end
 
# PG primality test using the P7 prime generator
# reduces the number space for primes to 48/210 (22.86%) of all integers
 
def primep7?(n)
  # P7 = 210*k + {11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,
  #      89,97,101,103,107,109,113,121,127,131,137,139,143,149,151,157,163,
  #      167,169,173,179,181,187,191,193,197,199,209,211}
  return [2, 3, 5, 7].include?(n) if n < 11  
  return false if n.gcd(210) != 1         # 8/35 (48/210) of integers are P7 pc
  p, sqrtn = 11, Integer.sqrt(n)          # first P7 sequence value
  until p > sqrtn
    return false if
      n % (p)     == 0 || n % (p+2)   == 0 || n % (p+6)   == 0 || n % (p+8)   == 0 ||
      n % (p+12)  == 0 || n % (p+18)  == 0 || n % (p+20)  == 0 || n % (p+26)  == 0 ||
      n % (p+30)  == 0 || n % (p+32)  == 0 || n % (p+36)  == 0 || n % (p+42)  == 0 ||
      n % (p+48)  == 0 || n % (p+50)  == 0 || n % (p+56)  == 0 || n % (p+60)  == 0 ||
      n % (p+62)  == 0 || n % (p+68)  == 0 || n % (p+72)  == 0 || n % (p+78)  == 0 ||
      n % (p+86)  == 0 || n % (p+90)  == 0 || n % (p+92)  == 0 || n % (p+96)  == 0 ||
      n % (p+98)  == 0 || n % (p+102) == 0 || n % (p+110) == 0 || n % (p+116) == 0 ||
      n % (p+120) == 0 || n % (p+126) == 0 || n % (p+128) == 0 || n % (p+132) == 0 ||
      n % (p+138) == 0 || n % (p+140) == 0 || n % (p+146) == 0 || n % (p+152) == 0 ||
      n % (p+156) == 0 || n % (p+158) == 0 || n % (p+162) == 0 || n % (p+168) == 0 ||
      n % (p+170) == 0 || n % (p+176) == 0 || n % (p+180) == 0 || n % (p+182) == 0 ||
      n % (p+186) == 0 || n % (p+188) == 0 || n % (p+198) == 0 || n % (p+200) == 0
    p += 210    # first prime candidate for next  kth residues group 
  end
  true
end
 
# Benchmarks to test for various size primes
 
p = 541
Benchmark.ips do |b|
    print "\np = #{p}"
    b.report("primep3?") { primep3?(p) }
    b.report("primep5?") { primep5?(p) }
    b.report("primep7?") { primep7?(p) }
    b.compare!
    puts
end
 
p = 1000003
Benchmark.ips do |b|
    print "\np = #{p}"
    b.report("primep3?") { primep3?(p) }
    b.report("primep5?") { primep5?(p) }
    b.report("primep7?") { primep7?(p) }
    b.compare!
    puts
end
 
p = 4294967291            # largest prime < 2**32
Benchmark.ips do |b|
    print "\np = #{p}"
    b.report("primep3?") { primep3?(p) }
    b.report("primep5?") { primep5?(p) }
    b.report("primep7?") { primep7?(p) }
    b.compare!
    puts
end
 
p = (10 ** 16) * 2 + 3
Benchmark.ips do |b|
    print "\np = #{p}"
    b.report("primep3?") { primep3?(p) }
    b.report("primep5?") { primep5?(p) }
    b.report("primep7?") { primep7?(p) }
    b.compare!
    puts
end

====RUBY=====
func is_prime(a) {
  given (a) {
    when (2)                   { true  }
    case (a <= 1 || a.is_even) { false }
    default                    { 3 .. a.isqrt -> any { .divides(a) } -> not }
  }
}

====RUBY=====
func is_prime(n) {
    return (n >= 2) if (n < 4)
    return false if (n%%2 || n%%3)
    for k in (5 .. n.isqrt -> by(6)) {
        return false if (n%%k || n%%(k+2))
    }
    return true
}

====PYTHON=====
def prime(a):
    return not (a < 2 or any(a % x == 0 for x in xrange(2, int(a**0.5) + 1)))

====PYTHON=====
def prime2(a):
    if a == 2: return True
    if a < 2 or a % 2 == 0: return False
    return not any(a % x == 0 for x in xrange(3, int(a**0.5) + 1, 2))

====PYTHON=====
def prime3(a):
    if a < 2: return False
    if a == 2 or a == 3: return True # manually test 2 and 3   
    if a % 2 == 0 or a % 3 == 0: return False # exclude multiples of 2 and 3
 
    maxDivisor = a**0.5
    d, i = 5, 2
    while d <= maxDivisor:
        if a % d == 0: return False
        d += i 
        i = 6 - i # this modifies 2 into 4 and viceversa
 
    return True

====PYTHON=====
>>> import re
>>> def isprime(n):
    return not re.match(r'^1?$|^(11+?)\1+$', '1' * n)
 
>>> # A quick test
>>> [i for i in range(40) if isprime(i)]
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]

