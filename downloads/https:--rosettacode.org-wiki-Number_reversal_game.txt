====RUBY=====
 
SIZE = 9
ordered = (1..SIZE).to_a
shuffled = (1..SIZE).to_a
 
while shuffled == ordered
  shuffled.shuffle!
end
 
score = 0
until shuffled == ordered
  print "#{shuffled} Enter items to reverse: "
 
  next unless guess = gets
  next unless num = guess.to_i?
  next if num < 2 || num > SIZE
 
  shuffled[0, num] = shuffled[0, num].reverse
  score += 1
end
 
puts "#{shuffled} Your score: #{score}"
 

====RUBY=====
ary = (1..9).to_a
ary.shuffle! while ary == ary.sort
score = 0
until ary == ary.sort
  print "#{ary.inspect} -- How many digits to reverse? "
  num = gets.to_i  # should validate input
  ary[0, num] = ary[0, num].reverse
  score += 1
end
p ary
puts "Your score: #{score}"

====RUBY=====
var turn = 0;
var jumble = @(1..9).bshuffle;        # best-shuffle
 
for (turn; jumble != 1..9; ++turn) {
    printf("%2d: %s - Flip how many digits ? ", turn, jumble.join(' '));
    var d = read(Number) \\ break;
    jumble[0 .. d-1] = [jumble[0 .. d-1]].reverse...;
}
 
print "    #{jumble.join(' ')}\n";
print "You won in #{turn} turns.\n";

====PYTHON=====
print '# Number reversal game'
 
var data, trials = list(1..9), 0
 
while data == sort data:
    random.shuffle data
 
while data != sort data:
    trials += 1
    flip = int input '#${trials}: LIST: ${join data} Flip how many?: '
    data[:flip] = reverse data[:flip]
 
print '\nYou took ${trials} attempts to put digits in order!'

====PYTHON=====
'''
number reversal game
    Given a jumbled list of the numbers 1 to 9
    Show the list.
    Ask the player how many digits from the left to reverse.
    Reverse those digits then ask again.
    until all the digits end up in ascending order.
 
'''
 
import random
 
print(__doc__)
data, trials = list('123456789'), 0
while data == sorted(data):
    random.shuffle(data)
while data != sorted(data):
    trials += 1
    flip = int(input('#%2i: LIST: %r Flip how many?: ' % (trials, ' '.join(data))))
    data[:flip] = reversed(data[:flip])
 
print('\nYou took %2i attempts to put the digits in order!' % trials)

