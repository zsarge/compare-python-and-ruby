====RUBY=====
ary = (1..20).to_a.shuffle.each_slice(4).to_a
p ary
 
catch :found_it do
  for row in ary
    for element in row
      print "%2d " % element
      throw :found_it if element == 20
    end
    puts ","
  end
end
 
puts "done"

====RUBY=====
p slices = [*1..20].shuffle.each_slice(4)
 
slices.any? do |slice|
  puts
  slice.any? do |element|
    print "#{element} "
    element == 20
  end
end
puts "done"

====RUBY=====
var arr = 10.of{ 10.of{ 20.irand + 1 } }
 
for row in arr {
    for num in row {
        "%3d".printf(num);
        num == 20 && goto :OUT
    }
    print "\n"
} @:OUT
 
print "\n"

====PYTHON=====
from random import randint
 
def do_scan(mat):
    for row in mat:
        for item in row:
            print item,
            if item == 20:
                print
                return
        print
    print
 
mat = [[randint(1, 20) for x in xrange(10)] for y in xrange(10)]
do_scan(mat)

====PYTHON=====
from random import randint
 
class Found20(Exception):
    pass
 
mat = [[randint(1, 20) for x in xrange(10)] for y in xrange(10)]
 
try:
    for row in mat:
        for item in row:
            print item,
            if item == 20:
                raise Found20
        print
except Found20:
    print

====PYTHON=====
from random import randint
 
mat = [[randint(1, 20) for x in xrange(10)] for y in xrange(10)]
 
found20 = False
for row in mat:
    for item in row:
        print item,
        if item == 20:
            found20 = True
            break
    print
    if found20:
        break

