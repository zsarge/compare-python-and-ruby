====RUBY=====
module Fruits
  APPLE  = 0
  BANANA = 1
  CHERRY = 2
end
 
# It is possible to use a symbol if the value is unrelated.
 
FRUITS = [:apple, :banana, :cherry]
val = :banana
FRUITS.include?(val)      #=> true

====RUBY=====
module Card
  # constants
  SUITS = %i(Clubs Hearts Spades Diamonds)
  SUIT_VALUE = SUITS.each_with_index.to_h               # version 2.1+
# SUIT_VALUE = Hash[ SUITS.each_with_index.to_a ]       # before it
  #=> {:Clubs=>0, :Hearts=>1, :Spades=>2, :Diamonds=>3}
 
  PIPS = %i(2 3 4 5 6 7 8 9 10 Jack Queen King Ace)
  PIP_VALUE = PIPS.each.with_index(2).to_h              # version 2.1+
# PIP_VALUE = Hash[ PIPS.each.with_index(2).to_a ]      # before it
  #=> {:"2"=>2, :"3"=>3, :"4"=>4, :"5"=>5, :"6"=>6, :"7"=>7, :"8"=>8, :"9"=>9, :"10"=>10, :Jack=>11, :Queen=>12, :King=>13, :Ace=>14}
end

====RUBY=====
enum {Apple, Banana, Cherry};   # numbered 0 through 2

====RUBY=====
enum {
    Apple=3,
    Banana,         # gets the value 4
    Cherry="a",
    Orange,         # gets the value "b"
};

====PYTHON=====
>>> from enum import Enum
>>> Contact = Enum('Contact', 'FIRST_NAME, LAST_NAME, PHONE')
>>> Contact.__members__
mappingproxy(OrderedDict([('FIRST_NAME', <Contact.FIRST_NAME: 1>), ('LAST_NAME', <Contact.LAST_NAME: 2>), ('PHONE', <Contact.PHONE: 3>)]))
>>> 
>>> # Explicit
>>> class Contact2(Enum):
	FIRST_NAME = 1
	LAST_NAME = 2
	PHONE = 3
 
 
>>> Contact2.__members__
mappingproxy(OrderedDict([('FIRST_NAME', <Contact2.FIRST_NAME: 1>), ('LAST_NAME', <Contact2.LAST_NAME: 2>), ('PHONE', <Contact2.PHONE: 3>)]))
>>> 

====PYTHON=====
FIRST_NAME, LAST_NAME, PHONE = range(3)

====PYTHON=====
vars().update((key,val) for val,key in enumerate(("FIRST_NAME","LAST_NAME","PHONE")))

