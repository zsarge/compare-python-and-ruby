====RUBY=====
size = 4
secret = ('1'..'9').to_a.sample(size)
guess = [] of Char
 
i = 0
loop do
  i += 1
  loop do
    print "Guess #{i}: "
    guess = gets.not_nil!.chomp.chars
    exit if guess.empty?
 
    break if guess.size == size &&
             guess.all? { |x| ('1'..'9').includes? x } &&
             guess.uniq.size == size
 
    puts "Problem, try again. You need to enter #{size} unique digits from 1 to 9"
  end
 
  if guess == secret
    puts "Congratulations you guessed correctly in #{i} attempts"
    break
  end
 
  bulls = cows = 0
  size.times do |j|
    if guess[j] == secret[j]
      bulls += 1
    elsif secret.includes? guess[j]
      cows += 1
    end
  end
 
  puts "Bulls: #{bulls}; Cows: #{cows}"
end

====RUBY=====
def generate_word(len)
  [*"1".."9"].shuffle.first(len)        # [*"1".."9"].sample(len)  ver 1.9+
end
 
def get_guess(len)
  loop do
    print "Enter a guess: "
    guess = gets.strip
    err = case
          when guess.match(/[^1-9]/)             ; "digits only"
          when guess.length != len               ; "exactly #{len} digits"
          when guess.split("").uniq.length != len; "digits must be unique"
          else return guess.split("")
          end
    puts "the word must be #{len} unique digits between 1 and 9 (#{err}). Try again."
  end
end
 
def score(word, guess)
  bulls = cows = 0
  guess.each_with_index do |num, idx|
    if word[idx] == num
      bulls += 1
    elsif word.include? num
      cows += 1
    end
  end 
  [bulls, cows]
end
 
word_length = 4
puts "I have chosen a number with #{word_length} unique digits from 1 to 9."
word = generate_word(word_length)
count = 0
loop do
  guess = get_guess(word_length)
  count += 1
  break if word == guess
  puts "that guess has %d bulls and %d cows" % score(word, guess)
end
puts "you guessed correctly in #{count} tries."

====RUBY=====
size = 4
secret = [*'1' .. '9'].sample(size)
guess = nil
 
i=0
loop do
  i+=1
  loop do
    print "Guess #{i}: "
    guess = gets.chomp.chars
    exit if guess.empty?
 
    break if guess.size == size and 
             guess.all? { |x| ('1'..'9').include? x } and
             guess.uniq.size == size
 
    puts "Problem, try again. You need to enter #{size} unique digits from 1 to 9"
  end
 
  if guess == secret
    puts "Congratulations you guessed correctly in #{i} attempts"
    break
  end
 
  bulls = cows = 0
  size.times do |j|
    if guess[j] == secret[j]
      bulls += 1
    elsif secret.include? guess[j]
      cows += 1
    end
  end
 
  puts "Bulls: #{bulls}; Cows: #{cows}"
end

====RUBY=====
var size = 4
var num = @(1..9).shuffle.first(size)
 
for (var guesses = 1; true; guesses++) {
 
    var bulls = 0
    var cows  = 0
 
    var input =
        read("Input: ", String).chars           \
                               .uniq            \
                               .grep(/^[1-9]$/) \
                               .map{.to_n}
 
    if (input.len != size) {
        warn "Invalid input!\n"
        guesses--
        next
    }
 
    if (input == num) {
        printf("You did it in %d attempts!\n", guesses)
        break
    }
 
    for i (^num) {
        if (num[i] == input[i]) {
            bulls++
        }
        elsif (num.contains(input[i])) {
            cows++
        }
    }
 
    "Bulls: %d; Cows: %d\n".printf(bulls, cows)
}

====PYTHON=====
'''
 Bulls and cows. A game pre-dating, and similar to, Mastermind.
'''
 
import random
 
digits = '123456789'
size = 4
chosen = ''.join(random.sample(digits,size))
#print chosen # Debug
print '''I have chosen a number from %s unique digits from 1 to 9 arranged in a random order.
You need to input a %i digit, unique digit number as a guess at what I have chosen''' % (size, size)
guesses = 0
while True:
    guesses += 1
    while True:
        # get a good guess
        guess = raw_input('\nNext guess [%i]: ' % guesses).strip()
        if len(guess) == size and \
           all(char in digits for char in guess) \
           and len(set(guess)) == size:
            break
        print "Problem, try again. You need to enter %i unique digits from 1 to 9" % size
    if guess == chosen:
        print '\nCongratulations you guessed correctly in',guesses,'attempts'
        break
    bulls = cows = 0
    for i in range(size):
        if guess[i] == chosen[i]:
            bulls += 1
        elif guess[i] in chosen:
            cows += 1
    print '  %i Bulls\n  %i Cows' % (bulls, cows)

