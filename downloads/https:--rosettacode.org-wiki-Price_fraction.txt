====RUBY=====
def rescale_price_fraction(value)
  raise ArgumentError, "value=#{value}, must have: 0 <= value < 1.01" if value < 0 || value >= 1.01
  if     value < 0.06  then  0.10
  elsif  value < 0.11  then  0.18
  elsif  value < 0.16  then  0.26
  elsif  value < 0.21  then  0.32
  elsif  value < 0.26  then  0.38
  elsif  value < 0.31  then  0.44
  elsif  value < 0.36  then  0.50
  elsif  value < 0.41  then  0.54
  elsif  value < 0.46  then  0.58
  elsif  value < 0.51  then  0.62
  elsif  value < 0.56  then  0.66
  elsif  value < 0.61  then  0.70
  elsif  value < 0.66  then  0.74
  elsif  value < 0.71  then  0.78
  elsif  value < 0.76  then  0.82
  elsif  value < 0.81  then  0.86
  elsif  value < 0.86  then  0.90
  elsif  value < 0.91  then  0.94
  elsif  value < 0.96  then  0.98
  elsif  value < 1.01  then  1.00
  end
end

====RUBY=====
class Price
  ConversionTable = <<-END_OF_TABLE
    >=  0.00  <  0.06  :=  0.10
    >=  0.06  <  0.11  :=  0.18
    >=  0.11  <  0.16  :=  0.26
    >=  0.16  <  0.21  :=  0.32
    >=  0.21  <  0.26  :=  0.38
    >=  0.26  <  0.31  :=  0.44
    >=  0.31  <  0.36  :=  0.50
    >=  0.36  <  0.41  :=  0.54
    >=  0.41  <  0.46  :=  0.58
    >=  0.46  <  0.51  :=  0.62
    >=  0.51  <  0.56  :=  0.66
    >=  0.56  <  0.61  :=  0.70
    >=  0.61  <  0.66  :=  0.74
    >=  0.66  <  0.71  :=  0.78
    >=  0.71  <  0.76  :=  0.82
    >=  0.76  <  0.81  :=  0.86
    >=  0.81  <  0.86  :=  0.90
    >=  0.86  <  0.91  :=  0.94
    >=  0.91  <  0.96  :=  0.98
    >=  0.96  <  1.01  :=  1.00
  END_OF_TABLE
 
  RE = %r{ ([<>=]+) \s* (\d\.\d\d) \s* ([<>=]+) \s* (\d\.\d\d) \D+ (\d\.\d\d) }x
 
  # extract the comparison operators and numbers from the table
  CONVERSION_TABLE = ConversionTable.lines.inject([]) do |table, line| 
    m = line.match(RE) 
    if not m.nil? and m.length == 6
      table << [m[1], m[2].to_f, m[3], m[4].to_f, m[5].to_f] 
    end
    table
  end
 
  MIN_COMP, MIN = CONVERSION_TABLE[0][0..1] 
  MAX_COMP, MAX = CONVERSION_TABLE[-1][2..3]
 
  def initialize(value)
    if (not value.send(MIN_COMP, MIN)) or (not value.send(MAX_COMP, MAX))
      raise ArgumentError, "value=#{value}, must have: #{MIN} #{MIN_COMP} value #{MAX_COMP} #{MAX}"
    end
    @standard_value = CONVERSION_TABLE.find do |comp1, lower, comp2, upper, standard|
      value.send(comp1, lower) and value.send(comp2, upper)
    end.last
  end
  attr_reader :standard_value
end

====RUBY=====
require 'test/unit'
 
class PriceFractionTests < Test::Unit::TestCase
  @@ok_tests = [
    [0.3793, 0.54],
    [0.4425, 0.58],
    [0.0746, 0.18],
    [0.6918, 0.78],
    [0.2993, 0.44],
    [0.5486, 0.66],
    [0.7848, 0.86],
    [0.9383, 0.98],
    [0.2292, 0.38],
  ]
  @@bad_tests = [1.02, -3]
 
  def test_ok
    @@ok_tests.each do |val, exp| 
      assert_equal(exp, rescale_price_fraction(val))
      assert_equal(exp, Price.new(val).standard_value)
    end
    @@bad_tests.each do |val| 
      assert_raise(ArgumentError) {rescale_price_fraction(val)}
      assert_raise(ArgumentError) {Price.new(val).standard_value}
    end
  end
end

====RUBY=====
var table = <<'EOT'.lines.map { .words.grep{.is_numeric}.map{.to_n} }
>=  0.00  <  0.06  :=  0.10
>=  0.06  <  0.11  :=  0.18
>=  0.11  <  0.16  :=  0.26
>=  0.16  <  0.21  :=  0.32
>=  0.21  <  0.26  :=  0.38
>=  0.26  <  0.31  :=  0.44
>=  0.31  <  0.36  :=  0.50
>=  0.36  <  0.41  :=  0.54
>=  0.41  <  0.46  :=  0.58
>=  0.46  <  0.51  :=  0.62
>=  0.51  <  0.56  :=  0.66
>=  0.56  <  0.61  :=  0.70
>=  0.61  <  0.66  :=  0.74
>=  0.66  <  0.71  :=  0.78
>=  0.71  <  0.76  :=  0.82
>=  0.76  <  0.81  :=  0.86
>=  0.81  <  0.86  :=  0.90
>=  0.86  <  0.91  :=  0.94
>=  0.91  <  0.96  :=  0.98
>=  0.96  <  1.01  :=  1.00
EOT
 
func price(money) {
    table.each { |row|
           (row[0] <= money) ->
        && (row[1] >  money) ->
        && return row[2];
    }
    die "Out of range";
}
 
for n in %n(0.3793 0.4425 0.0746 0.6918 0.2993 0.5486 0.7848 0.9383 0.2292) {
    say price(n);
}

====PYTHON=====
>>> import bisect
>>> _cin  = [.06, .11, .16, .21, .26, .31, .36, .41, .46, .51, .56, .61, .66, .71, .76, .81, .86, .91, .96, 1.01]
>>> _cout = [.10, .18, .26, .32, .38, .44, .50, .54, .58, .62, .66, .70, .74, .78, .82, .86, .90, .94, .98, 1.00]
>>> def pricerounder(pricein):
	return _cout[ bisect.bisect_right(_cin, pricein) ]

====PYTHON=====
>>> import bisect
>>> _cin  = [ 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 91, 96, 101]
>>> _cout = [10, 18, 26, 32, 38, 44, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98, 100]
>>> def centsrounder(centsin):
	return _cout[ bisect.bisect_right(_cin, centsin) ]

====PYTHON=====
def bisect_right(a, x, lo=0, hi=None):
    """Return the index where to insert item x in list a, assuming a is sorted.
 
    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.
 
    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    """
 
    if lo < 0:
        raise ValueError('lo must be non-negative')
    if hi is None:
        hi = len(a)
    while lo < hi:
        mid = (lo+hi)//2
        if x < a[mid]: hi = mid
        else: lo = mid+1
    return lo

