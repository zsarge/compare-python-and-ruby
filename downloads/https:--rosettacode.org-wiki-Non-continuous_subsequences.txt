====RUBY=====
class Array
  def func_power_set
    inject([[]]) { |ps,item|    # for each item in the Array
      ps +                      # take the powerset up to now and add
      ps.map { |e| e + [item] } # it again, with the item appended to each element
    }
  end
 
  def non_continuous_subsequences
    func_power_set.reject {|seq| continuous?(seq)}
  end
 
  def continuous?(seq)
    seq.each_cons(2) {|a, b| return false if a.succ != b}
    true
  end
end
 
p (1..3).to_a.non_continuous_subsequences
p (1..4).to_a.non_continuous_subsequences
p (1..5).to_a.non_continuous_subsequences
p ("a".."d").to_a.non_continuous_subsequences

====RUBY=====
class Array
  def continuous?(seq)
    seq.each_cons(2) {|a, b| return false if index(a)+1 != index(b)}
    true
  end
end
 
p %w(a e i o u).non_continuous_subsequences

====RUBY=====
func non_continuous(min, max, subseq=[], has_gap=false) {
 
    static current = [];
 
    range(min, max).each { |i|
        current.push(i);
        has_gap && subseq.append([current...]);
        i < max && non_continuous(i.inc, max, subseq, has_gap);
        current.pop;
        has_gap = current.len;
    }
 
    subseq;
}
 
say non_continuous(1, 3);
say non_continuous(1, 4);
say non_continuous("a", "d");

====PYTHON=====
def ncsub(seq, s=0):
    if seq:
        x = seq[:1]
        xs = seq[1:]
        p2 = s % 2
        p1 = not p2
        return [x + ys for ys in ncsub(xs, s + p1)] + ncsub(xs, s + p2)
    else:
        return [[]] if s >= 3 else []

====PYTHON=====
from sys import argv
import psyco
 
def C(n, k):
    result = 1
    for d in xrange(1, k+1):
        result *= n
        n -= 1
        result /= d
    return result
 
# http://oeis.org/A002662
nsubs = lambda n: sum(C(n, k) for k in xrange(3, n+1))
 
def ncsub(seq):
    n = len(seq)
    result = [None] * nsubs(n)
    pos = 0
 
    for i in xrange(1, 2 ** n):
        S  = []
        nc = False
        for j in xrange(n + 1):
            k = i >> j
            if k == 0:
                if nc:
                    result[pos] = S
                    pos += 1
                break
            elif k % 2:
                S.append(seq[j])
            elif S:
                nc = True
    return result
 
from sys import argv
import psyco
psyco.full()
n = 10 if len(argv) < 2 else int(argv[1])
print len( ncsub(range(1, n)) )

