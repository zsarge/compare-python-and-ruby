====RUBY=====
padovan = Enumerator.new do |y|
  ar = [1, 1, 1]
  loop do
    ar << ar.first(2).sum
    y  << ar.shift
  end
end
 
P, S = 1.324717957244746025960908854, 1.0453567932525329623
def padovan_f(n) = (P**(n-1) / S + 0.5).floor
 
puts "Recurrence Padovan: #{padovan.take(20)}"
puts "Floor function:     #{(0...20).map{|n| padovan_f(n)}}"
 
n = 63
bool =  (0...n).map{|n| padovan_f(n)} == padovan.take(n)
puts "Recurrence and floor function are equal upto #{n}: #{bool}."
puts
 
def l_system(axiom = "A", rules = {"A" => "B", "B" => "C", "C" => "AB"} )
  return enum_for(__method__,  axiom, rules) unless block_given? 
  loop do
    yield axiom 
    axiom = axiom.chars.map{|c| rules[c] }.join
  end
end
 
puts "First 10 elements of L-system: #{l_system.take(10).join(", ")} "
n = 32
bool = l_system.take(n).map(&:size) == padovan.take(n)
puts "Sizes of first #{n} l_system strings equal to recurrence padovan? #{bool}."
 

====PYTHON=====
from math import floor
from collections import deque
from typing import Dict, Generator
 
 
def padovan_r() -> Generator[int, None, None]:
    last = deque([1, 1, 1], 4)
    while True:
        last.append(last[-2] + last[-3])
        yield last.popleft()
 
_p, _s = 1.324717957244746025960908854, 1.0453567932525329623
 
def padovan_f(n: int) -> int:
    return floor(_p**(n-1) / _s + .5)
 
def padovan_l(start: str='A',
             rules: Dict[str, str]=dict(A='B', B='C', C='AB')
             ) -> Generator[str, None, None]:
    axiom = start
    while True:
        yield axiom
        axiom = ''.join(rules[ch] for ch in axiom)
 
 
if __name__ == "__main__":
    from itertools import islice
 
    print("The first twenty terms of the sequence.")
    print(str([padovan_f(n) for n in range(20)])[1:-1])
 
    r_generator = padovan_r()
    if all(next(r_generator) == padovan_f(n) for n in range(64)):
        print("\nThe recurrence and floor based algorithms match to n=63 .")
    else:
        print("\nThe recurrence and floor based algorithms DIFFER!")
 
    print("\nThe first 10 L-system string-lengths and strings")
    l_generator = padovan_l(start='A', rules=dict(A='B', B='C', C='AB'))
    print('\n'.join(f"  {len(string):3} {repr(string)}"
                    for string in islice(l_generator, 10)))
 
    r_generator = padovan_r()
    l_generator = padovan_l(start='A', rules=dict(A='B', B='C', C='AB'))
    if all(len(next(l_generator)) == padovan_f(n) == next(r_generator)
           for n in range(32)):
        print("\nThe L-system, recurrence and floor based algorithms match to n=31 .")
    else:
        print("\nThe L-system, recurrence and floor based algorithms DIFFER!")

====PYTHON=====
'''Padovan series'''
 
from itertools import chain, islice
from math import floor
from operator import eq
 
 
# padovans :: [Int]
def padovans():
    '''Non-finite series of Padovan numbers,
       defined in terms of recurrence relations.
    '''
    def recurrence(abc):
        a, b, c = abc
        return a, (b, c, a + b)
 
    return unfoldr(recurrence)(
        (1, 1, 1)
    )
 
 
# padovanFloor :: [Int]
def padovanFloor():
    '''The Padovan series, defined in terms
       of a floor function.
    '''
    p = 1.324717957244746025960908854
    s = 1.0453567932525329623
 
    def f(n):
        return floor(p ** (n - 1) / s + 0.5), 1 + n
 
    return unfoldr(f)(0)
 
 
# padovanLSystem : [Int]
def padovanLSystem():
    '''An L-system generating terms whose lengths
       are the values of the Padovan integer series.
    '''
    def rule(c):
        return 'B' if 'A' == c else (
            'C' if 'B' == c else 'AB'
        )
 
    def f(s):
        return s, ''.join(list(concatMap(rule)(s)))
 
    return unfoldr(f)('A')
 
 
# ------------------------- TEST -------------------------
 
# prefixesMatch :: [a] -> [a] -> Bool
def prefixesMatch(xs, ys, n):
    '''True if the first n items of each
       series are the same.
    '''
    return all(map(eq, take(n)(xs), ys))
 
 
# main :: IO ()
def main():
    '''Test three Padovan functions for
       equivalence and expected results.
    '''
    print('\n'.join([
        "First 20 padovans:\n",
        repr(take(20)(padovans())),
 
        "\nThe recurrence and floor-based functions" + (
            " match over 64 terms:\n"
        ),
        repr(prefixesMatch(
            padovans(),
            padovanFloor(),
            64
        )),
 
        "\nFirst 10 L-System strings:\n",
        repr(take(10)(padovanLSystem())),
 
        "\nThe lengths of the first 32 L-System strings",
        "match the Padovan sequence:\n",
        repr(prefixesMatch(
            padovans(),
            (len(x) for x in padovanLSystem()),
            32
        ))
    ]))
 
 
# ----------------------- GENERIC ------------------------
 
# concatMap :: (a -> [b]) -> [a] -> [b]
def concatMap(f):
    '''A concatenated map'''
    def go(xs):
        return chain.from_iterable(map(f, xs))
    return go
 
 
# unfoldr :: (b -> Maybe (a, b)) -> b -> [a]
def unfoldr(f):
    '''A lazy (generator) list unfolded from a seed value
       by repeated application of f until no residue remains.
       Dual to fold/reduce.
       f returns either None, or just (value, residue).
       For a strict output list, wrap the result with list()
    '''
    def go(x):
        valueResidue = f(x)
        while None is not valueResidue:
            yield valueResidue[0]
            valueResidue = f(valueResidue[1])
    return go
 
 
# take :: Int -> [a] -> [a]
# take :: Int -> String -> String
def take(n):
    '''The prefix of xs of length n,
       or xs itself if n > length xs.
    '''
    def go(xs):
        return (
            xs[0:n]
            if isinstance(xs, (list, tuple))
            else list(islice(xs, n))
        )
    return go
 
 
# MAIN ---
if __name__ == '__main__':
    main()

