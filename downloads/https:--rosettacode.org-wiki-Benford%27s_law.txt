====RUBY=====
require "big"
 
EXPECTED = (1..9).map{ |d| Math.log10(1 + 1.0 / d) }
 
def fib(n)
  a, b = 0.to_big_i, 1.to_big_i
  (0...n).map { ret, a, b = a, b, a + b; ret }
end
 
# powers of 3 as a test sequence
def power_of_threes(n)
  (0...n).map { |k| 3.to_big_i ** k }
end
 
def heads(s)
  s.map { |a| a.to_s[0].to_i }
end
 
def show_dist(title, s)
  s = heads(s)
  c = Array.new(10, 0)
  s.each{ |x| c[x] += 1 }
  siz = s.size
  res = (1..9).map{ |d| c[d] / siz }
  puts "\n    %s Benfords deviation" % title
  res.zip(EXPECTED).each_with_index(1) do |(r, e), i|
    puts "%2d: %5.1f%%  %5.1f%%  %5.1f%%" % [i, r*100, e*100, (r - e).abs*100]
  end
end
 
def random(n)
  (0...n).map { |i| rand(1..n) }
end
 
show_dist("fibbed", fib(1000))
show_dist("threes", power_of_threes(1000))
 
# just to show that not all kind-of-random sets behave like that
show_dist("random", random(10000))

====RUBY=====
EXPECTED = (1..9).map{|d| Math.log10(1+1.0/d)}
 
def fib(n)
  a,b = 0,1
  n.times.map{ret, a, b = a, b, a+b; ret}
end
 
# powers of 3 as a test sequence
def power_of_threes(n)
  n.times.map{|k| 3**k}
end
 
def heads(s)
  s.map{|a| a.to_s[0].to_i}
end
 
def show_dist(title, s)
  s = heads(s)
  c = Array.new(10, 0)
  s.each{|x| c[x] += 1}
  size = s.size.to_f
  res = (1..9).map{|d| c[d]/size}
  puts "\n    %s Benfords deviation" % title
  res.zip(EXPECTED).each.with_index(1) do |(r, e), i|
    puts "%2d: %5.1f%%  %5.1f%%  %5.1f%%" % [i, r*100, e*100, (r - e).abs*100]
  end
end
 
def random(n)
  n.times.map{rand(1..n)}
end
 
show_dist("fibbed", fib(1000))
show_dist("threes", power_of_threes(1000))
 
# just to show that not all kind-of-random sets behave like that
show_dist("random", random(10000))

====RUBY=====
var (actuals, expected) = ([], [])
var fibonacci = 1000.of {|i| fib(i).digit(0) }
 
for i (1..9) {
    var num = fibonacci.count_by {|j| j == i }
    actuals.append(num / 1000)
    expected.append(1 + (1/i) -> log10)
}
 
"%17s%17s\n".printf("Observed","Expected")
for i (1..9) {
    "%d : %11s %%%15s %%\n".printf(
            i, "%.2f".sprintf(100 *  actuals[i - 1]),
               "%.2f".sprintf(100 * expected[i - 1]),
    )
}

====PYTHON=====
from __future__ import division
from itertools import islice, count
from collections import Counter
from math import log10
from random import randint
 
expected = [log10(1+1/d) for d in range(1,10)]
 
def fib():
    a,b = 1,1
    while True:
        yield a
        a,b = b,a+b
 
# powers of 3 as a test sequence
def power_of_threes():
    return (3**k for k in count(0))
 
def heads(s):
    for a in s: yield int(str(a)[0])
 
def show_dist(title, s):
    c = Counter(s)
    size = sum(c.values())
    res = [c[d]/size for d in range(1,10)]
 
    print("\n%s Benfords deviation" % title)
    for r, e in zip(res, expected):
        print("%5.1f%% %5.1f%%  %5.1f%%" % (r*100., e*100., abs(r - e)*100.))
 
def rand1000():
    while True: yield randint(1,9999)
 
if __name__ == '__main__':
    show_dist("fibbed", islice(heads(fib()), 1000))
    show_dist("threes", islice(heads(power_of_threes()), 1000))
 
    # just to show that not all kind-of-random sets behave like that
    show_dist("random", islice(heads(rand1000()), 10000))

