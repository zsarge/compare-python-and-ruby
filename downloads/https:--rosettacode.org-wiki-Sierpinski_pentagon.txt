====RUBY=====
 
THETA = Math::PI * 2 / 5
SCALE_FACTOR = (3 - Math.sqrt(5)) / 2
MARGIN = 20
 
attr_reader :pentagons, :renderer
def settings
  size(400, 400)
end
 
def setup
  sketch_title 'Pentaflake'
  radius = width / 2 - 2 * MARGIN
  center = Vec2D.new(radius - 2 * MARGIN, 3 * MARGIN)
  pentaflake = Pentaflake.new(center, radius, 5)
  @pentagons = pentaflake.pentagons
end
 
def draw
  background(255)
  stroke(0)
  pentagons.each do |penta|
    draw_pentagon(penta)
  end
  no_loop
end
 
def draw_pentagon(pent)
  points = pent.vertices
  begin_shape
  points.each do |pnt|
    pnt.to_vertex(renderer)
  end
  end_shape(CLOSE)
end
 
def renderer
  @renderer ||= GfxRender.new(self.g)
end
 
 
class Pentaflake
  attr_reader :pentagons
 
  def initialize(center, radius, depth)
    @pentagons = []
    create_pentagons(center, radius, depth)
  end
 
  def create_pentagons(center, radius, depth)
    if depth.zero?
      pentagons << Pentagon.new(center, radius)
    else
      radius *= SCALE_FACTOR
      distance = radius * Math.sin(THETA) * 2
      (0..4).each do |idx|
        x = center.x + Math.cos(idx * THETA) * distance
        y = center.y + Math.sin(idx * THETA) * distance
        center = Vec2D.new(x, y)
        create_pentagons(center, radius, depth - 1)
      end
    end
  end
end
 
class Pentagon
  attr_reader :center, :radius
 
  def initialize(center, radius)
    @center = center
    @radius = radius
  end
 
  def vertices
    (0..4).map do |idx|
      center + Vec2D.new(radius * Math.sin(THETA * idx), radius * Math.cos(THETA * idx))
    end
  end
end
 
 

====RUBY=====
define order = 5
define sides = 5
define dim   = 500
define scaling_factor = ((3 - 5**0.5) / 2)
var orders = order.of {|i| ((1-scaling_factor) * dim) * scaling_factor**i }
 
say <<"STOP";
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
    "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg height="#{dim*2}" width="#{dim*2}"
    style="fill:blue" transform="translate(#{dim},#{dim}) rotate(-18)"
    version="1.1" xmlns="http://www.w3.org/2000/svg">
STOP
 
var vertices = sides.of {|i| Complex(0, i * Number.tau / sides).exp }
 
for i in ^(sides**order) {
   var vector = ([vertices["%#{order}d" % i.base(sides) -> chars]] »*« orders «+»)
   var points = (vertices »*» orders[-1]*(1-scaling_factor) »+» vector »reals()» «%« '%0.3f')
   say ('<polygon points="' + points.join(' ') + '"/>')
}
 
say '</svg>'

====PYTHON=====
from turtle import *
import math
speed(0)      # 0 is the fastest speed. Otherwise, 1 (slow) to 10 (fast)
hideturtle()  # hide the default turtle
 
part_ratio = 2 * math.cos(math.radians(72))
side_ratio = 1 / (part_ratio + 2)
 
hide_turtles = True   # show/hide turtles as they draw
path_color = "black"  # path color
fill_color = "black"  # fill color
 
# turtle, size
def pentagon(t, s):
  t.color(path_color, fill_color)
  t.pendown()
  t.right(36)
  t.begin_fill()
  for i in range(5):
    t.forward(s)
    t.right(72)
  t.end_fill()
 
# iteration, turtle, size
def sierpinski(i, t, s):
  t.setheading(0)
  new_size = s * side_ratio
 
  if i > 1:
    i -= 1
 
    # create four more turtles
    for j in range(4):
      t.right(36)
      short = s * side_ratio / part_ratio
      dist = [short, s, s, short][j]
 
      # spawn a turtle
      spawn = Turtle()
      if hide_turtles:spawn.hideturtle()
      spawn.penup()
      spawn.setposition(t.position())
      spawn.setheading(t.heading())
      spawn.forward(dist)
 
      # recurse for spawned turtles
      sierpinski(i, spawn, new_size)
 
    # recurse for parent turtle
    sierpinski(i, t, new_size)
 
  else:
    # draw a pentagon
    pentagon(t, s)
    # delete turtle
    del t
 
def main():
  t = Turtle()
  t.hideturtle()
  t.penup()
  screen = t.getscreen()
  y = screen.window_height()
  t.goto(0, y/2-20)
 
  i = 5       # depth. i >= 1
  size = 300  # side length
 
  # so the spawned turtles move only the distance to an inner pentagon
  size *= part_ratio
 
  # begin recursion
  sierpinski(i, t, size)
 
main()

