====RUBY=====
def divisor_count(n)
    total = 1
    # Deal with powers of 2 first
    while n % 2 == 0 do
        total = total + 1
        n = n >> 1
    end
    # Odd prime factors up to the square root
    p = 3
    while p * p <= n do
        count = 1
        while n % p == 0 do
            count = count + 1
            n = n / p
        end
        total = total * count
        p = p + 2
    end
    # If n > 1 then it's prime
    if n > 1 then
        total = total * 2
    end
    return total
end
 
def divisor_product(n)
    return (n ** (divisor_count(n) / 2.0)).floor
end
 
LIMIT = 50
print "Product of divisors for the first ", LIMIT, " positive integers:\n"
for n in 1 .. LIMIT
    print "%11d" % [divisor_product(n)]
    if n % 5 == 0 then
        print "\n"
    end
end

====PYTHON=====
def product_of_divisors(n):
    assert(isinstance(n, int) and 0 < n)
    ans = i = j = 1
    while i*i <= n:
        if 0 == n%i:
            ans *= i
            j = n//i
            if j != i:
                ans *= j
        i += 1
    return ans
 
if __name__ == "__main__":
    print([product_of_divisors(n) for n in range(1,51)])

====PYTHON=====
'''Sums and products of divisors'''
 
from math import floor, sqrt
from functools import reduce
from operator import add, mul
 
 
# divisors :: Int -> [Int]
def divisors(n):
    '''List of all divisors of n including n itself.
    '''
    root = floor(sqrt(n))
    lows = [x for x in range(1, 1 + root) if 0 == n % x]
    return lows + [n // x for x in reversed(lows)][
        (1 if n == (root * root) else 0):
    ]
 
 
# ------------------------- TEST -------------------------
# main :: IO ()
def main():
    '''Product and sums of divisors for each integer in range [1..50]
    '''
    print('Products of divisors:')
    for n in range(1, 1 + 50):
        print(n, '->', reduce(mul, divisors(n), 1))
 
    print('Sums of divisors:')
    for n in range(1, 1 + 100):
        print(n, '->', reduce(add, divisors(n), 0))
 
 
# MAIN ---
if __name__ == '__main__':
    main()

