====RUBY=====
class T
  def name
    "T"
  end
end
 
class S
  def name
    "S"
  end
end
 
obj1 = T.new
obj2 = S.new
puts obj1.dup.name # prints "T"
puts obj2.dup.name # prints "S"

====RUBY=====
class T(value) {
    method display {
        say value;
    }
}
 
class S(value) < T {
    method display {
        say value;
    }
}
 
var obj1 = T("T");
var obj2 = S("S");
var obj3 = obj2.dclone;         # make a deep clone of obj2
 
obj1.value = "foo";             # change the value of obj1
obj2.value = "bar";             # change the value of obj2
 
obj1.display;                   # prints "foo"
obj2.display;                   # prints "bar"
obj3.display;                   # prints "S"

====PYTHON=====
import copy
 
class T:
   def classname(self): 
      return self.__class__.__name__
 
   def __init__(self):
      self.myValue = "I'm a T."
 
   def speak(self):
      print self.classname(), 'Hello', self.myValue
 
   def clone(self):
      return copy.copy(self)
 
class S1(T):
   def speak(self):
      print self.classname(),"Meow", self.myValue
 
class S2(T):
   def speak(self):
      print self.classname(),"Woof", self.myValue
 
 
print "creating initial objects of types S1, S2, and T"
a = S1()
a.myValue = 'Green'
a.speak()
 
b = S2()
b.myValue = 'Blue'
b.speak()
 
u = T()
u.myValue = 'Purple'
u.speak()
 
print "Making copy of a as u, colors and types should match"
u = a.clone()
u.speak()
a.speak()
print "Assigning new color to u, A's color should be unchanged."
u.myValue = "Orange"
u.speak()
a.speak()
 
print "Assigning u to reference same object as b, colors and types should match"
u = b
u.speak()
b.speak()
print "Assigning new color to u. Since u,b references same object b's color changes as well"
u.myValue = "Yellow"
u.speak()
b.speak()

====PYTHON=====
import cPickle as pickle
 
source = {'a': [1, 2.0, 3, 4+6j],
         'b': ('string', u'Unicode string'),
         'c': None}
 
target = pickle.loads(pickle.dumps(source))

====PYTHON=====
target = source.__class__()  # Create an object of the same type
if hasattr(source, 'items') and callable(source.items):
    for key,value in source.items:
        target[key] = value
elif hasattr(source, '__len__'):
    target = source[:]
else:  # Following is not recommended. (see below).
    target = source

