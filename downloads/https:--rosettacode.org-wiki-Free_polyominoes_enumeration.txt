====RUBY=====
require 'set'
 
def translate2origin(poly)
  # Finds the min x and y coordiate of a Polyomino.
  minx = poly.map(&:first).min
  miny = poly.map(&:last).min
  poly.map{|x,y| [x - minx, y - miny]}.sort
end
 
def rotate90(x,y) [y, -x] end
def reflect(x,y)  [-x, y] end
 
# All the plane symmetries of a rectangular region.
def rotations_and_reflections(poly)
  [poly,
   poly = poly.map{|x,y| rotate90(x,y)},
   poly = poly.map{|x,y| rotate90(x,y)},
   poly = poly.map{|x,y| rotate90(x,y)},
   poly = poly.map{|x,y| reflect(x,y)},
   poly = poly.map{|x,y| rotate90(x,y)},
   poly = poly.map{|x,y| rotate90(x,y)},
          poly.map{|x,y| rotate90(x,y)} ]
end
 
def canonical(poly)
  rotations_and_reflections(poly).map{|pl| translate2origin(pl)}
end
 
# All four points in Von Neumann neighborhood.
def contiguous(x,y)
  [[x - 1, y], [x + 1, y], [x, y - 1], [x, y + 1]]
end
 
# Finds all distinct points that can be added to a Polyomino.
def new_points(poly)
  points = []
  poly.each{|x,y| contiguous(x,y).each{|point| points << point}}
  (points - poly).uniq
end
 
def new_polys(polys)
  pattern = Set.new
  polys.each_with_object([]) do |poly, polyomino|
    new_points(poly).each do |point|
      next if pattern.include?(pl = translate2origin(poly + [point]))
      polyomino << canonical(pl).each{|p| pattern << p}.min
    end
  end
end
 
# Generates polyominoes of rank n recursively.
def rank(n)
  case n
  when 0 then [[]]
  when 1 then [[[0,0]]]
  else        new_polys(rank(n-1))
  end
end
 
# Generates a textual representation of a Polyomino.
def text_representation(poly)
  table = Hash.new(' ')
  poly.each{|x,y| table[[x,y]] = '#'}
  maxx = poly.map(&:first).max
  maxy = poly.map(&:last).max
  (0..maxx).map{|x| (0..maxy).map{|y| table[[x,y]]}.join}
end
 
p (0..10).map{|n| rank(n).size}
n = ARGV[0] ? ARGV[0].to_i : 5
puts "\nAll free polyominoes of rank %d:" % n
rank(n).sort.each{|poly| puts text_representation(poly),""}

====RUBY=====
func translate2origin(poly) {
  # Finds the min x and y coordiate of a Polyomino.
  var minx = poly.map(:head).min
  var miny = poly.map(:tail).min
  poly.map {|p| [p.head-minx, p.tail-miny] }.sort
}
 
func rotate90(x,y) { [y, -x] }
func reflect(x,y)  { [-x, y] }
 
# All the plane symmetries of a rectangular region.
func rotations_and_reflections(poly) {
    gather {
        take(poly)
        take(poly.map!{ rotate90(_...) })
        take(poly.map!{ rotate90(_...) })
        take(poly.map!{ rotate90(_...) })
        take(poly.map!{  reflect(_...) })
        take(poly.map!{ rotate90(_...) })
        take(poly.map!{ rotate90(_...) })
        take(poly.map!{ rotate90(_...) })
    }
}
 
func canonical(poly) {
  rotations_and_reflections(poly).map{|pl| translate2origin(pl) }
}
 
# All four points in Von Neumann neighborhood.
func contiguous(x, y) {
  [[x-1, y], [x+1, y], [x, y-1], [x, y+1]]
}
 
# Finds all distinct points that can be added to a Polyomino.
func new_points(poly) {
  var points = Set()
  poly.each { points << contiguous(_...)... }
  points - poly
}
 
func new_polys(polys) {
  var pattern = Set()
  polys.map { |poly|
    gather {
      new_points(poly).each { |point|
        var pl = translate2origin(poly + [point])
        next if pattern.has(pl)
        take canonical(pl).each{ pattern << _ }.min
      }
    }...
  }
}
 
# Generates polyominoes of rank n recursively.
func rank(n) {
  given (n) {
    when (0) { [[]] }
    when (1) { [[[0,0]]] }
    else     { new_polys(rank(n-1)) }
  }
}
 
# Generates a textual representation of a Polyomino.
func text_representation(poly) {
  var table = Hash()
  for x,y in (poly) { table{[x,y]} = '#' }
  var maxx = poly.map(:head).max
  var maxy = poly.map(:tail).max
  (0..maxx).map{|x| (0..maxy).map{|y| table{[x,y]} \\ ' ' }.join }
}
 
say 8.of { rank(_).len }
 
var n = (ARGV[0] ? ARGV[0].to_i : 5)
say ("\nAll free polyominoes of rank %d:" % n)
rank(n).sort.each{|poly| say text_representation(poly).join("\n")+"\n" }

====PYTHON=====
from itertools import imap, imap, groupby, chain, imap
from operator import itemgetter
from sys import argv
from array import array
 
def concat_map(func, it):
    return list(chain.from_iterable(imap(func, it)))
 
def minima(poly):
    """Finds the min x and y coordiate of a Polyomino."""
    return (min(pt[0] for pt in poly), min(pt[1] for pt in poly))
 
def translate_to_origin(poly):
    (minx, miny) = minima(poly)
    return [(x - minx, y - miny) for (x, y) in poly]
 
rotate90   = lambda (x, y): ( y, -x)
rotate180  = lambda (x, y): (-x, -y)
rotate270  = lambda (x, y): (-y,  x)
reflect    = lambda (x, y): (-x,  y)
 
def rotations_and_reflections(poly):
    """All the plane symmetries of a rectangular region."""
    return (poly,
            map(rotate90, poly),
            map(rotate180, poly),
            map(rotate270, poly),
            map(reflect, poly),
            [reflect(rotate90(pt)) for pt in poly],
            [reflect(rotate180(pt)) for pt in poly],
            [reflect(rotate270(pt)) for pt in poly])
 
def canonical(poly):
    return min(sorted(translate_to_origin(pl)) for pl in rotations_and_reflections(poly))
 
def unique(lst):
    lst.sort()
    return map(next, imap(itemgetter(1), groupby(lst)))
 
# All four points in Von Neumann neighborhood.
contiguous = lambda (x, y): [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]
 
def new_points(poly):
    """Finds all distinct points that can be added to a Polyomino."""
    return unique([pt for pt in concat_map(contiguous, poly) if pt not in poly])
 
def new_polys(poly):
    return unique([canonical(poly + [pt]) for pt in new_points(poly)])
 
monomino = [(0, 0)]
monominoes = [monomino]
 
def rank(n):
    """Generates polyominoes of rank n recursively."""
    assert n >= 0
    if n == 0: return []
    if n == 1: return monominoes
    return unique(concat_map(new_polys, rank(n - 1)))
 
def text_representation(poly):
    """Generates a textual representation of a Polyomino."""
    min_pt = minima(poly)
    max_pt = (max(p[0] for p in poly), max(p[1] for p in poly))
    table = [array('c', ' ') * (max_pt[1] - min_pt[1] + 1)
             for _ in xrange(max_pt[0] - min_pt[0] + 1)]
    for pt in poly:
        table[pt[0] - min_pt[0]][pt[1] - min_pt[1]] = '#'
    return "\n".join(row.tostring() for row in table)
 
def main():
    print [len(rank(n)) for n in xrange(1, 11)]
 
    n = int(argv[1]) if (len(argv) == 2) else 5
    print "\nAll free polyominoes of rank %d:" % n
 
    for poly in rank(n):
        print text_representation(poly), "\n"
 
main()

