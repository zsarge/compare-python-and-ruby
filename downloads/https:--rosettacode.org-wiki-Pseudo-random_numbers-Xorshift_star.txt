====RUBY=====
class Xorshift_star
  MASK64 = (1 << 64) - 1
  MASK32 = (1 << 32) - 1
 
  def initialize(seed = 0) = @state = seed & MASK64
 
  def next_int
    x = @state
    x =  x ^ (x >> 12) 
    x = (x ^ (x << 25)) & MASK64
    x =  x ^ (x >> 27) 
    @state = x
    (((x * 0x2545F4914F6CDD1D) & MASK64) >> 32) & MASK32
  end
 
  def next_float = next_int.fdiv((1 << 32))
 
end
 
random_gen =  Xorshift_star.new(1234567)
5.times{ puts random_gen.next_int}
 
random_gen = Xorshift_star.new(987654321)
tally      = Hash.new(0)
100_000.times{ tally[(random_gen.next_float*5).floor] += 1 }
puts tally.sort.map{|ar| ar.join(": ") }

====RUBY=====
class Xorshift_star(state) {
 
    define (
        mask32 = (2**32 - 1),
        mask64 = (2**64 - 1),
    )
 
    method next_int {
        state ^= (state >> 12)
        state ^= (state << 25 & mask64)
        state ^= (state >> 27)
        (state * 0x2545F4914F6CDD1D) >> 32 & mask32
    }
 
    method next_float {
        self.next_int / (mask32+1)
    }
}
 
say 'Seed: 1234567, first 5 values:';
var rng = Xorshift_star(1234567)
say 5.of { rng.next_int }
 
say "\nSeed: 987654321, values histogram:";
var rng = Xorshift_star(987654321)
var histogram = Bag(1e5.of { floor(5*rng.next_float) }...)
histogram.pairs.sort.each { .join(": ").say }

====PYTHON=====
mask64 = (1 << 64) - 1
mask32 = (1 << 32) - 1
const = 0x2545F4914F6CDD1D
 
 
 
class Xorshift_star():
 
    def __init__(self, seed=0):
        self.state = seed & mask64
 
    def seed(self, num):
        self.state =  num & mask64
 
    def next_int(self):
        "return random int between 0 and 2**32"
        x = self.state
        x = (x ^ (x >> 12)) & mask64
        x = (x ^ (x << 25)) & mask64
        x = (x ^ (x >> 27)) & mask64
        self.state = x
        answer = (((x * const) & mask64) >> 32) & mask32 
        return answer
 
    def  next_float(self):
        "return random float between 0 and 1"
        return self.next_int() / (1 << 32)
 
 
if __name__ == '__main__':
    random_gen = Xorshift_star()
    random_gen.seed(1234567)
    for i in range(5):
        print(random_gen.next_int())
 
    random_gen.seed(987654321)
    hist = {i:0 for i in range(5)}
    for i in range(100_000):
        hist[int(random_gen.next_float() *5)] += 1
    print(hist)

