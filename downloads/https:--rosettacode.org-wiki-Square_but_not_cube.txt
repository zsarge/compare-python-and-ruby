====RUBY=====
#!/usr/bin/env ruby
 
class PowIt
	:next
 
	def initialize
		@next = 1;
	end
end
 
class SquareIt < PowIt
	def next
		result = @next ** 2
		@next += 1
		return result
	end
end
 
class CubeIt < PowIt
	def next
		result = @next ** 3
		@next += 1
		return result
	end
end
 
squares = []
hexponents = []
 
squit = SquareIt.new
cuit = CubeIt.new
 
s = squit.next
c = cuit.next
 
while (squares.length < 30 || hexponents.length < 3)
	if s < c
		squares.push(s) if squares.length < 30
		s = squit.next
	elsif s == c
		hexponents.push(s) if hexponents.length < 3
		s = squit.next
		c = cuit.next
	else
		c = cuit.next
	end
end
 
puts "Squares:"
puts squares.join(" ")
 
puts "Square-and-cubes:"
puts hexponents.join(" ")

====RUBY=====
squares = Enumerator.new {|y| 1.step{|n| y << n*n} }
 
puts "Square cubes: %p
Square non-cubes: %p" % squares.take(33).partition{|sq| Math.cbrt(sq).to_i ** 3 == sq }

====RUBY=====
var square_and_cube = Enumerator({|f|
    1..Inf -> each {|n| f(n**6) }
})
 
var square_but_not_cube = Enumerator({|f|
    1..Inf -> lazy.map {|n| n**2 }.grep {|n| !n.is_power(3) }.each {|n| f(n) }
})
 
say "First 30 positive integers that are a square but not a cube:"
say square_but_not_cube.first(30).join(' ')
 
say "First 15 positive integers that are both a square and a cube:"
say square_and_cube.first(15).join(' ')

====PYTHON=====
# nonCubeSquares :: Int -> [(Int, Bool)]
def nonCubeSquares(n):
    upto = enumFromTo(1)
    ns = upto(n)
    setCubes = set(x ** 3 for x in ns)
    ms = upto(n + len(set(x * x for x in ns).intersection(
        setCubes
    )))
    return list(tuple([x * x, x in setCubes]) for x in ms)
 
 
# squareListing :: [(Int, Bool)] -> [String]
def squareListing(xs):
    justifyIdx = justifyRight(len(str(1 + len(xs))))(' ')
    justifySqr = justifyRight(1 + len(str(xs[-1][0])))(' ')
    return list(
        '(' + str(1 + idx) + '^2 = ' + str(n) +
        ' = ' + str(round(n ** (1 / 3))) + '^3)' if bln else (
            justifyIdx(1 + idx) + ' ->' +
            justifySqr(n)
        )
        for idx, (n, bln) in enumerate(xs)
    )
 
 
def main():
    print(
        unlines(
            squareListing(
                nonCubeSquares(30)
            )
        )
    )
 
 
# GENERIC ------------------------------------------------------------------
 
# enumFromTo :: Int -> Int -> [Int]
def enumFromTo(m):
    return lambda n: list(range(m, 1 + n))
 
 
# justifyRight :: Int -> Char -> String -> String
def justifyRight(n):
    return lambda cFiller: lambda a: (
        ((n * cFiller) + str(a))[-n:]
    )
 
 
# unlines :: [String] -> String
def unlines(xs):
    return '\n'.join(xs)
 
 
main()

