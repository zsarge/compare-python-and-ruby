====RUBY=====
func kronecker_product (a, b) { a ~X b -> map { _[0] ~X* _[1] } }
 
func kronecker_fractal(pattern, order=4) {
    var kronecker = pattern
    { kronecker = kronecker_product(kronecker, pattern) } * order
    return kronecker
}
 
var vicsek = [[0,1,0], [1,1,1], [0,1,0]]
var carpet = [[1,1,1], [1,0,1], [1,1,1]]
var six    = [[0,1,1,1,0], [1,0,0,0,1], [1,0,0,0,0],
              [1,1,1,1,0], [1,0,0,0,1], [1,0,0,0,1], [0,1,1,1,0]]
 
require("Imager")
 
for name,shape,order in [
    [:vicsek, vicsek, 4],
    [:carpet, carpet, 4],
    [:six,    six,    3],
] {
    var pat = kronecker_fractal(shape, order)
    var img = %O<Imager>.new(xsize => pat[0].len, ysize => pat.len)
    for x,y in (^pat[0].len ~X ^pat.len) {
        img.setpixel(x => x, y => y, color => (pat[y][x] ? <255 255 32> : <16 16 16>))
    }
    img.write(file => "kronecker-#{name}-sidef.png")
}

====PYTHON=====
import os
from PIL import Image
 
 
def imgsave(path, arr):
    w, h = len(arr), len(arr[0])
    img = Image.new('1', (w, h))
    for x in range(w):
        for y in range(h):
            img.putpixel((x, y), arr[x][y])
    img.save(path)
 
 
def get_shape(mat):
    return len(mat), len(mat[0])
 
 
def kron(matrix1, matrix2):
    """
    Calculate the kronecker product of two matrices
    """
    final_list = []
 
    count = len(matrix2)
 
    for elem1 in matrix1:
        for i in range(count):
            sub_list = []
            for num1 in elem1:
                for num2 in matrix2[i]:
                    sub_list.append(num1 * num2)
            final_list.append(sub_list)
 
    return final_list
 
 
def kronpow(mat):
    """
    Generate an arbitrary number of kronecker powers
    """
    matrix = mat
    while True:
        yield matrix
        matrix = kron(mat, matrix)
 
 
def fractal(name, mat, order=6):
    """
    Save fractal as jpg to 'fractals/name'
    """
    path = os.path.join('fractals', name)
    os.makedirs(path, exist_ok=True)
 
    fgen = kronpow(mat)
    print(name)
    for i in range(order):
        p = os.path.join(path, f'{i}.jpg')
        print('Calculating n =', i, end='\t', flush=True)
 
        mat = next(fgen)
        imgsave(p, mat)
 
        x, y = get_shape(mat)
        print('Saved as', x, 'x', y, 'image', p)
 
 
test1 = [
    [0, 1, 0],
    [1, 1, 1],
    [0, 1, 0]
]
 
test2 = [
    [1, 1, 1],
    [1, 0, 1],
    [1, 1, 1]
]
 
test3 = [
    [1, 0, 1],
    [0, 1, 0],
    [1, 0, 1]
]
 
fractal('test1', test1)
fractal('test2', test2)
fractal('test3', test3)
 

====PYTHON=====
import os
import numpy as np
from scipy.sparse import csc_matrix, kron
from scipy.misc import imsave
 
 
def imgsave(name, arr, *args):
    imsave(name, arr.toarray(), *args)
 
 
def get_shape(mat):
    return mat.shape
 
 
def kronpow(mat):
    """
    Generate an arbitrary number of kronecker powers
    """
    matrix = mat
    while True:
        yield matrix
        matrix = kron(mat, matrix)
 
 
def fractal(name, mat, order=6):
    """
    Save fractal as jpg to 'fractals/name'
    """
    path = os.path.join('fractals', name)
    os.makedirs(path, exist_ok=True)
 
    fgen = kronpow(mat)
    print(name)
    for i in range(order):
        p = os.path.join(path, f'{i}.jpg')
        print('Calculating n =', i, end='\t', flush=True)
 
        mat = next(fgen)
        imgsave(p, mat)
 
        x, y = get_shape(mat)
        print('Saved as', x, 'x', y, 'image', p)
 
 
test1 = [
    [0, 1, 0],
    [1, 1, 1],
    [0, 1, 0]
]
 
test2 = [
    [1, 1, 1],
    [1, 0, 1],
    [1, 1, 1]
]
 
test3 = [
    [1, 0, 1],
    [0, 1, 0],
    [1, 0, 1]
]
 
test1 = np.array(test1, dtype='int8')
test1 = csc_matrix(test1)
 
test2 = np.array(test2, dtype='int8')
test2 = csc_matrix(test2)
 
test3 = np.array(test3, dtype='int8')
test3 = csc_matrix(test3)
 
fractal('test1', test1)
fractal('test2', test2)
fractal('test3', test3)

