====RUBY=====
require 'open-uri'
ordered_words = open('http://www.puzzlers.org/pub/wordlists/unixdict.txt', 'r').select do |word| 
  word.strip!
  word.chars.sort.join == word
end
 
grouped = ordered_words.group_by &:size
puts grouped[grouped.keys.max]

====RUBY=====
words = IO.foreach('unixdict.txt').map(&:chomp).select {|word| word.chars.sort.join == word}
puts words.group_by(&:size).sort_by(&:first).last.last

====RUBY=====
var words = [[]]
var file = %f'unixdict.txt'
 
file.open_r(\var fh, \var err) ->
    || die "Can't open file #{file}: $#{err}"
 
fh.each { |line|
    line.trim!
    if (line == line.sort) {
        words[line.length] := [] << line
    }
}
 
say words[-1].join(' ')

====PYTHON=====
import urllib.request
 
url = 'http://www.puzzlers.org/pub/wordlists/unixdict.txt'
words = urllib.request.urlopen(url).read().decode("utf-8").split()
ordered = [word for word in words if word==''.join(sorted(word))]
maxlen = len(max(ordered, key=len))
maxorderedwords = [word for word in ordered if len(word) == maxlen]
print(' '.join(maxorderedwords))

====PYTHON=====
import urllib.request
 
mx, url = 0, 'http://www.puzzlers.org/pub/wordlists/unixdict.txt'
 
for word in urllib.request.urlopen(url).read().decode("utf-8").split():
    lenword = len(word)
    if lenword >= mx and word==''.join(sorted(word)):
        if lenword > mx:
            words, mx = [], lenword
        words.append(word)
print(' '.join(words))

====PYTHON=====
'''The longest ordered words in a list'''
 
from functools import reduce
import urllib.request
 
 
# longestOrds :: [String] -> [String]
def longestOrds(ws):
    '''The longest ordered words in a given list.
    '''
    return reduce(triage, ws, (0, []))[1]
 
 
# triage :: (Int, [String]) -> String -> (Int, [String])
def triage(nxs, w):
    '''The maximum length seen for an ordered word,
       and the ordered words of this length seen so far.
    '''
    n, xs = nxs
    lng = len(w)
    return (
        (lng, ([w] if n != lng else xs + [w])) if (
            ordWord(w)
        ) else nxs
    ) if lng >= n else nxs
 
 
# ordWord :: String -> Bool
def ordWord(w):
    '''True if the word w is ordered.'''
    return reduce(stillRising, w[1:], (True, w[0]))[0]
 
 
# stillRising :: (Bool, Char) -> Char -> (Bool, Char)
def stillRising(bc, x):
    '''A boolean value paired with the current character.
       The boolean is true if no character in the word
       so far has been alphabetically lower than its
       predecessor.
    '''
    b, c = bc
    return ((x >= c) if b else b, x)
 
 
# TEST ---
if __name__ == '__main__':
    print(
        '\n'.join(longestOrds(
            urllib.request.urlopen(
                'http://wiki.puzzlers.org/pub/wordlists/unixdict.txt'
            ).read().decode("utf-8").split()
        ))
    )

