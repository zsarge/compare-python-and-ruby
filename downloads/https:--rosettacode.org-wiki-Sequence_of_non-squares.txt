====RUBY=====
def f(n)
  n + (0.5 + Math.sqrt(n)).floor
end
 
(1..22).each { |n| puts "#{n} #{f(n)}" }
 
non_squares = (1..1_000_000).map { |n| f(n) }
squares = (1..1001).map { |n| n**2 } # Note: 1001*1001 = 1_002_001 > 1_001_000 = f(1_000_000)
(squares & non_squares).each do |n|
  puts "Oops, found a square f(#{non_squares.index(n)}) = #{n}"
end

====RUBY=====
func nonsqr(n) { 0.5 + n.sqrt -> floor + n }
{|i| nonsqr(i) }.map(1..22).join(' ').say
 
{ |i|
  if (nonsqr(i).is_sqr) {
     die "Found a square in the sequence: #{i}"
  }
} << 1..1e6

====PYTHON=====
>>> from math import floor, sqrt
>>> def non_square(n):
        return n + floor(1/2 + sqrt(n))
 
>>> # first 22 values has no squares:
>>> print(*map(non_square, range(1, 23)))
2 3 5 6 7 8 10 11 12 13 14 15 17 18 19 20 21 22 23 24 26 27
 
>>> # The following check shows no squares up to one million:
>>> def is_square(n):
        return sqrt(n).is_integer()
 
>>> non_squares = map(non_square, range(1, 10 ** 6))
>>> next(filter(is_square, non_squares))
StopIteration                             Traceback (most recent call last)
<ipython-input-45-f32645fc1c0a> in <module>()
      1 non_squares = map(non_square, range(1, 10 ** 6))
----> 2 next(filter(is_square, non_squares))
 
StopIteration: 

====PYTHON=====
'''Sequence of non-squares'''
 
from itertools import count, islice
from math import floor, sqrt
 
 
# A000037 :: [Int]
def A000037():
    '''A non-finite series of integers.'''
    return map(nonSquare, count(1))
 
 
# nonSquare :: Int -> Int
def nonSquare(n):
    '''Nth term in the OEIS A000037 series.'''
    return n + floor(1 / 2 + sqrt(n))
 
 
# --------------------------TEST---------------------------
# main :: IO ()
def main():
    '''OEIS A000037'''
 
    def first22():
        '''First 22 terms'''
        return take(22)(A000037())
 
    def squareInFirstMillion():
        '''True if any of the first 10^6 terms are perfect squares'''
        return any(map(
            isPerfectSquare,
            take(10 ** 6)(A000037())
        ))
 
    print(
        fTable(main.__doc__)(
            lambda f: '\n' + f.__doc__
        )(lambda x: '    ' + showList(x))(
            lambda f: f()
        )([first22, squareInFirstMillion])
    )
 
 
# -------------------------DISPLAY-------------------------
 
# fTable :: String -> (a -> String) ->
# (b -> String) -> (a -> b) -> [a] -> String
def fTable(s):
    '''Heading -> x display function -> fx display function ->
       f -> xs -> tabular string.
    '''
    def go(xShow, fxShow, f, xs):
        ys = [xShow(x) for x in xs]
        return s + '\n' + '\n'.join(map(
            lambda x, y: y + ':\n' + fxShow(f(x)),
            xs, ys
        ))
    return lambda xShow: lambda fxShow: lambda f: lambda xs: go(
        xShow, fxShow, f, xs
    )
 
 
# -------------------------GENERAL-------------------------
 
# isPerfectSquare :: Int -> Bool
def isPerfectSquare(n):
    '''True if n is a perfect square.'''
    return sqrt(n).is_integer()
 
 
# showList :: [a] -> String
def showList(xs):
    '''Compact stringification of any list value.'''
    return '[' + ','.join(repr(x) for x in xs) + ']' if (
        isinstance(xs, list)
    ) else repr(xs)
 
 
# take :: Int -> [a] -> [a]
def take(n):
    '''The prefix of xs of length n,
       or xs itself if n > length xs.
    '''
    return lambda xs: list(islice(xs, n))
 
 
# MAIN ---
if __name__ == '__main__':
    main()

