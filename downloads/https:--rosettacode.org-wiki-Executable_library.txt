====RUBY=====
# hailstone.rb
module Hailstone
  module_function
  def hailstone n
    seq = [n]
    until n == 1
      n = (n.even?) ? (n / 2) : (3 * n + 1)
      seq << n
    end
    seq
  end
end
 
if __FILE__ == $0
  include Hailstone
 
  # for n = 27, show sequence length and first and last 4 elements
  hs27 = hailstone 27
  p [hs27.length, hs27[0..3], hs27[-4..-1]]
 
  # find the longest sequence among n less than 100,000
  n, len = (1 ... 100_000) .collect {|n|
    [n, hailstone(n).length]} .max_by {|n, len| len}
  puts "#{n} has a hailstone sequence length of #{len}"
  puts "the largest number in that sequence is #{hailstone(n).max}"
end

====RUBY=====
# hsfreq.rb
require 'hailstone'
 
h = Hash.new(0)
last = 99_999
(1..last).each {|n| h[Hailstone.hailstone(n).length] += 1}
length, count = h.max_by {|length, count| count}
 
puts "Given the hailstone sequences from 1 to #{last},"
puts "the most common sequence length is #{length},"
puts "with #{count} such sequences."

====RUBY=====
func hailstone(n) {
    gather {
        while (n > 1) {
            take(n)
            n = (n.is_even ? n/2 : (3*n + 1))
        }
        take(1)
    }
}
 
if (__FILE__ == __MAIN__) {             # true when not imported
    var seq = hailstone(27)
    say "hailstone(27) - #{seq.len} elements: #{seq.ft(0, 3)} [...] #{seq.ft(-4)}"
 
    var n = 0
    var max = 0
    100_000.times { |i|
        var seq = hailstone(i)
        if (seq.len > max) {
            max = seq.len
            n = i
        }
    }
 
    say "Longest sequence is for #{n}: #{max}"
}

====RUBY=====
include Hailstone
 
var score = Hash()
100_000.times { |i| score{ Hailstone::hailstone(i).len } := 0 ++ }
 
var k = score.keys.max_by {|k| score{k} }
say "Most common length is #{k}, occurring #{score{k}} times"

====PYTHON=====
def hailstone(n):
    seq = [n]
    while n>1:
        n = 3*n + 1 if n & 1 else n//2
        seq.append(n)
    return seq
 
if __name__ == '__main__':
    h = hailstone(27)
    assert len(h)==112 and h[:4]==[27, 82, 41, 124] and h[-4:]==[8, 4, 2, 1]
    print("Maximum length %i was found for hailstone(%i) for numbers <100,000" %
          max((len(hailstone(i)), i) for i in range(1,100000)))

====PYTHON=====
from collections import Counter
 
def function_length_frequency(func, hrange):
    return Counter(len(func(n)) for n in hrange).most_common()
 
if __name__ == '__main__':
    from executable_hailstone_library import hailstone
 
    upto = 100000
    hlen, freq = function_length_frequency(hailstone, range(1, upto))[0]
    print("The length of hailstone sequence that is most common for\n"
          "hailstone(n) where 1<=n<%i, is %i. It occurs %i times."
          % (upto, hlen, freq))

