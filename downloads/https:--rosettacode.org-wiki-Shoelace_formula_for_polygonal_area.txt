====RUBY=====
 
Point = Struct.new(:x,:y) do
 
  def shoelace(other)
    x * other.y - y * other.x
  end
 
end
 
class Polygon
 
  def initialize(*coords)
    @points = coords.map{|c| Point.new(*c) } 
  end
 
  def area
    points = @points + [@points.first]
    points.each_cons(2).sum{|p1,p2| p1.shoelace(p2) }.abs.fdiv(2)
  end
 
end
 
puts Polygon.new([3,4], [5,11], [12,8], [9,5], [5,6]).area  # => 30.0
 

====RUBY=====
func area_by_shoelace (*p) {
    var x = p.map{_[0]}
    var y = p.map{_[1]}
 
    var s = (
        (x ~Z* y.rotate(+1)).sum -
        (x ~Z* y.rotate(-1)).sum
    )
 
    s.abs / 2
}
 
say area_by_shoelace([3,4], [5,11], [12,8], [9,5], [5,6])

====PYTHON=====
>>> def area_by_shoelace(x, y):
    "Assumes x,y points go around the polygon in one direction"
    return abs( sum(i * j for i, j in zip(x,             y[1:] + y[:1]))
               -sum(i * j for i, j in zip(x[1:] + x[:1], y            ))) / 2
 
>>> points = [(3,4), (5,11), (12,8), (9,5), (5,6)]
>>> x, y = zip(*points)
>>> area_by_shoelace(x, y)
30.0
>>> 
# Even simpler:
# In python we can take an advantage of that x[-1] refers to the last element in an array, same as x[N-1].
# Introducing the index i=[0,1,2,...,N-1]; i-1=[-1,0,...,N-2]; N is the number of vertices of a polygon.
# Thus x[i] is a sequence of the x-coordinate of the polygon vertices, x[i-1] is the sequence shifted by 1 index.
# Note that the shift must be negative. The positive shift x[i+1] results in an error: x[N] index out of bound.
 
import numpy as np
# x,y are arrays containing coordinates of the polygon vertices
x=np.array([3,5,12,9,5]) 
y=np.array([4,11,8,5,6]) 
i=np.arange(len(x))
#Area=np.sum(x[i-1]*y[i]-x[i]*y[i-1])*0.5 # signed area, positive if the vertex sequence is counterclockwise
Area=np.abs(np.sum(x[i-1]*y[i]-x[i]*y[i-1])*0.5) # one line of code for the shoelace formula
 
# Remember that applying the Shoelace formula
# will result in a loss of precision if x,y have big offsets.
# Remove the offsets first, e.g. 
# x=x-np.mean(x);y=y-np.mean(y)
# or
# x=x-x[0];y=y-y[0]
# before applying the Shoelace formula.   
 
 
 
 

====PYTHON=====
'''Polygonal area by shoelace formula'''
 
from itertools import cycle, islice
from functools import reduce
from operator import sub
 
# --------- SHOELACE FORMULA FOR POLYGONAL AREA ----------
 
# shoelaceArea :: [(Float, Float)] -> Float
def shoelaceArea(xys):
    '''Area of polygon with vertices
       at (x, y) points in xys.
    '''
    def go(a, tpl):
        l, r = a
        (x, y), (dx, dy) = tpl
        return l + x * dy, r + y * dx
 
    return abs(sub(*reduce(
        go,
        zip(
            xys,
            islice(cycle(xys), 1, None)
        ),
        (0, 0)
    ))) / 2
 
 
# ------------------------- TEST -------------------------
# main :: IO()
def main():
    '''Sample calculation'''
 
    ps = [(3, 4), (5, 11), (12, 8), (9, 5), (5, 6)]
    print(__doc__ + ':')
    print(repr(ps) + '  ->  ' + str(shoelaceArea(ps)))
 
 
if __name__ == '__main__':
    main()

