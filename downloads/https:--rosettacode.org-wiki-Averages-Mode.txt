====RUBY=====
def mode(ary)
  seen = Hash.new(0)
  ary.each {|value| seen[value] += 1}
  max = seen.values.max
  seen.find_all {|key,value| value == max}.map {|key,value| key}
end
 
def mode_one_pass(ary)
  seen = Hash.new(0)
  max = 0
  max_elems = []
  ary.each do |value|
    seen[value] += 1
    if seen[value] > max
      max = seen[value]
      max_elems = [value]
    elsif seen[value] == max
      max_elems << value
    end
  end
  max_elems
end
 
p mode([1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17])  # => [6]
p mode([1, 1, 2, 4, 4]) # => [1, 4]
p mode_one_pass([1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17])  # => [6]
p mode_one_pass([1, 1, 2, 4, 4]) # => [1, 4]

====RUBY=====
def one_mode(ary)
  ary.max_by { |x| ary.count(x) }
end

====RUBY=====
func mode(array) {
    var c = Hash.new;
    array.each{|i| c{i} := 0 ++};
    var max = c.values.max;
    c.keys.grep{|i| c{i} == max};
}

====RUBY=====
say mode([1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17]).join(' ');
say mode([1, 1, 2, 4, 4]).join(' ');

====RUBY=====
func one_mode(arr) {
    arr.max_by{|i| arr.count(i)};
}

====PYTHON=====
>>> from collections import defaultdict
>>> def modes(values):
	count = defaultdict(int)
	for v in values:
		count[v] +=1
	best = max(count.values())
	return [k for k,v in count.items() if v == best]
 
>>> modes([1,3,6,6,6,6,7,7,12,12,17])
[6]
>>> modes((1,1,2,4,4))
[1, 4]

====PYTHON=====
>>> from collections import Counter
>>> def modes(values):
	count = Counter(values)
	best = max(count.values())
	return [k for k,v in count.items() if v == best]
 
>>> modes([1,3,6,6,6,6,7,7,12,12,17])
[6]
>>> modes((1,1,2,4,4))
[1, 4]

====PYTHON=====
def onemode(values):
    return max(set(values), key=values.count)

