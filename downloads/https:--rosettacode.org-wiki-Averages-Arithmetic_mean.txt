====RUBY=====
# Crystal will return NaN if an empty array is passed
def mean(arr) : Float64
  arr.sum / arr.size.to_f
end

====RUBY=====
def mean(nums)
  nums.sum(0.0) / nums.size
end
 
nums = [3, 1, 4, 1, 5, 9]
nums.size.downto(0) do |i|
  ary = nums[0,i]
  puts "array size #{ary.size} : #{mean(ary)}"
end

====RUBY=====
func avg(Array list) {
    list.len > 0 || return 0;
    list.sum / list.len;
}
 
say avg([Math.inf, Math.inf]);
say avg([3,1,4,1,5,9]);
say avg([1e+20, 3, 1, 4, 1, 5, 9, -1e+20]);
say avg([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0.11]);
say avg([10, 20, 30, 40, 50, -100, 4.7, -1100]);

====PYTHON=====
from math import fsum
def average(x):
    return fsum(x)/float(len(x)) if x else 0
print (average([0,0,3,1,4,1,5,9,0,0]))
print (average([1e20,-1e-20,3,1,4,1,5,9,-1e20,1e-20]))

====PYTHON=====
2.3
2.3

====PYTHON=====
def average(x):
    return sum(x)/float(len(x)) if x else 0
print (average([0,0,3,1,4,1,5,9,0,0]))
print (average([1e20,-1e-20,3,1,4,1,5,9,-1e20,1e-20]))

====PYTHON=====
2.3
1e-21

====PYTHON=====
def avg(data):
    if len(data)==0:
        return 0
    else:
        return sum(data)/float(len(data))
print avg([0,0,3,1,4,1,5,9,0,0])

====PYTHON=====
2.3

====PYTHON=====
>>> from statistics import mean
>>> mean([1e20,-1e-20,3,1,4,1,5,9,-1e20,1e-20])
2.3
>>> mean([10**10000, -10**10000, 3, 1, 4, 1, 5, 9, 0, 0])
2.3
>>> mean([10**10000, -10**10000, 3, 1, 4, 1, 5, 9, Fraction(1, 10**10000), Fraction(-1, 10**10000)])
Fraction(23, 10)
>>> big = 10**10000
>>> mean([Decimal(big), Decimal(-big), 3, 1, 4, 1, 5, 9, 1/Decimal(big), -1/Decimal(big)])
Decimal('2.3')

====PYTHON=====
def (mean l)
  sum.l / len.l

