====RUBY=====
 
def comb(m, n)
    (0...n).to_a.each_combination(m) { |p| puts(p) }
end
 

====RUBY=====
def comb(m, n)
  (0...n).to_a.combination(m).to_a
end
 
comb(3, 5)  # => [[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]

====RUBY=====
combinations(5, 3, {|*c| say c })

====RUBY=====
func combine(n, set) {
 
    set.len || return []
    n == 1  && return set.map{[_]}
 
    var (head, result)
    head   = set.shift
    result = combine(n-1, [set...])
 
    for subarray in result {
        subarray.prepend(head)
    }
 
    result + combine(n, set)
}
 
combine(3, @^5).each {|c| say c }

====RUBY=====
func forcomb(callback, n, k) {
 
    if (k == 0) {
        callback([])
        return()
    }
 
    if (k<0 || k>n || n==0) {
        return()
    }
 
    var c = @^k
 
    loop {
        callback([c...])
        c[k-1]++ < n-1 && next
        var i = k-2
        while (i>=0 && c[i]>=(n-(k-i))) {
            --i
        }
        i < 0 && break
        c[i]++
        while (++i < k) {
            c[i] = c[i-1]+1
        }
    }
 
    return()
}
 
forcomb({|c| say c }, 5, 3)

====PYTHON=====
>>> from itertools import combinations
>>> list(combinations(range(5),3))
[(0, 1, 2), (0, 1, 3), (0, 1, 4), (0, 2, 3), (0, 2, 4), (0, 3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]

====PYTHON=====
def comb(m, lst):
    if m == 0: return [[]]
    return [[x] + suffix for i, x in enumerate(lst)
            for suffix in comb(m - 1, lst[i + 1:])]

====PYTHON=====
>>> comb(3, range(5))
[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]

====PYTHON=====
def comb(m, s):
    if m == 0: return [[]]
    if s == []: return []
    return [s[:1] + a for a in comb(m-1, s[1:])] + comb(m, s[1:])
 
print comb(3, range(5))

====PYTHON=====
 
def comb(m, s):
    if m == 1: return [[x] for x in s]
    if m == len(s): return [s]
    return [s[:1] + a for a in comb(m-1, s[1:])] + comb(m, s[1:])
 
 

