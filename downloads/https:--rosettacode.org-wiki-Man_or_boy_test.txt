====RUBY=====
def a(k, x1, x2, x3, x4, x5)
  b = uninitialized -> typeof(k)
  b = ->() { k -= 1; a(k, b, x1, x2, x3, x4) }
  k <= 0 ? x4.call + x5.call : b.call
end
 
puts a(10, -> {1}, -> {-1}, -> {-1}, -> {1}, -> {0})

====RUBY=====
def a(k, x1, x2, x3, x4, x5)
  b = lambda { k -= 1; a(k, b, x1, x2, x3, x4) }
  k <= 0 ? x4[] + x5[] : b[]
end
 
puts a(10, lambda {1}, lambda {-1}, lambda {-1}, lambda {1}, lambda {0})

====RUBY=====
func a(k, x1, x2, x3, x4, x5) {
    func b { a(--k, b, x1, x2, x3, x4) };
    k <= 0 ? (x4() + x5()) : b();
}
say a(10, ->{1}, ->{-1}, ->{-1}, ->{1}, ->{0});      #=> -67

====RUBY=====
func a(k, x1, x2, x3, x4, x5) {
    k <= 0 ? (x4() + x5())
           : func b { a(--k, b, x1, x2, x3, x4) }();
}
say a(10, ->{1}, ->{-1}, ->{-1}, ->{1}, ->{0});      #=> -67

====RUBY=====
class MOB {
    method a(k, x1, x2, x3, x4, x5) {
        func b { self.a(--k, b, x1, x2, x3, x4) };
        k <= 0 ? (x4() + x5()) : b();
    }
}
 
var obj = MOB();
say obj.a(10, ->{1}, ->{-1}, ->{-1}, ->{1}, ->{0});

====PYTHON=====
#!/usr/bin/env python
import sys
sys.setrecursionlimit(1025)
 
def a(in_k, x1, x2, x3, x4, x5):
    k = [in_k]
    def b():
        k[0] -= 1
        return a(k[0], b, x1, x2, x3, x4)
    return x4() + x5() if k[0] <= 0 else b()
 
x = lambda i: lambda: i
print(a(10, x(1), x(-1), x(-1), x(1), x(0))) 
 

====PYTHON=====
#!/usr/bin/env python
import sys
sys.setrecursionlimit(1025)
 
def a(k, x1, x2, x3, x4, x5):
    def b():
        b.k -= 1
        return a(b.k, b, x1, x2, x3, x4)
    b.k = k
    return x4() + x5() if b.k <= 0 else b()
 
x = lambda i: lambda: i
print(a(10, x(1), x(-1), x(-1), x(1), x(0))) 
 

====PYTHON=====
#!/usr/bin/env python
import sys
sys.setrecursionlimit(1025)
 
def A(k, x1, x2, x3, x4, x5):
    def B():
        nonlocal k
        k -= 1
        return A(k, B, x1, x2, x3, x4)
    return x4() + x5() if k <= 0 else B()
 
print(A(10, lambda: 1, lambda: -1, lambda: -1, lambda: 1, lambda: 0))

