====RUBY=====
original = "hello"
reference = original          # copies reference
copy1 = original.dup          # instance of original.class
copy2 = String.new(original)  # instance of String
Â 
original << " world!"         # append
p reference                   #=> "hello world!"
p copy1                       #=> "hello"
p copy2                       #=> "hello"

====RUBY=====
original = "hello".freeze     # prevents further modifications
copy1 = original.dup          # copies contents (without status)
copy2 = original.clone        # copies contents (with status)
p copy1.frozen?               #=> false
p copy1 << " world!"          #=> "hello world!"
p copy2.frozen?               #=> true
p copy2 << " world!"          #=> can't modify frozen String (RuntimeError)

====RUBY=====
var original = "hello";               # new String object
var reference = original;             # points at the original object
var copy1 = String.new(original);     # creates a new String object
var copy2 = original+'';              # ==//==

====PYTHON=====
>>> src = "hello"
>>> a = src
>>> b = src[:]
>>> import copy
>>> c = copy.copy(src)
>>> d = copy.deepcopy(src)
>>> src is a is b is c is d
True

====PYTHON=====
>>> a = 'hello'
>>> b = ''.join(a)
>>> a == b
True
>>> b is a  ### Might be True ... depends on "interning" implementation details!
False

