====RUBY=====
def odd_magic_square(n)
  n.times.map{|i| n.times.map{|j| n*((i+j+1+n/2)%n) + ((i+2*j-5)%n) + 1} }
end
 
def single_even_magic_square(n) 
  raise ArgumentError, "must be even, but not divisible by 4." unless (n-2) % 4 == 0
  raise ArgumentError, "2x2 magic square not possible." if n == 2
 
  order = (n-2)/4
  odd_square = odd_magic_square(n/2)
  to_add = (0..3).map{|f| f*n*n/4}
  quarts = to_add.map{|f| odd_square.dup.map{|row|row.map{|el| el+f}} }
 
  sq = []
  quarts[0].zip(quarts[2]){|d1,d2| sq << [d1,d2].flatten}
  quarts[3].zip(quarts[1]){|d1,d2| sq << [d1,d2].flatten}
 
  sq = sq.transpose
  order.times{|i| sq[i].rotate!(n/2)}
  swap(sq[0][order], sq[0][-order-1])
  swap(sq[order][order], sq[order][-order-1])
  (order-1).times{|i| sq[-(i+1)].rotate!(n/2)}
  randomize(sq)
end
 
def swap(a,b)
  a,b = b,a
end
 
def randomize(square)
  square.shuffle.transpose.shuffle
end
 
def to_string(square)
  n = square.size
  fmt = "%#{(n*n).to_s.size + 1}d" * n
  square.inject(""){|str,row| str << fmt % row << "\n"}
end
 
puts to_string(single_even_magic_square(6))

====RUBY=====
class Magic_square
  attr_reader :square
  LUX = { L: [[4, 1], [2, 3]], U: [[1, 4], [2, 3]], X: [[1, 4], [3, 2]] }
 
  def initialize(n)
    raise ArgumentError, "must be even, but not divisible by 4." unless (n-2) % 4 == 0
    raise ArgumentError, "2x2 magic square not possible." if n == 2
    @n = n
    oms = odd_magic_square(n/2)
    mat = make_lux_matrix(n/2)
    @square = synthesize(oms, mat)
    puts to_s
  end
 
  def odd_magic_square(n)       # zero beginning, it is 4 multiples.
    n.times.map{|i| n.times.map{|j| (n*((i+j+1+n/2)%n) + ((i+2*j-5)%n)) * 4} }
  end
 
  def make_lux_matrix(n)
    center = n / 2
    lux = [*[:L]*(center+1), :U, *[:X]*(n-center-2)]
    matrix = lux.map{|x| Array.new(n, x)}
    matrix[center][center] = :U
    matrix[center+1][center] = :L
    matrix
  end
 
  def synthesize(oms, mat)
    range = 0[email protected]/2
    range.inject([]) do |matrix,i|
      row = [[], []]
      range.each do |j|
        x = oms[i][j]
        LUX[mat[i][j]].each_with_index{|lux,k| row[k] << lux.map{|y| x+y}}
      end
      matrix << row[0].flatten << row[1].flatten
    end
  end
 
  def to_s
    format = "%#{(@n*@n).to_s.size}d " * @n + "\n"
    @square.map{|row| format % row}.join
  end
end
 
sq = Magic_square.new(6).square

====PYTHON=====
 
import math
from sys import stdout
 
LOG_10 = 2.302585092994
 
 
# build odd magic square
def build_oms(s):
    if s % 2 == 0:
        s += 1
    q = [[0 for j in range(s)] for i in range(s)]
    p = 1
    i = s // 2
    j = 0
    while p <= (s * s):
        q[i][j] = p
        ti = i + 1
        if ti >= s: ti = 0
        tj = j - 1
        if tj < 0: tj = s - 1
        if q[ti][tj] != 0:
            ti = i
            tj = j + 1
        i = ti
        j = tj
        p = p + 1
 
    return q, s
 
 
# build singly even magic square
def build_sems(s):
    if s % 2 == 1:
        s += 1
    while s % 4 == 0:
        s += 2
 
    q = [[0 for j in range(s)] for i in range(s)]
    z = s // 2
    b = z * z
    c = 2 * b
    d = 3 * b
    o = build_oms(z)
 
    for j in range(0, z):
        for i in range(0, z):
            a = o[0][i][j]
            q[i][j] = a
            q[i + z][j + z] = a + b
            q[i + z][j] = a + c
            q[i][j + z] = a + d
 
    lc = z // 2
    rc = lc
    for j in range(0, z):
        for i in range(0, s):
            if i < lc or i > s - rc or (i == lc and j == lc):
                if not (i == 0 and j == lc):
                    t = q[i][j]
                    q[i][j] = q[i][j + z]
                    q[i][j + z] = t
 
    return q, s
 
 
def format_sqr(s, l):
    for i in range(0, l - len(s)):
        s = "0" + s
    return s + " "
 
 
def display(q):
    s = q[1]
    print(" - {0} x {1}\n".format(s, s))
    k = 1 + math.floor(math.log(s * s) / LOG_10)
    for j in range(0, s):
        for i in range(0, s):
            stdout.write(format_sqr("{0}".format(q[0][i][j]), k))
        print()
    print("Magic sum: {0}\n".format(s * ((s * s) + 1) // 2))
 
 
stdout.write("Singly Even Magic Square")
display(build_sems(6))
 

