====RUBY=====
f, r = nil
fwd = proc {|c|
  c =~ /[[:alpha:]]/ ? [(print c), fwd[Fiber.yield f]][1] : c }
rev = proc {|c|
  c =~ /[[:alpha:]]/ ? [rev[Fiber.yield r], (print c)][0] : c }
 
(f = Fiber.new { loop { print fwd[Fiber.yield r] }}).resume
(r = Fiber.new { loop { print rev[Fiber.yield f] }}).resume
 
coro = f
until $stdin.eof?
  coro = coro.resume($stdin.getc)
end

====RUBY=====
require 'continuation' unless defined? Continuation
require 'stringio'
 
# Save current continuation.
def savecc(*data)
  # With MRI 1.8 (but not 1.9), the array literal
  #   [callcc {|cc| cc}, *data]
  # used the wrong return value from callcc. The workaround is to
  # put callcc outside the array literal.
  continuation = callcc {|cc| cc}
  [continuation, *data]
end
 
# Jump back to continuation, where savecc will return [nil, *data].
def jump_back(continuation)
  continuation[nil]
end
 
def read_odd_word(input, output)
  first_continuation, last_continuation = nil
  reverse = false
  # Read characters. Loop until end of stream.
  while c = input.getc
    c = c.chr   # For Ruby 1.8, convert Integer to String.
    if c =~ /[[:alpha:]]/
      # This character is a letter.
      if reverse
        # Odd word: Write letters in reverse order.
        saving, last_continuation, c = savecc(last_continuation, c)
        if saving
          last_continuation = saving
        else
          # After jump: print letters in reverse.
          output.print c
          jump_back last_continuation
        end
      else
        # Even word: Write letters immediately.
        output.print c
      end
    else
      # This character is punctuation.
      if reverse
        # End odd word. Fix trampoline, follow chain of continuations
        # (to print letters in reverse), then bounce off trampoline.
        first_continuation, c = savecc(c)
        if first_continuation
          jump_back last_continuation
        end
        output.print c      # Write punctuation.
        reverse = false     # Begin even word.
      else
        output.print c      # Write punctuation.
        reverse = true      # Begin odd word.
        # Create trampoline to bounce to (future) first_continuation.
        last_continuation, = savecc
        unless last_continuation
          jump_back first_continuation
        end
      end
    end
  end
  output.puts   # Print a cosmetic newline.
end
 
def odd_word(string)
  read_odd_word StringIO.new(string), $stdout
end
 
odd_word "what,is,the;meaning,of:life."
odd_word "we,are;not,in,kansas;any,more."

====RUBY=====
func rev {
    (var c = STDIN.getc) \\ return()
    if (c ~~ /^[a-z]\z/i) {
        var r = rev()
        print c
        return r
    }
    return c
}
 
var (n=0, l=false)
while (defined(var c = STDIN.getc)) {
    var w = (c ~~ /^[a-z]\z/i)
    ++n if (w && !l)
    l = w
    if (n & 1) {
        print c
    } else {
        var r = rev()
        print(c, r)
        n = 0
        l = false
    }
}

====PYTHON=====
from sys import stdin, stdout
 
def char_in(): return stdin.read(1)
def char_out(c): stdout.write(c)
 
def odd(prev = lambda: None):
	a = char_in()
	if not a.isalpha():
		prev()
		char_out(a)
		return a != '.'
 
	# delay action until later, in the shape of a closure
	def clos():
		char_out(a)
		prev()
 
	return odd(clos)
 
def even():
	while True:
		c = char_in()
		char_out(c)
		if not c.isalpha(): return c != '.'
 
e = False
while odd() if e else even():
	e = not e

====PYTHON=====
from sys import stdin, stdout
 
def char_in(): return stdin.read(1)
def char_out(c): stdout.write(c)
 
def odd():
	a = char_in()
	if a.isalpha():
		r = odd()
		char_out(a)
		return r
 
	# delay printing terminator until later, in the shape of a closure
	def clos():
		char_out(a)
		return a != '.'
 
	return clos
 
def even():
	while True:
		c = char_in()
		char_out(c)
		if not c.isalpha(): return c != '.'
 
e = False
while odd()() if e else even():
	e = not e

====PYTHON=====
from sys import stdin, stdout
 
def fwd(c):
    if c.isalpha():
        return [stdout.write(c), (yield from fwd((yield f)))][1]
    else:
        return c
 
def rev(c):
    if c.isalpha():
        return [(yield from rev((yield r))), stdout.write(c)][0]
    else:
        return c
 
def fw():
    while True:
        stdout.write((yield from fwd((yield r))))
 
def re():
    while True:
        stdout.write((yield from rev((yield f))))
 
f = fw()
r = re()
next(f)
next(r)
 
coro = f
while True:
    c = stdin.read(1)
    if not c:
        break
    coro = coro.send(c)

