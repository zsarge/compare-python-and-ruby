====RUBY=====
class Empty
end
 
e = Empty.new
class << e
  attr_accessor :foo
end
e.foo = 1
puts e.foo  # output: "1"
 
f = Empty.new
f.foo = 1   # raises NoMethodError
 

====RUBY=====
yes_no = "Yes"
 
def yes_no.not
  replace( self=="Yes" ? "No": "Yes")
end
 
#Demo:
p yes_no.not # => "No"
p yes_no.not # => "Yes"
p "aaa".not  # => undefined method `not' for "aaa":String (NoMethodError)

====RUBY=====
class Empty{};
var e = Empty();    # create a new class instance
e{:foo} = 42;       # add variable 'foo'
say e{:foo};        # print the value of 'foo'

====PYTHON=====
class empty(object):
    pass
e = empty()

====PYTHON=====
   e.foo = 1

====PYTHON=====
   setattr(e, name, value)

====PYTHON=====
class empty(object):
    def __init__(this):
        this.foo = "whatever"
 
def patch_empty(obj):
    def fn(self=obj):
        print self.foo
    obj.print_output = fn
 
e = empty()
patch_empty(e)
e.print_output()
# >>> whatever

