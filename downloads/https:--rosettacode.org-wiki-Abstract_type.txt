====RUBY=====
abstract class Animal # only abstract class can have abstract methods
  abstract def move
  abstract def think
 
  # abstract class can have normal fields and methods
  def initialize(@name : String)
  end
 
  def process
    think
    move
  end
end
 
# WalkingAnimal still have to be declared abstract because `think` was not implemented
abstract class WalkingAnimal < Animal
  def move
    puts "#{@name} walks"
  end
end
 
class Human < WalkingAnimal
  property in_car = false
 
  def move
    if in_car
      puts "#{@name} drives a car"
    else
      super
    end
  end
 
  def think
    puts "#{@name} thinks"
  end
end
 
# Animal.new # => can't instantiate abstract class
he = Human.new("Andrew") # ok
he.process

====RUBY=====
require 'abstraction'
 
class AbstractQueue
  abstract
  def enqueue(object)
    raise NotImplementedError
  end
  def dequeue
    raise NotImplementedError
  end
end
 
class ConcreteQueue < AbstractQueue
  def enqueue(object)
    puts "enqueue #{object.inspect}"
  end
end

====RUBY=====
class A {
    # must be filled in by the class which will inherit it
    method abstract() { die 'Unimplemented' };
 
    # can be overridden in the class, but that's not mandatory
    method concrete() { say '# 42' };
}
 
class SomeClass << A {
    method abstract() {
        say "# made concrete in class"
    }
}
 
var obj = SomeClass.new;
obj.abstract();   # made concrete in class
obj.concrete();   # 42

====PYTHON=====
class BaseQueue(object):
    """Abstract/Virtual Class 
    """
    def __init__(self):
        self.contents = list()
        raise NotImplementedError
    def Enqueue(self, item):
        raise NotImplementedError
    def Dequeue(self):
        raise NotImplementedError
    def Print_Contents(self):
        for i in self.contents:
            print i,

====PYTHON=====
from abc import ABCMeta, abstractmethod
 
class BaseQueue():
    """Abstract Class 
    """
    __metaclass__ = ABCMeta
 
    def __init__(self):
        self.contents = list()
 
    @abstractmethod
    def Enqueue(self, item):
        pass
 
    @abstractmethod
    def Dequeue(self):
        pass
 
    def Print_Contents(self):
        for i in self.contents:
            print i,

