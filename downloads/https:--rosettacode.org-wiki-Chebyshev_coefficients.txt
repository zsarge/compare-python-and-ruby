====RUBY=====
def mapp(x, min_x, max_x, min_to, max_to)
    return (x - min_x) / (max_x - min_x) * (max_to - min_to) + min_to
end
 
def chebyshevCoef(func, min, max, coef)
    n = coef.length
 
    for i in 0 .. n-1 do
        m = mapp(Math.cos(Math::PI * (i + 0.5) / n), -1, 1, min, max)
        f = func.call(m) * 2 / n
 
        for j in 0 .. n-1 do
            coef[j] = coef[j] + f * Math.cos(Math::PI * j * (i + 0.5) / n)
        end
    end
end
 
N = 10
def main
    c = Array.new(N, 0)
    min = 0
    max = 1
    chebyshevCoef(lambda { |x| Math.cos(x) }, min, max, c)
 
    puts "Coefficients:"
    puts c
end
 
main()

====RUBY=====
func chebft (callback, a, b, n) {
 
    var bma = (0.5 * b-a);
    var bpa = (0.5 * b+a);
 
    var pi_n = ((0..(n-1) »+» 0.5) »*» (Number.pi / n));
    var f = (pi_n »cos»() »*» bma »+» bpa «call« callback);
    var sums = (0..(n-1) «run« {|i| f »*« ((pi_n »*» i) »cos»()) «+» });
 
    sums »*» (2/n);
}
 
chebft(func(v){v.cos}, 0, 1, 10).each { |v|
    say ("%+.10e" % v);
}

====PYTHON=====
import math
 
def test_func(x):
    return math.cos(x)
 
def mapper(x, min_x, max_x, min_to, max_to):
    return (x - min_x) / (max_x - min_x) * (max_to - min_to) + min_to
 
def cheb_coef(func, n, min, max):
    coef = [0.0] * n
    for i in xrange(n):
        f = func(mapper(math.cos(math.pi * (i + 0.5) / n), -1, 1, min, max)) * 2 / n
        for j in xrange(n):
            coef[j] += f * math.cos(math.pi * j * (i + 0.5) / n)
    return coef
 
def cheb_approx(x, n, min, max, coef):
    a = 1
    b = mapper(x, min, max, -1, 1)
    c = float('nan')
    res = coef[0] / 2 + coef[1] * b
 
    x = 2 * b
    i = 2
    while i < n:
        c = x * b - a
        res = res + coef[i] * c
        (a, b) = (b, c)
        i += 1
 
    return res
 
def main():
    N = 10
    min = 0
    max = 1
    c = cheb_coef(test_func, N, min, max)
 
    print "Coefficients:"
    for i in xrange(N):
        print " % lg" % c[i]
 
    print "\n\nApproximation:\n    x      func(x)       approx      diff"
    for i in xrange(20):
        x = mapper(i, 0.0, 20.0, min, max)
        f = test_func(x)
        approx = cheb_approx(x, N, min, max, c)
        print "%1.3f %10.10f %10.10f % 4.2e" % (x, f, approx, approx - f)
 
    return None
 
main()

