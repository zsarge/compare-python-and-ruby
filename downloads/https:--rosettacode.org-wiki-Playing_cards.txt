====RUBY=====
class Card
  # class constants
  SUITS = %i[ Clubs Hearts Spades Diamonds ]
  PIPS  = %i[ 2 3 4 5 6 7 8 9 10 Jack Queen King Ace ]
 
  # class variables (private)
  @@suit_value = Hash[ SUITS.each_with_index.to_a ]
  @@pip_value  = Hash[ PIPS.each_with_index.to_a ]
 
  attr_reader :pip, :suit
 
  def initialize(pip,suit)
    @pip = pip
    @suit = suit
  end
 
  def to_s
    "#{@pip} #{@suit}"
  end
 
  # allow sorting an array of Cards: first by suit, then by value
  def <=>(other)
    (@@suit_value[@suit] <=> @@suit_value[other.suit]).nonzero? or
    @@pip_value[@pip] <=> @@pip_value[other.pip]
  end
end
 
class Deck
  def initialize
    @deck = Card::SUITS.product(Card::PIPS).map{|suit,pip| Card.new(pip,suit)}
  end
 
  def to_s
    @deck.inspect
  end
 
  def shuffle!
    @deck.shuffle!
    self
  end
 
  def deal(*args)
    @deck.shift(*args)
  end
end
 
deck = Deck.new.shuffle!
puts card = deck.deal
hand = deck.deal(5)
puts hand.join(", ")
puts hand.sort.join(", ")

====RUBY=====
define Pip = <A 2 3 4 5 6 7 8 9 10 J Q K>;
define Suit = <♦ ♣ ♥ ♠>;
 
class Card(pip, suit) {
    method to_s { pip + suit }
}
 
class Deck(cards=[]) {
 
    method init {
        cards = gather {
            Pip.each { |p| Suit.each { |s| take(Card(p, s)) } }
        }
    }
 
    method shuffle {
        cards.shuffle!;
    }
 
    method deal { cards.shift };
    method to_s { cards.join(" ") };
}
 
var d = Deck();
say "Deck: #{d}";
 
var top = d.deal;
say "Top card: #{top}";
 
d.shuffle;
say "Deck, shuffled: #{d}";

====PYTHON=====
import random
 
class Card(object):
    suits = ("Clubs","Hearts","Spades","Diamonds")
    pips = ("2","3","4","5","6","7","8","9","10","Jack","Queen","King","Ace")
 
    def __init__(self, pip,suit):
        self.pip=pip
        self.suit=suit
 
    def __str__(self):
        return "%s %s"%(self.pip,self.suit)
 
class Deck(object):
    def __init__(self):
        self.deck = [Card(pip,suit) for suit in Card.suits for pip in Card.pips]
 
    def __str__(self):
        return "[%s]"%", ".join( (str(card) for card in self.deck))
 
    def shuffle(self):
        random.shuffle(self.deck)
 
    def deal(self):
        self.shuffle()  # Can't tell what is next from self.deck
        return self.deck.pop(0)

====PYTHON=====
from pokerhand import Card, suit, face
from itertools import product
from random import randrange
 
class Deck():
    def __init__(self):
        self.__deck = [Card(f, s) for f,s in product(face, suit)]
 
    def __repr__(self):
        return 'Deck of ' + ' '.join(repr(card) for card in self.__deck)
 
    def shuffle(self):
        pass
 
    def deal(self):
        return self.__deck.pop(randrange(len(self.__deck)))
 
if __name__ == '__main__':
    deck = Deck()
    print('40 cards from a deck:\n')
    for i in range(5):
        for j in range(8):
            print(deck.deal(), end=' ')
        print()
    print('\nThe remaining cards are a', deck)

