====RUBY=====
msg = "Hello World"
msg << "!"
puts msg                #=> Hello World!
 
puts msg.frozen?        #=> false
msg.freeze
puts msg.frozen?        #=> true
begin
  msg << "!"
rescue => e
  p e                   #=> #<RuntimeError: can't modify frozen String>
end
 
puts msg                #=> Hello World!
msg2 = msg
 
# The object is frozen, not the variable.
msg = "hello world"     # A new object was assigned to the variable.
 
puts msg.frozen?        #=> false
puts msg2.frozen?       #=> true

====RUBY=====
# There are two methods in the copy of the object.
msg = "Hello World!".freeze
msg2 = msg.clone        # Copies the frozen and tainted state of obj.
msg3 = msg.dup          # It doesn't copy the status (frozen, tainted) of obj.
puts msg2               #=> Hello World!
puts msg3               #=> Hello World!
puts msg2.frozen?       #=> true
puts msg3.frozen?       #=> false

====RUBY=====
define PI = 3.14159;            # compile-time defined constant
const MSG = "Hello world!";     # run-time defined constant

====PYTHON=====
>>> s = "Hello"
>>> s[0] = "h"
 
Traceback (most recent call last):
  File "<pyshell#1>", line 1, in <module>
    s[0] = "h"
TypeError: 'str' object does not support item assignment

====PYTHON=====
>>> class Immut(object):
	def __setattr__(self, *args):
		raise TypeError(
			"'Immut' object does not support item assignment")
 
        __delattr__ = __setattr__
 
        def __repr__(self):
		return str(self.value)
 
        def __init__(self, value):
                # assign to the un-assignable the hard way.
		super(Immut, self).__setattr__("value", value)
 
>>> im = Immut(123)
>>> im
123
>>> im.value = 124
 
Traceback (most recent call last):
  File "<pyshell#27>", line 1, in <module>
    del a.value
  File "<pyshell#23>", line 4, in __setattr__
    "'Immut' object does not support item assignment")
TypeError: 'Immut' object does not support item assignment
>>>

